<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
		"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article>
<articleinfo>
	<title>MySQL++ User Manual</title>
	
	<authorgroup>
		<author>
			<firstname>Kevin</firstname>
			<surname>Atkinson</surname>
		</author>

		<author>
			<firstname>Sinisa</firstname>
			<surname>Milivojevic</surname>
		</author>

		<author>
			<firstname>Monty</firstname>
			<surname>Widenius</surname>
		</author>

		<author>
			<firstname>Warren</firstname>
			<surname>Young</surname>
		</author>
	</authorgroup>

	<copyright>
		<year>1998-2001, 2005</year>
		<holder>Kevin Atkinson (original author)</holder>
		<holder>MySQL AB</holder>
		<holder>Educational Technology Resources</holder>
	</copyright>

	<pubdate role="rcs">$Date$</pubdate>
</articleinfo>


<sect1 id="intro">
	<title>Introduction</title>

	<para>MySQL++ is a powerful C++ wrapper for MySQL's C API.
	Its purpose is to make working with queries as easy as working
	with STL containers.</para>

	<para>The latest version of MySQL++ can be found at
	<ulink url="http://tangentsoft.net/mysql++/">the official web
	site</ulink>.</para>

	<para>Support for MySQL++ can be had on <ulink
	url="http://lists.mysql.com/plusplus">the mailing
	list</ulink>. That page hosts the mailing list archives, and
	tells you how you can subscribe.</para>


	<sect2>
		<title>A Brief History of MySQL++</title>

		<para>MySQL++ was created in 1998 by Kevin Atkinson. It
		started out MySQL-specific, but there were early efforts
		to try and make it database-independent, and call it
		SQL++. This is where the old library name "sqlplus"
		came from. This is also why the old versions prefixed
		some class names with "Mysql" but not others: the others
		were supposed to be the database-independent parts.</para>

		<para>Then in 1999, Sinisa Milivojevic unofficially
		took over maintenance of the library, releasing
		versions 1.0 and 1.1. (All of Kevin's releases were
		pre-1.0 point releases.) Kevin gave over maintenance
		to Sinisa officially with 1.2, and ceased to have any
		involvement with the library's maintenance. Sinisa went
		on to maintain the library through 1.7.9, released
		in mid-2001. Since Sinisa is an employee of <ulink
		url="http://www.mysql.com/">MySQL AB</ulink>, it seems to
		be during this time that the dream of multiple-database
		compatibility died.</para>

		<para>With version 1.7.9, MySQL++ went into a period of
		stasis, lasting over three years. During this time, Sinisa
		ran the MySQL++ mailing list and supported its users, but
		made no new releases. There were many patches submitted
		during this period, some of which were ignored, others
		which were just put on the MySQL++ web site for people to
		try. A lot of these patches were mutually-incompatible,
		and not all of them gave a fully-functional copy of
		MySQL++.</para>

		<para>In early August of 2004, the current maintainer
		(Warren Young) got fed up with this situation and took
		over. He released 1.7.10 later that month.</para>
	</sect2>


	<sect2>
		<title>If You Have Questions...</title>

		<para>If you want to email someone to ask questions about
		this library, we greatly prefer that you send mail to
		the <ulink url="http://lists.mysql.com/plusplus">MySQL++
		mailing list</ulink>. The mailing list is archived,
		so if you have questions, do a search to see if the
		question has been asked before.</para>

		<para>You may find people's individual email addresses in
		various files within the MySQL++ distribution. Please do
		not send mail to them unless you are sending something
		that is inherently personal. Not all of the principal
		developers of MySQL++ are still active in its development;
		those who have dropped out have no wish to be bugged
		about MySQL++. Those of us still active in MySQL++
		development monitor the mailing list, so you aren't
		getting any extra "coverage" by sending messages to
		additional email addresses.</para>
	</sect2>
</sect1>


<sect1 id="overview">
	<title>Overview</title>

	<para>MySQL++ has developed into a very complex and powerful
	library, with many different ways to accomplish the same
	task. Unfortunately, this means that figuring out how to perform
	a simple task can be frustrating for new users. In this section
	we will provide an overview of the most important user-facing
	components of the library.</para>

	<para>The overall process for using MySQL++ is similar to that of
	most other database access APIs:</para>
	
	<orderedlist>
		<listitem><para>Open the connection</para></listitem>
		<listitem><para>Form and execute the query</para></listitem>
		<listitem><para>Iterate through the result set</para></listitem>
		<listitem><para>Go to 2 :)</para></listitem>
	</orderedlist>

	<para>There is, however, a lot of extra functionality along each
	step of the way.</para>


	<sect2>
		<title>The Connection Object</title>

		<para>A <ulink type="classref" url="Connection"/>
		object manages the connection to the MySQL server. You
		need at least one of these objects to do anything. A
		Connection object can either create Query objects for
		you, or you can execute queries directly through the
		Connection object. The separate Query object is the
		recommended way as it gives you far more power.</para>
	</sect2>


	<sect2>
		<title>The Query Object</title>

		<para>A <ulink type="classref" url="Query"/>
		object is the recommended way of building
		and executing queries. It is subclassed from
		<computeroutput>std::stringstream</computeroutput>
		which means you can write to it like any other
		C++ stream to form a query. The library includes
		<ulink url="../../refman/html/manip_8h.html">stream
		manipulators</ulink> that make it easy to generate
		syntactically-correct SQL.</para>

		<para>You can also set up <xref linkend="tquery"/> with
		this class. Template queries work something like the
		C <computeroutput>printf()</computeroutput> function:
		you set up a fixed query string with tags inside that
		indicate where to insert the variable parts. If you
		have multiple queries that are structurally similar,
		you simply set up one template query, and use that in
		the various locations of your program.</para>

		<para>A third method for building queries is to
		use <xref linkend="ssqls"/> (SSQLS). This feature
		presents your results as a C++ data structure, instead of
		making you access the data through MySQL++ intermediary
		classes. It also reduces the amount of embedded SQL code
		your program needs.</para>
	</sect2>


	<sect2>
		<title>Result Sets</title>

		<para>The field data in a result set are stored in a
		special <computeroutput>std::string</computeroutput>-like
		class called
		<ulink type="classref" url="ColData__Tmpl">ColData</ulink>.
		This class has conversion operators
		that let you automatically convert these
		objects to any of the basic C data types.
		Additionally, MySQL++ defines classes like
		<ulink type="structref" url="DateTime"/>,
		which you can initialize from a MySQL
		<computeroutput>DATETIME</computeroutput> string. These
		automatic conversions are protected against bad
		conversions, and can either set a warning flag or throw an
		exception, depending on how you set the library up.</para>

		<para>As for the result sets as a whole, MySQL++ has a
		number of different ways of representing them:</para>

		<sect3>
			<title>Queries That Do Not Return Data</title>

			<para>Not all SQL queries return data. An
			example is <computeroutput>CREATE
			TABLE</computeroutput>. For these
			types of queries, there is a special result type
			(<ulink type="classref" url="ResNSel"/>)
			that simply reports the
			state resulting from the query: whether the
			query was successful, how many rows it impacted
			(if any), etc.</para>
		</sect3>

		<sect3>
			<title>Queries That Return Data: Dynamic Method</title>

			<para>The easiest way to
			retrieve data from MySQL uses a
			<ulink type="classref" url="Result"/>
			object, which includes one or more
			<ulink type="classref" url="Row"/>
			objects. Because these classes are
			<computeroutput>std::vector</computeroutput>-like
			containers, you can treat the result set as a
			two-dimensional array. For example, you can get
			the 5th item on the 2nd row by simply saying
			<computeroutput>result.at(1).at(4)</computeroutput>. You
			can also access row elements
			by field name, like this:
			<computeroutput>result.at(2)["price"]</computeroutput>.</para>

			<para>An alternate way of accessing
			your query results is through a
			<ulink type="classref" url="ResUse"/>
			object. This class acts more like an STL input
			iterator than a container: you walk through
			your result set one item at a time, always going
			forward. You can't seek around in the result set,
			and you can't know how many results are in the
			set until you find the end. This method is more
			efficient when there can be arbitrarily many
			results, which could pose a memory allocation
			problem with the previous technique.</para>
		</sect3>

		<sect3>
			<title>Queries That Return Data: Static Method</title>

			<para>The <xref linkend="ssqls"/> (SSQLS) feature
			method above defines C++ structures that match the
			table structures in your database schema.</para>

			<para>We call it the "static" method because the
			table structure is fixed at compile time. Indeed,
			some schema changes require that you update your
			SSQLS definitions and recompile, or else the
			program could crash or throw "bad conversion"
			exceptions when MySQL++ tries to stuff the new
			data into an outdated data structure.  (Not all
			changes require a recompile. Adding a column to
			a table is safe, for instance, as the program
			will ignore the new column until you update the
			SSQLS definition.)</para>

			<para>The advantage of this method is that
			your program will require very little embedded
			SQL code. You can simply execute a query, and
			receive your results as C++ data structures,
			which can be accessed just as you would any
			other structure. The results can be accessed
			through the Row object, or you can ask the
			library to dump the results into a sequential
			or set-associative STL container for you. Consider
			this:</para>

			<programlisting>
vector&lt;mystruct&gt; v;
Query q = connection.query();
q &lt;&lt; "SELECT * FROM mytable";
q.storein(v);
for (vector&lt;mystruct&gt;::iterator it = v.begin(); it != v.end(); ++it) {
    cout &lt;&lt; "Price: " &lt;&lt; it-&gt;price &lt;&lt; endl;
}</programlisting>

			<para>Isn't that slick?</para>
		</sect3>
	</sect2>


	<sect2>
		<title>Exceptions</title>

		<para>By default, the library throws  <xref
		linkend="exceptions"/> whenever it encounters an
		error. You can ask the library to set an error flag
		instead, if you like, but the exceptions carry more
		information. Not only do they include a string
		member telling you why the exception was thrown,
		there are several exception types, so you can
		distinguish between different error types within a
		single <computeroutput>try</computeroutput>
		block.</para>
	</sect2>
</sect1>


<sect1 id="tutorial" xreflabel="Tutorial">
	<title>Tutorial</title>

	<para>This tutorial is meant to give you a jump start in using
	MySQL++. While it is a very complicated and powerful library,
	it's possible to make quite functional programs without tapping
	but a fraction of its power. This section will introduce you to
	the most useful fraction.</para>

	<para>This tutorial assumes you know C++ fairly well,
	in particuler the Standard Template Library (STL) and
	exceptions.</para>


	<sect2>
		<title>Running the Examples</title>

		<para>All of the examples are complete running
		programs. They may or may not be built for you already,
		depending on how you installed the library.</para>

		<para>If you installed MySQL++ from the source
		tarball on a Unixy system, the examples should
		have been built along with the library. If not,
		simply go into the examples directory and type
		<computeroutput>make</computeroutput>.</para>

		<para>If you installed the library via
		RPM, the examples are in the mysql++-devel
		RPM. After installing that, the examples are in
		<computeroutput>/usr/src/mysql++/examples</computeroutput>.
		To build them, go into that directory
		and type <computeroutput>make -f
		Makefile.simple</computeroutput>. See the file
		<computeroutput>/usr/share/doc/mysql++-devel*/README.examples</computeroutput>
		for more details.</para>

		<para>If you are on a Windows system, the build process
		for the library should have built the examples as
		well. Where the programs are depends on which compiler
		you're using. There should be a README.* file in the
		distribution specific to your compiler with further
		instructions.</para>

		<para>Once you have the examples building, you need
		to initialize the sample database by running the
		<computeroutput>resetdb</computeroutput> example. The
		usage of resetdb is as follows:</para>

		<screen>	resetdb [host [user [password [port]]]]</screen>

		<para>If you leave off host, localhost is assumed. If
		you leave off user, your current username is assumed. If
		you leave of the password, it is assumed that you don't
		need one. And if you leave off the port, it will use
		the standard MySQL port number.</para>

		<para>The user you give resetdb needs to be an account
		with permission to create databases. Once the database is
		created you can use any account that has full permission
		to the sample database mysql_cpp_data.</para>

		<para>You may also have to re-run resetdb after
		running some of the other examples, as they change the
		database.</para>
	</sect2>


	<sect2>
		<title>A Simple Example</title>

		<para>The following example demonstrates how to
		open a connection, execute a simple query, and
		display the results. This is
		<filename>examples/simple1.cpp</filename>:</para>

		<programlisting><xi:include href="simple1.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>

		<para>This example simply gets the entire "item"
		column from the example table, and prints those
		values out.</para>

		<para>Notice that MySQL++ lets you store
		result sets in STL containers, such as
		<computeroutput>std::vector</computeroutput>.
		We iterate through the result set just as you would
		with any other STL container. The only tricky bit is
		the <computeroutput>it->at(0)</computeroutput> idiom.
		This dereferences the iterator, which yields a <ulink
		type="classref" url="Row"/> object, on which we call
		the <computeroutput>at()</computeroutput> method to
		retrieve the first field.</para>

		<para>The only thing that isn't explicitly
		handled in the code block above is that
		we delegate connection establishment to
		<computeroutput>connect_to_db()</computeroutput>
		in the <computeroutput>util</computeroutput> module.
		We do this only because that function also handles
		the command line parsing for the examples, so they
		have a consistent interface.</para>
	</sect2>


	<sect2>
		<title>Examples' Utility Module</title>

		<para>I referred to the
		<computeroutput>util</computeroutput> module
		above. Following is the source for that module,
		which also contains other functions used by other
		examples. It isn't important to understand this module
		in detail, but understanding its outlines will make
		the following examples more clear.</para>

		<programlisting><xi:include href="util.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>

		<para>This is actually an abridged version of util.cpp,
		with the Unicode stuff removed. The interaction
		between MySQL, MySQL++ and Unicode is covered in a
		later chapter, <xref linkend="unicode"/>.</para>
	</sect2>


	<sect2>
		<title>A More Complicated Example</title>

		<para>The <computeroutput>simple1</computeroutput>
		example above was pretty trivial. Let's
		get a little deeper. Here is
		<filename>examples/simple2.cpp</filename>:</para>

		<programlisting><xi:include href="simple2.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>

		<para>This example illustrates several new concepts.</para>

		<para>First, notice that we store the result set in
		a <ulink type="classref" url="Result"/> object. Like
		the a <computeroutput>std::vector</computeroutput> we
		used in the <computeroutput>simple1</computeroutput>
		example, <computeroutput>Result</computeroutput>
		is a container type, so iterating through it
		is straightforward. The main difference is that
		<computeroutput>Result</computeroutput> is less
		distanced from the way the underlying MySQL C API
		works, so it is somewhat more efficient.</para>

		<para>Second, we access each row's data indirectly
		through a <ulink type="classref" url="Row"/>
		object. This affords several nice features, such
		as the ability to access a field by name.  You can
		also access fields by position, as we did in the
		<computeroutput>simple1</computeroutput> example,
		which is more efficient, but makes your code less
		flexible.</para>
	</sect2>


	<sect2 id="exceptions" xreflabel="exceptions">
		<title>Exceptions</title>

		<para>By default, MySQL++ uses exceptions to signal
		errors. Most of the examples have a full set of
		exception handlers. This is worthy of emulation.</para>

		<para>All of MySQL++'s custom exceptions derive
		from a common base class, <ulink type="classref"
		url="Exception"/>. That in turn derives from the
		Standard C++ exception base class,
		<computeroutput>std::exception</computeroutput>.
		Since the library can indirectly cause exceptions
		to come from the Standard C++ Library, it's possible
		to catch all exceptions from MySQL++ by just catching
		<computeroutput>std::exception</computeroutput> by
		reference. However, it's usually better to catch
		the all of the concret eexception types that you
		expect, and add a handler for
		<computeroutput>Exception</computeroutput> or
		<computeroutput>std::exception</computeroutput> to
		act as a "catch-all" for unexpected exceptions.</para>

		<para>Some of these exceptions are optional.
		When disabled, the object signals errors in
		some other way, typically by returning an
		error code or setting an error flag. Classes
		that support this feature derive from
		<ulink type="classref" url="OptionalExceptions"/>.
		Moreover, when such an object creates another object
		that also derives from this interface, it passes on its
		exception flag. Since everything flows from the
		<ulink type="classref" url="Connection"/>
		object, disabling exceptions on it at the start of
		the program disables all optional exceptions. You can
		see this technique at work in the "simple" examples,
		which keeps them, well, simple.</para>

		<para>Real-world code typically can't afford to
		lose out on the additional information and control
		offered by exceptions. But at the same time, it is
		still sometimes useful to disable exceptions
		temporarily. To do this, put the section of code
		that you want to not throw exceptions inside a
		block, and create a <ulink type="classref"
		url="NoExceptions"/> object at the top of that
		block. When created, it saves the exception flag
		of the <computeroutput>OptionalExceptions</computeroutput>
		derivative you pass to it, and then disables
		exceptions on it. When the
		<computeroutput>NoExceptions</computeroutput> object
		goes out of scope at the end of the block, it
		restores the exceptions flag to its previous state.
		See <filename>examples/resetdb.cpp</filename> to
		see this technique at work.</para>

		<para>When one
		<computeroutput>OptionalExceptions</computeroutput>
		derivative creates another such object and passes
		on its exception flag, it passes a copy of the
		flag. Therefore, the two objects' flags operate
		independently after the new one is created. There's
		no way to globally enable or disable this flag on
		existing objects in a single call.</para>

		<para>There are a few classes of exceptions MySQL++
		can throw that are not optional:</para>

		<itemizedlist>
			<listitem><para>The largest set of non-optional
			exceptions are those from the Standard C++
			Library. For instance, if your code said
			"<computeroutput>row[21]</computeroutput>"
			on a row containing only 5 fields, the
			<computeroutput>std::vector</computeroutput>
			underlying the row object will throw an
			exception. (It will, that is, if it conforms to
			the standard.) You might consider wrapping your
			program's main loop in a try block catching
			<computeroutput>std::exception</computeroutput>s,
			just in case you trigger one of these
			exceptions.</para></listitem>

			<listitem><para><ulink type="classref"
			url="ColData__Tmpl">ColData</ulink>
			will always throw <ulink type="classref" url="BadConversion"/>
			when you ask it to do an improper type
			conversion. For example, you'll get an
			exception if you try to convert "1.25"
			to <computeroutput>int</computeroutput>,
			but not when you convert "1.00" to
			<computeroutput>int</computeroutput>. In
			the latter case, MySQL++ knows that it
			can safely throw away the fractional
			part.</para></listitem>

			<listitem><para>If you use template
			queries and don't pass enough parameters
			when instantiating the template,
			<computeroutput>Query</computeroutput>
			will throw a <ulink type="classref" url="BadParamCount"/>
			exception.</para></listitem>
		</itemizedlist>

		<para>It's educational to modify the examples to
		force exceptions. For instance, misspell a field
		name, use an out-of-range index, or change a type
		to force a <computeroutput>ColData</computeroutput>
		conversion error.</para>
	</sect2>


	<sect2>
		<title>Quoting and Escaping</title>

		<para>SQL syntax often requires certain data to be
		quoted. Consider this query:</para>

		<programlisting>
SELECT * FROM stock WHERE item = 'Hotdog Buns' </programlisting>

		<para>Because the string "Hotdog Buns" contains a space,
		it must be quoted. With MySQL++, you don't have to add
		these quote marks manually:</para>

		<programlisting>
string s = "Hotdog Buns";
Query q = conn.query();
q &lt;&lt; "SELECT * FROM stock WHERE item = " &lt;&lt; quote_only &lt;&lt; s; </programlisting>

		<para>That code produces the same query string
		as in the previous example. We used the MySQL++
		<computeroutput>quote_only</computeroutput>
		manipulator, which causes single quotes to be
		added around the next item inserted into the
		stream. This works for various string types, for any
		type of data that can be converted to MySQL++'s
		<ulink type="classref" url="ColData__Tmpl">ColData</ulink>
		type, and for <xref linkend="ssqls"/>. (The next section
		introduces the SSQLS feature.)</para>

		<para>Quoting is pretty simple, but SQL syntax also often
		requires that certain characters be "escaped". Imagine
		if the string in the previous example was "Frank's Brand Hotdog
		Buns" instead. The resulting query would be:</para>

		<programlisting>
SELECT * FROM stock WHERE item = 'Frank's Brand Hotdog Buns' </programlisting>

		<para>That's not valid SQL syntax. The correct syntax is:</para>

		<programlisting>
SELECT * FROM stock WHERE item = 'Frank''s Brand Hotdog Buns' </programlisting>

		<para>As you might expect, MySQL++
		provides that feature, too, through its
		<computeroutput>escape</computeroutput>
		manipulator. But here, we want both quoting and
		escaping. That brings us to the most widely useful
		manipulator:</para>

		<programlisting>
string s = "Frank's Brand Hotdog Buns";
Query q = conn.query();
q &lt;&lt; "SELECT * FROM stock WHERE item = " &lt;&lt; quote &lt;&lt; s; </programlisting>

		<para>The <computeroutput>quote</computeroutput>
		manipulator both quotes strings, and escapes any
		characters that are special in SQL.</para>
	</sect2>


	<sect2>
		<title>Specialized SQL Structures</title>

		<sect3>
			<title>Retrieving data</title>

			<para>The next example introduces one of
			the most powerful features of MySQL++: <xref
			linkend="ssqls"/> (SSQLS). This is
			<filename>examples/custom1.cpp</filename>:</para>

			<programlisting><xi:include href="custom1.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
			
			<para>As you can see, SSQLS is very powerful.</para>
		</sect3>

		<sect3>
			<title>Adding data</title>

			<para>SSQLS can also be used to add data to a table. This
			is <filename>examples/custom2.cpp</filename>:</para>

			<programlisting><xi:include href="custom2.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>

			<para>That's all there is to it!</para>
			
			<para>There is one subtlety: MySQL++ automatically
			quotes and escapes the data when building SQL
			queries using SSQLS structures. It's efficient,
			too: MySQL++ is smart enough to apply quoting
			and escaping only for those data types that
			actually require it.</para>

			<para>Because this example modifies the sample
			database, you may want to run resetdb after
			running this program.</para>
		</sect3>

		<sect3>
			<title>Modifying data</title>

			<para>It almost as easy to modify data with
			SSQLS. This is
			<filename>examples/custom3.cpp</filename>:</para>

			<programlisting><xi:include href="custom3.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>

			<para>When you run the example you will notice
			that in the WHERE clause only the 'item' field
			is checked for. This is because SSQLS also also
			less-than-comparable.</para>

			<para>Don't forget to run resetdb after running
			the example.</para>
		</sect3>

		<sect3>
			<title>Less-than-comparable</title>

			<para>SSQLS structures can be sorted and
			stored in STL associative containers as
			demonstrated in the next example. This is
			<filename>examples/custom4.cpp</filename>:</para>

			<programlisting><xi:include href="custom4.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>

			<para>For more details on the SSQLS feature, see the <xref
			linkend="ssqls"/> chapter.</para>
		</sect3>
	</sect2>


	<sect2>
		<title>Handling SQL Nulls</title>

		<para>There is no equivalent of SQL's null in the standard
		C++ type system.</para>

		<para>The primary distinction is one of type: in
		SQL, null is a column attribute, which affects
		whether that column can hold a SQL null. Just
		like the 'const' keyword in the C++ type system,
		this effectively doubles the number of SQL data
		types. To emulate this, MySQL++ provides the <ulink
		type="classref" url="null">Null</ulink> template
		to allow the creation of distinct "nullable"
		versions of existing C++ types. So
		for example, if you have a <computeroutput>TINY
		INT UNSIGNED</computeroutput> column that can have
		nulls, the proper declaration for MySQL++ would
		be:</para>

		<programlisting>
mysqlpp::Null&lt;unsigned char&gt; myfield;</programlisting>

		<para>Template instantiations are first-class types
		in the C++ language, on par with any other type. You
		can use <computeroutput>Null</computeroutput>
		template instantiations anywhere you'd use the
		plain version of that type. (You can see a complete
		list of <computeroutput>Null</computeroutput>
		template instantiations for all column
		types that MySQL understands at the top of
		<computeroutput>lib/type_info.cpp</computeroutput>.)</para>

		<para>There's a secondary distinction between SQL null
		and anything available in the standard C++ type system:
		SQL null is a distinct value, equal to nothing else. We
		can't use C++'s <computeroutput>NULL</computeroutput>
		for this because it is ambiguous, being equal to
		0 in integer context. MySQL++ provides the global
		<computeroutput>null</computeroutput> object, which you
		can assign to a <computeroutput>Null</computeroutput>
		template instance to make it equal to SQL null:</para>

		<programlisting>
myfield = mysqlpp::null;</programlisting>

		<para>The final aspect of MySQL++'s null handling
		is that, by default, it will enforce the uniqueness
		of the SQL null value. If you try to convert a SQL
		null to a plain C++ data type, MySQL++ will throw
		a <ulink type="classref" url="BadNullConversion"/>
		exception. If you insert a SQL null into a C++
		stream, you get "(NULL)". If you don't like
		this behavior, you can change it, by passing
		a different value for the second parameter to
		template <computeroutput>Null</computeroutput>. By
		default, this parameter is <ulink type="structref"
		url="NullisNull"/>, meaning that we should
		enforce the uniqueness of the null type. To
		relax this distinction, you can instantiate the
		<computeroutput>Null</computeroutput> template with
		a different behavior type: <ulink type="structref"
		url="NullisZero"/> or <ulink type="structref"
		url="NullisBlank"/>. Consider this code:</para>

		<programlisting>
mysqlpp::Null&lt;unsigned char, mysqlpp::NullisZero&gt; myfield;

myfield = mysqlpp::null;
cout &lt;&lt; myfield &lt;&lt; endl;

int x = myfield;
cout &lt;&lt; x &lt;&lt; endl;</programlisting>

		<para>This will print "0" twice. If
		you had used the default for the second
		<computeroutput>Null</computeroutput> template
		parameter, the first output statement would have
		printed "(NULL)", and the second would have thrown
		a <computeroutput>BadNullConversion</computeroutput>
		exception.</para>
	</sect2>


	<sect2>
		<title>Which Query Type to Use?</title>

		<para>There are three major ways to execute a query in MySQL++:
		<computeroutput>Query::execute()</computeroutput>,
		<computeroutput>Query::store()</computeroutput>, and
		<computeroutput>Query::use()</computeroutput>. Which should you
		use, and why?</para>

		<para><computeroutput>execute()</computeroutput>
		is for queries that do not return data <emphasis>per
		se</emphasis>. For instance, <computeroutput>CREATE
		INDEX</computeroutput>. You do get back some
		information from the MySQL server, which
		<computeroutput>execute()</computeroutput>
		returns to its caller in a
		<ulink type="classref" url="ResNSel"/>
		object. In addition to the obvious &mdash; a flag stating
		whether the query succeeded or not &mdash; this object also
		contains things like the number of rows that the query
		affected. If you only need the success status, there's
		<computeroutput>Query::exec()</computeroutput>, which
		just returns bool.</para>

		<para>If your query does pull data from
		the database, the simplest option is
		<computeroutput>store()</computeroutput>.
		This returns a <ulink type="classref" url="Result"/>
		object, which contains an in-memory copy of
		the result set. The nice thing about this is
		that <computeroutput>Result</computeroutput>
		is a sequential container, like
		<computeroutput>std::vector</computeroutput>, so you
		can iterate through it forwards and backwards, access
		elements with subscript notation, etc. There are also
		the <computeroutput>storein()</computeroutput> methods,
		which actually put the result set into an STL container
		of your choice. The downside of these methods is that
		a sufficiently large result set will give your program
		memory problems.</para>

		<para>For these large result sets, the superior
		option is a <computeroutput>use()</computeroutput>
		query. This returns a <ulink type="classref"
		url="ResUse"/> object, which is similar to Result,
		but without all of the random-access features. This
		is because a "use" query tells the database server
		to send the results back one row at a time, to be
		processed linearly. It's analogous to a C++ stream's
		input iterator, as opposed to a random-access
		iterator that a container like vector offers. By
		accepting this limitation, you can process arbitrarily
		large result sets. This technique is demonstrated
		in <filename>examples/simple3.cpp</filename>:</para>

		<programlisting><xi:include href="simple3.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>

		<para>This example does the same thing as
		<filename>simple2</filename>, only with a "use"
		query instead of a "store" query. If your program
		uses exceptions, you should instead look at
		<filename>examples/usequery.cpp</filename>, which
		does the same thing as <filename>simple</filename>,
		but with exception-awareness.</para>
	</sect2>


	<sect2>
		<title>Getting Field Meta-Information</title>

		<para>The following example demonstrates how to get
		information about the fields in a result set, such
		as the name of the field and the SQL type. This is
		<filename>examples/fieldinf1.cpp</filename>:</para>

		<programlisting><xi:include href="fieldinf1.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>
	</sect2>


	<sect2>
		<title>Let's Do Something Useful</title>

		<para>These next few examples demonstrate just how powerful
		C++ can be, allowing you to do a lot of work in few lines of
		code without losing efficiency.</para>

		<para>Since the code is meant to be re-used as-is,
		constants that can differ from one case to another have
		been grouped in order to simplify editing. Also, all of
		these examples have full error checking code, showing off
		the power of MySQL++'s exception handling features.</para>

		<sect3>
			<title>Loading binary file in a BLOB column</title>

			<para>Since MySQL 3.23, BLOB columns have
			been available, but their use is sometimes
			not straightforward. Besides showing how
			easy it can be with MySQL++, this example
			demonstrates several features of MySQL++.
			The program requires one command line
			parameter, which is a full path to the
			binary file. This is
			<filename>examples/load_file.cpp</filename>:</para>

			<programlisting><xi:include href="load_file.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>

			<para>Notice that we used the
			<computeroutput>escape</computeroutput>
			manipulator when building the INSERT query
			above. This is because we're not using one of
			the MySQL++ types that does automatic escaping
			and quoting.</para>
		</sect3>

		<sect3>
			<title>Displaying images in HTML from BLOB column</title>

			<para>This example is also a very short
			one, considering the function that it
			performs. Although all modern versions of
			MySQL have a command that dumps data from a BLOB
			column to a binary file, this example shows
			how to do it in your code instead, without
			requiring an temporary file on disk. This is
			<filename>examples/cgi_image.cpp</filename>:</para>

			<programlisting><xi:include href="cgi_image.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
		</sect3>

		<sect3>
			<title>DELETE or UPDATE from SELECT</title>

			<para>MySQL's SELECT statement has more
			power to winnow out just the items of
			interest from the database than do DELETE
			or UPDATE queries. Therefore, many people
			have wanted the ability to execute a SELECT
			statement that in fact deletes or updates
			the rows matched, rather than returning
			them. This example implements that feature
			in just a few lines of code. It is
			<filename>examples/updel.cpp</filename>:</para>

			<programlisting><xi:include href="updel.txt"
				parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>

			<para>Notice that the row values
			used in the IN clause aren't escaped or
			quoted. This is because row elements are
			<ulink type="classref" url="ColData__Tmpl">ColData</ulink>
			types, so they have automatic escaping and
			quoting, as appropriate to the type being
			inserted. If you want to disable this feature,
			it's easily done: click the ColData link for
			the details.</para>

			<para>Users of this example should beware that
			one more check is required in order to run this
			query safely: in some extreme cases, the size
			of the query might grow larger than MySQL's
			maximum allowed packet size. This check should
			be added.</para>
		</sect3>
	</sect2>
</sect1>


<sect1 id="tquery" xreflabel="Template Queries">
	<title>Template Queries</title>

	<para>Another powerful feature of MySQL++ is being able
	to set up template queries. These are kind of like C's
	<computeroutput>printf()</computeroutput> facility: you
	give MySQL++ a string containing the fixed parts of the
	query and placeholders for the variable parts, and you can
	later substitute in values into those placeholders.</para>

	<para>The following program demonstrates how to use this
	feature. This is <filename>examples/resetdb.cpp</filename>,
	the program you've run a few times now if you've worked
	through all the examples:</para>

	<programlisting><xi:include href="resetdb.txt"
		parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
	</programlisting>

	<para>The line just before the call to
	<computeroutput>query.parse()</computeroutput> sets the
	template, and the parse call puts it into effect. From
	that point on, you can re-use this query by calling any
	of several Query member functions that accept query
	template parameters. In this example, we're using
	<computeroutput>Query::execute()</computeroutput>.</para>

	<para>Let's dig into this feature a little deeper.</para>


	<sect2>
		<title>Setting up template queries</title>

		<para>To set up a template query, you simply insert it into
		the Query object, using numbered placeholders wherever you
		want to be able to change the query. Then, you call the
		parse() function to tell the Query object that the query
		string is a template query, and it needs to parse it:</para>

		<programlisting>
query &lt;&lt; "select (%2:field1, %3:field2) from stock where %1:wheref = %0q:what";
query.parse();</programlisting>

		<para>The format of the placeholder is:</para>

		<programlisting>
%###(modifier)(:name)(:)</programlisting>

		<para>Where '###' is a number up to three
		digits. It is the order of parameters given to a
		<ulink type="classref" url="SQLQueryParms"/> object,
		starting from 0.</para>

		<para>'modifier' can be any one of the following:</para>

		<blockquote>
		<informaltable frame="none">
		<tgroup cols="2">
		<colspec colsep="1" rowsep="1"/>
		<tbody>
			<row>
				<entry><emphasis role="bold">%</emphasis></entry>
				<entry>Print an actual "%"</entry>
			</row>
			<row>
				<entry><emphasis role="bold">""</emphasis></entry>
				<entry>Don't quote or escape no matter what.</entry>
			</row>
			<row>
				<entry><emphasis role="bold">q</emphasis></entry>
				<entry>This will quote and escape
				the item using the MySQL C API
				function <ulink url="mysql-escape-string"
				type="mysqlapi"/> if it is a string or char *,
				or another MySQL-specific type
				that needs to be quoted.</entry>
			</row>
			<row>
				<entry><emphasis role="bold">Q</emphasis></entry>
				<entry>Quote but don't escape
				based on the same rules as for 'q'. This
				can save a bit of processing time if you
				know the strings will never need
				quoting</entry>
			</row>
			<row>
				<entry><emphasis role="bold">r</emphasis></entry>
				<entry>Always quote and escape
				even if it is a number.</entry>
			</row>
			<row>
				<entry><emphasis role="bold">R</emphasis></entry>
				<entry>Always quote but
				don't escape even if it is
				a number.</entry>
			</row>
		</tbody>
		</tgroup>
		</informaltable>
		</blockquote>

		<para>":name" is for an optional name which aids
		in filling SQLQueryParms. Name can contain any
		alpha-numeric characters or the underscore. You can
		have a trailing colon, which will be ignored. If
		you need to represent an actual colon after the name,
		follow the name with two colons. The first one will end
		the name and the second one won't be processed.</para>
	</sect2>


	<sect2>
		<title>Setting the parameters at execution time</title>

		<para>To specify the parameters when
		you want to execute a query simply
		use <computeroutput>Query::store(const
		SQLString &amp;parm0, [..., const SQLString
		&amp;parm11])</computeroutput>. This
		type of multiple overload also exists for
		<computeroutput>Query::use()</computeroutput> and
		<computeroutput>Query::execute()</computeroutput>.
		'parm0' corresponds to the first parameter,
		etc. You may specify up to 12 parameters. For
		example:</para>

		<programlisting>
Result res = query.store("Dinner Rolls", "item", "item", "price")</programlisting>

		<para>with the template query provided above
		would produce:</para>

		<programlisting>
select (item, price) from stock where item = "Dinner Rolls"</programlisting>

		<para>The reason we didn't put the template parameters in
		numeric order...</para>

		<programlisting>
select (%0:field1, %1:field2) from stock where %2:wheref = %3q:what</programlisting>

		<para>...will become apparent shortly.</para>
	</sect2>


	<sect2>
		<title>Using defaults</title>

		<para>You can also set the parameters one at
		a time by means of class Query's public data
		member def. To change the values of the def,
		simply use the subscript operator. You can
		refer to the parameters either by number or by
		name. The following two examples have the same effect:</para>

		<programlisting>
query.def[0] = "Dinner Rolls"; 
query.def[1] = "item"; 
query.def[2] = "item"; 
query.def[3] = "price";</programlisting>

		<para>and</para>

		<programlisting>
query.def["what"] = "Dinner Rolls"; 
query.def["wheref"] = "item"; 
query.def["field1"] = "item"; 
query.def["field2"] = "price";</programlisting>

		<para>Once all the parameters are set simply
		execute as you would have executed the query
		before you knew about template queries:</para>

		<programlisting>
Result res = query.store()</programlisting>
	</sect2>


	<sect2>
		<title>Combining the two</title>

		<para>You can also combine the use of
		setting the parameters at execution time and
		setting them via the def object by calling
		<computeroutput>Query::store()</computeroutput>
		(or <computeroutput>use()</computeroutput>
		or <computeroutput>execute()</computeroutput>)
		without passing the full number of parameters
		that the template supports:</para>

		<programlisting>
query.def["field1"] = "item"; 
query.def["field2"] = "price"; 
Result res1 = query.store("Hamburger Buns", "item"); 
Result res2 = query.store(1.25, "price"); </programlisting>

		<para>Would store the query:</para>

		<programlisting>
select (item, price) from stock where item = "Hamburger Buns" </programlisting>

		<para>for res1 and</para>

		<programlisting>
select (item, price) from stock where price = 1.25 </programlisting>

		<para>for res2.</para>

		<para>Now you see why we ordered the placeholders
		in the template above as we did: we used positions
		0 and 1 for the ones we want to change frequently,
		and used 2 and 3 for the parameters that seldom
		change.</para>

		<para>One thing to watch out for, however,
		is that <computeroutput>Query::store(const
		char* q)</computeroutput> is also defined for
		executing the query q. Therefore, when you call
		<computeroutput>Query::store()</computeroutput>
		(or <computeroutput>use()</computeroutput>,
		or <computeroutput>execute()</computeroutput>)
		with only one item and that item is a const
		char*, you need to explicitly convert it into
		a SQLString to get the right overload:</para>

		<programlisting>
Result res = query.store(SQLString("Hamburger Buns")); </programlisting>
	</sect2>


	<sect2>
		<title>Error Handling</title>

		<para>If for some reason you did not specify all
		the parameters when executing the query and the
		remaining parameters do not have their values
		set via def, the query object will throw a
		<ulink type="classref" url="BadParamCount"/>
		object. If this happens, you
		can get an explanation of what
		happened by checking the value of
		<computeroutput>SQLQueryNEParms::string</computeroutput>,
		like so:</para>

		<programlisting>
query.def["field1"] = "item"; 
query.def["field2"] = "price"; 
Result res = query.store(1.25); </programlisting>

		<para>This would throw
		<computeroutput>SQLQueryNEParms</computeroutput>
		because the wheref is not specified.</para>

		<para>In theory, this exception should never be
		thrown. If the exception is thrown it probably
		a logic error in your program.</para>
	</sect2>
</sect1>


<sect1 id="ssqls" xreflabel="Specialized SQL Structures">
	<title>Specialized SQL Structures</title>

	<para>The Specialized SQL Structure (SSQLS) feature lets you
	easily define C++ structures that match the form of your SQL
	tables. Because of the extra functionality that this feature
	builds into these structures, MySQL++ can populate them
	automatically when retrieving data from the database; with
	queries returning many records, you can ask MySQL++ to populate
	an STL container of your SSQLS records with the results. When
	updating the database, MySQL++ can use SSQLS structures to match
	existing data, and it can insert SSQLS structures directly into
	the database.</para>

	<para>You define an SSQLS using one of several macros. (These
	are in the file custom.h, and in the file that it includes,
	custom-macros.h.) There are a bunch of different macros, for
	different purposes. The following sections will discuss each
	macro type separately, beginning with the easiest and most
	generally useful.</para>


	<sect2>
		<title>sql_create</title>

		<para>This is the most basic sort of SSQLS declaration:</para>

		<programlisting>
sql_create_5(stock, 0, 0,     
    string, item,
    int, num,                  
    double, weight,  
    double, price,  
    mysqlpp::Date, date)</programlisting>

		<para>This creates a C++ structure called 'stock'
		containing five member variables, along with some
		constructors and other member functions useful with
		MySQL++.</para>

		<para>One of the generated constructors takes a reference
		to a mysqlpp::Row object, allowing you to easily populate
		a vector of stocks like so:</para>

		<programlisting>
vector&lt;stock&gt; result; 
query.storein(result);</programlisting>

		<para>That's all there is to it. The only requirements
		are that the table structure be compatible with the
		SSQLS's member variables, and that the fields are in
		the same order.</para>

		<para>The general format of this set of macros is:</para>

		<programlisting>
sql_create_#(NAME, KEYS, INITPARMS, TYPE1, ITEM1, ... TYPE#, ITEM#)</programlisting>

		<para>Where # is the number of member variables,
		NAME is the name of the structure you wish to create,
		TYPE<emphasis>x</emphasis> is the type name for a
		member variable, and ITEM<emphasis>x</emphasis> is that
		variable's name.</para>

		<para>The KEYS and INITPARMS arguments can always be zero,
		to keep things simple. We will discuss what happens if
		you use different values in the next few sections.</para>
	</sect2>


	<sect2>
		<title>sql_create with Compare</title>

		<para>SSQLS structures can also have member functions that
		allow you to compare one structure to another. You simply
		change the first 0 in the previous example (KEYS) to a
		higher value. If this number is N, then two structures
		are considered equal if the first N members of each
		are equal.</para>

		<para>For example:</para>

		<programlisting>
sql_create_5(stock, 1, 0,     
    string, item,
    int, num,                  
    double, weight,  
    double, price,  
    mysqlpp::Date, date)</programlisting>

		<para>Here we are saying that the 'item' field is a kind
		of key field: it is always unique between any two 'stock'
		items, so if two stock records have equal item values,
		they are the same stock item.</para>

		<para>That change adds the following members to the
		SSQLS:</para>

		<programlisting>
struct stock {
    ...  
    stock(const std::string &amp;p1); 
    set(const std::string &amp;p1); 
    bool operator ==(const stock &amp;other) const;  
    bool operator !=(const stock &amp;other) const;   
    bool operator &gt;(const stock &amp;other) const;   
    bool operator &lt;(const stock &amp;other) const;   
    bool operator &gt;=(const stock &amp;other) const;   
    bool operator &lt;=(const stock &amp;other) const;   
    int cmp(const stock &amp;other) const;  
    int compare(const stock &amp;other) const;  
}  
      
int compare(const stock &amp;x, const stock &amp;y);</programlisting>

		<para>The global
		<computeroutput>compare()</computeroutput>
		function compares x to y and returns &lt;0 if
		x &lt; y, 0 if x = y, and &gt;0 if x &gt; y.
		<computeroutput>stock::cmp()</computeroutput> and
		<computeroutput>stock::compare()</computeroutput>
		are the same thing as <computeroutput>compare(*this,
		other)</computeroutput>.</para>

		<para>The additional constructor initializes the key
		fields of the structure and leaves the other member
		variables undefined. This is useful for creating temporary
		objects to use for comparisons like <computeroutput>x
		&lt;= stock("Hotdog")</computeroutput>.</para>

		<para>Because stock is now less-than-comparable you
		can store the query results in an STL associative
		container:</para>

		<programlisting>
std::set&lt;stock&gt; result;   
query.storein(result);</programlisting>

		<para>And you can now use it like any other set:</para>

		<programlisting>
cout &lt;&lt; result.lower_bound(stock("Hamburger"))-&gt;item &lt;&lt; endl;</programlisting>

		<para>This will return the first item that begins with
		"Hamburger".</para>

		<para>You can also use it will any STL algorithm that
		require the values to be less-than-comparable.</para>
	</sect2>


	<sect2>
		<title>sql_create with Additional Initializers</title>

		<para>If third parameter for this macro (INITPARMS) is
		nonzero, the SSQLS will have two additional members
		functions that make it easier to initialize the
		structure's data members. For example:</para>

		<programlisting>
sql_create_5(stock, 1, 5,   
    string, item,
    int, num,                  
    double, weight,  
    double, price,  
    mysqlpp::Date, date)</programlisting>

		<para>will add these functions to the structure relative to
		that in the previous example:</para>

		<programlisting>
struct stock {   
    ...  
    stock(const string&amp;, const int&amp;, const double&amp;,  
            const double&amp;, const mysqlpp::Date&amp;);
    void set(const string&amp;, const int&amp;, const double&amp;,  
            const double&amp;, const mysqlpp::Date&amp;);  
}</programlisting>

		<para>There is one trick with this: because each SSQLS
		has at least one other constructor besides the one
		defined by this feature, not every logical value for
		INITPARMS results in working code. A simple example is
		setting KEYS and INITPARMS to the same value: you get
		two identical constructor definitions, so the compiler
		refuses to compile the code. If you are getting compiler
		errors having to do with duplicate definitions, try
		changing this value to zero.</para>
	</sect2>


	<sect2>
		<title>An Important Limitation of sql_create</title>

		<para>The features described in the two previous sections
		work together nicely most of the time. However, if you try
		to use the same value for the second and third parameters to
		<computeroutput>sql_create_N</computeroutput>, your
		program will fail to compile.</para>

		<para>Why is this?</para>
		
		<para>The second parameter sets up SSQLS comparisons,
		one aspect of which defines a constructor taking just
		the table's key fields. The third parameter sets up
		an initialization constructor, taking as many fields
		as you request. When these two values are equal,
		you get two identical constructor definitions,
		which is illegal in C++.</para>
		
		<para>The solution is to use 0 for the third
		parameter, indicating that you do not need
		a separate full-initialization constructor.
		<filename>examples/custom6.cpp</filename> illustrates
		this:</para>

		<programlisting><xi:include href="custom6.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>

		<para>This example shows one other thing, which
		is how to retrieve a subset of a table using
		SSQLS. Because we wanted only one column from the
		table, we had to pass 0 for the third parameter to
		<computeroutput>sql_create_N</computeroutput> to get
		the code to compile.</para>
		
		<para>(See the simple1 example in the <xref
		linkend="tutorial"/> for another way to accomplish
		the same thing.)</para>
	</sect2>


	<sect2>
		<title>Additional Features of Specialized SQL Structures</title>
		
		<para>Up to this point, we haven't been using
		all of the features in the SSQLS structures
		we've been generating. We could have used the
		<computeroutput>sql_create_basic_*</computeroutput>
		macros instead, which would have worked just as well
		for what we've seen so far, and the generated code would
		have been smaller.</para>

		<para>Why is it worth ignoring the "basic" variants of
		these macros, then? Consider this:</para>

		<programlisting>
query.insert(s);</programlisting>

		<para>This does exactly what you think it does:
		it inserts 's' into the database. This is possible
		because a standard SSQLS has functions that the
		query object can call to get the list of fields
		and such, which it uses to build an insert query.
		<computeroutput>query::update()</computeroutput> and
		<computeroutput>query::replace()</computeroutput> also
		rely on this SSQLS feature. A basic SSQLS lacks these
		functions.</para>

		<para>Another feature of standard SSQLSes you might find
		a use for is changing the table name used in queries. By
		default, the table in the MySQL database is assumed to
		have the same name as the SSQLS structure type. But if
		this is inconvenient, you can globally change the table
		name used in queries like this:</para>

		<programlisting>
stock::table() = "MyStockData";</programlisting>
	</sect2>


	<sect2>
		<title>Harnessing SSQLS Internals</title>

		<para>Continuing the discussion in the
		previous section, there is a further set of
		methods that the non-"basic" versions of the
		<computeroutput>sql_create</computeroutput> macros
		define for each SSQLS. These methods are mostly for
		use within the library, but some of them are useful
		enough that you might want to harness them for your
		own ends. Here is some pseudocode showing how the
		most useful of these methods would be defined for the
		<computeroutput>stock</computeroutput> structure used
		in all the <computeroutput>custom*.cpp</computeroutput>
		examples:</para>

		<programlisting>
// Basic form
template &lt;class Manip&gt;   
stock_value_list&lt;Manip&gt; value_list(cchar *d = &#34;,&#34;,
    Manip m = mysqlpp::quote) const;  

template &lt;class Manip&gt;   
stock_field_list&lt;Manip&gt; field_list(cchar *d = &#34;,&#34;,   
    Manip m = mysqlpp::do_nothing) const;  

template &lt;class Manip&gt;   
stock_equal_list&lt;Manip&gt; equal_list(cchar *d = &#34;,&#34;,
    cchar *e = &#34; = &#34;, Manip m = mysqlpp::quote) const;  


// Boolean argument form
template &lt;class Manip&gt;
stock_cus_value_list&lt;Manip&gt; value_list([cchar *d, [Manip m,] ]   
    bool i1, bool i2 = false, ... , bool i5 = false) const;  

// List form  
template &lt;class Manip&gt;
stock_cus_value_list&lt;Manip&gt; value_list([cchar *d, [Manip m,] ]  
    stock_enum i1, stock_enum i2 = stock_NULL, ...,
    stock_enum i5 = stock_NULL) const;  

// Vector form  
template &lt;class Manip&gt;
stock_cus_value_list&lt;Manip&gt; value_list([cchar *d, [Manip m,] ]  
    vector&lt;bool&gt; *i) const;  

...Plus the obvious equivalents for field_list() and equal_list()</programlisting>

		<para>Rather than try to learn what all of these methods
		do at once, let's ease into the subject. Consider this
		code:</para>

		<programlisting>
stock s("Dinner Rolls", 75, 0.95, 0.97, "1998-05-25");   
cout &lt;&lt; "Value list: " &lt;&lt; s.value_list() &lt;&lt; endl;  
cout &lt;&lt; "Field list: " &lt;&lt; s.field_list() &lt;&lt; endl;  
cout &lt;&lt; "Equal list: " &lt;&lt; s.equal_list() &lt;&lt; endl;</programlisting>

		<para>That would produce something like:</para>

		<programlisting>
Value list: 'Dinner Rolls',75,0.95,0.97,'1998-05-25'   
Field list: item,num,weight,price,date  
Equal list: item = 'Dinner Rolls',num = 75,weight = 0.95, price = 0.97,date = '1998-05-25'</programlisting>

		<para>That is, a "value list" is a list of data member
		values within a particular SSQLS instance, a "field list"
		is a list of the fields (columns) within that SSQLS,
		and an "equal list" is a list in the form of an SQL
		equals clause.</para>
		
		<para>Just knowing that much, it
		shouldn't surprise you to learn that
		<computeroutput>Query::insert()</computeroutput> is
		implemented more or less like this:</para>

		<programlisting>
*this &lt;&lt; "INSERT INTO " &lt;&lt; v.table() &lt;&lt; " (" &lt;&lt; v.field_list() &lt;&lt;
        ") VALUES (" &lt;&lt; v.value_list() &lt;&lt; ")";</programlisting>

		<para>where 'v' is the SSQLS you're asking the
		Query object to insert into the database.</para>

		<para>Now let's look at a complete example,
		which uses one of the more complicated forms of
		<computeroutput>equal_list()</computeroutput>. This
		example builds a query with fewer hard-coded strings
		than the most obvious technique requires, which
		makes it more robust in the face of change. Here is
		<filename>examples/custom5.cpp</filename>:</para>

		<programlisting><xi:include href="custom5.txt"
			parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</programlisting>

		<para>This example uses the list form of
		<computeroutput>equal_list()</computeroutput>. The
		arguments <computeroutput>stock_weight</computeroutput>
		and <computeroutput>stock_price</computeroutput>
		are enum values equal to the position of these columns
		within the <computeroutput>stock</computeroutput> table.
		<computeroutput>sql_create_</computeroutput><emphasis>x</emphasis>
		generates this enum for you automatically.</para>

		<para>The boolean argument form of that
		<computeroutput>equal_list()</computeroutput> call would
		look like this:</para>

		<programlisting>
query &lt;&lt; "select * from stock where " &lt;&lt;
        res[0].equal_list(" and ", false, false, true, true, false);</programlisting>

		<para>It's a little more verbose, as you can
		see. And if you want to get really complicated,
		use the vector form:</para>

		<programlisting>
vector&lt;bool&gt; v(5, false);
v[stock_weight] = true;
v[stock_price] = true;
query &lt;&lt; "select * from stock where " &lt;&lt;
        res[0].equal_list(" and ", v);</programlisting>

		<para>This form makes the most sense if you are
		building many other queries, and so can re-use that
		vector object.</para>

		<para>Many of these methods accept manipulators and custom
		delimiters. The defaults are suitable for building SQL
		queries, but if you're using these methods in a different
		context, you may need to override these defaults. For
		instance, you could use these methods to dump data to a
		text file using different delimiters and quoting rules
		than SQL.</para>

		<para>At this point, we've seen all the major aspects
		of the SSQLS feature. The final sections of this chapter
		look at some of the peripheral aspects.</para>
	</sect2>


	<sect2>
		<title>Alternate Creation Methods</title>

		<para>If for some reason you want your SSQLS data members to
		have different names than used in the MySQL database, you can do
		so like this:</para>

		<programlisting>
sql_create_c_names_5(stock, 1, 5,        
    string, item, "item",
    int, num, "quantity",  
    double, weight, "weight",  
    double, price, "price"  
    mysqlpp::Date, date, "shipment")</programlisting>

		<para>If you want your SSQLS to have its data members
		in a different order from those in the MySQL table,
		you can do it like this:</para>

		<programlisting>
sql_create_c_order_5(stock, 2, 5,   
    mysqlpp::Date, date, 5,
    double, price, 4,   
    string, item, 1,    
    int, num, 2,   
    double, weight, 3)</programlisting>

		<para>You can combine the custom names and custom ordering like
		this:</para>

		<programlisting>
sql_create_complete_5(stock, 2, 5,   
    mysqlpp::date, date, "shipment", 5,
    double, price, "price", 4,
    string, item, "item", 1,
    int, num, "quantity", 2,
    double, weight, "weight", 3)</programlisting>

		<para>All three of these macro types have "basic"
		variants that work the same way. Again, basic SSQLSes
		lack the features necessary for automatic insert, update
		and replace query creation.</para>
	</sect2>


	<sect2>
		<title>Expanding SSQLS Macros</title>

		<para>If you ever need to see the code that a given SSQLS
		declaration expands out to, use the utility
		<computeroutput>doc/ssqls-pretty</computeroutput>, like so:</para>

		<programlisting>
ssqls-pretty &lt; myprog.cpp |less</programlisting>

		<para>This locates the first SSQLS declaration in that
		file and uses the C++ preprocessor to expand that
		macro. You may have to change the script to tell it
		where your MySQL++ header files are.</para>
	</sect2>


	<sect2>
		<title>Extending the SSQLS Mechanism</title>

		<para>The SSQLS headers &mdash; custom.h and
		custom-macros.h &mdash; are automatically generated
		by the Perl script custom.pl. Although it is possible
		to change this script to get additional functionality,
		it's usually better to do that through inheritance.</para>
		
		<para>A regular user may find it helpful to change
		the the limit on the maximum number of SSQLS data
		members allowed.  It's 25 out of the box. A smaller
		value may speed up compile time, or you may require
		a higher value because you have more complex tables
		than that. Simply change the
		<computeroutput>max_data_members</computeroutput>
		variable at the top of custom.pl and say 'make'.
		The limit for Visual C++ is 31, according to one
		report. There doesn't seem to be a practical limit
		with GCC 3.3 at least: I set the limit to 100 and
		the only thing that happened is that custom-macros.h
		went from 1.3 MB to 18 MB and the build time for
		<filename>examples/custom.*</filename> got a lot
		longer.</para>
	</sect2>
</sect1>


<sect1 id="unicode" xreflabel="Using Unicode with MySQL++">
	<title>Using Unicode with MySQL++</title>

	<sect2>
		<title>A Short History of Unicode</title>
		<subtitle>...with a focus on relevance to MySQL++</subtitle>

		<para>In the old days, computer operating systems only
		dealt with 8-bit character sets. This only gives you 256
		possible characters, but the modern Western languages have
		more characters combined than that by themselves. Add in
		all the other lanauges of the world, plus the various
		symbols people use, and you have a real mess! Since no
		standards body held sway over things like international
		character encoding in the early days of computing, many
		different character sets were invented. These character
		sets weren't even standardized between operating systems,
		so heaven help you if you needed to move localized Greek
		text on a Windows machine to a Russian Macintosh! The only
		way we got any international communication done at all
		was to build standards on the common 7-bit ASCII subset.
		Either people used approximations like a plain "c" instead
		of the French "&ccedil;", or they invented things like
		HTML entities ("&amp;ccedil;" in this case) to encode
		these additional characters using only 7-bit ASCII.</para>

		<para>Unicode solves this problem. It encodes every
		character in the world, using up to 4 bytes per
		character. The subset covering the most economically
		valuable cases takes two bytes per character, so most
		Unicode-aware programs deal in 2-byte characters,
		for efficiency.</para>

		<para>Unfortunately, Unicode came about two
		decades too late for Unix and C. Converting the
		Unix system call interface to use multi-byte
		Unicode characters would break all existing
		programs. The ISO lashed a wide character <ulink
		url="http://www.jargon.net/jargonfile/s/sidecar.html">sidecar</ulink>
		onto C in 1995, but in common practice C is still
		tied to 8-bit characters.</para>

		<para>As Unicode began to take off in the early 1990s,
		it became clear that some sort of accommodation
		with Unicode was needed in legacy systems like
		Unix and C. During the development of the <ulink
		url="http://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs">Plan
		9</ulink> operating system (a kind
		of successor to Unix) Ken Thompson <ulink
		url="http://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">invented</ulink>
		the <ulink url="http://en.wikipedia.org/wiki/UTF-8">UTF-8
		encoding</ulink>. UTF-8 is a superset of 7-bit ASCII
		and is compatible with C strings, since it doesn't use 0
		bytes anywhere as multi-byte Unicode encodings do. As a
		result, many programs that deal in text will cope with
		UTF-8 data even though they have no explicit support
		for UTF-8. (Follow the last link above to see how the
		design of UTF-8 allows this.)</para>

		<para>The MySQL database server comes out of the
		Unix/C tradition, so it only supports 8-bit characters
		natively. All versions of MySQL could store UTF-8 data,
		but sometimes the server actually needs to understand
		the data; when sorting, for instance. To support this,
		explicit UTF-8 support was added to MySQL in version
		4.1.</para>

		<para>Because MySQL++ does not need to
		understand the text flowing through it, it
		neither has nor needs explicit UTF-8 support.
		C++'s <computeroutput>std::string</computeroutput>
		stores UTF-8 data just fine. But, your program probably
		<emphasis>does</emphasis> care about the text it gets
		from the database via MySQL++. The remainder of this
		chapter covers the choices you have for dealing with
		UTF-8 encoded Unicode data in your program.</para>
	</sect2>


	<sect2>
		<title>Unicode and Unix</title>

		<para>Modern Unices support UTF-8 natively. Red Hat Linux,
		for instance, has had system-wide UTF-8 support since
		version 8. This continues in the Enterprise and Fedora
		forks of Red Hat Linux, of course.</para>

		<para>On such a Unix, the terminal I/O code understands
		UTF-8 encoded data, so your program doesn't require any
		special code to correctly display a UTF-8 string. If you
		aren't sure whether your system supports UTF-8 natively,
		just run the simple1 example: if the first item has
		two high-ASCII characters in place of the "&uuml;" in
		"N&uuml;rnberger Brats", you know it's not handling
		UTF-8.</para>

		<para>If your Unix doesn't support UTF-8 natively,
		it likely doesn't support any form of Unicode at all,
		for the historical reasons I gave above. Therefore,
		you will have to convert the UTF-8 data to the
		local 8-bit character set. The standard Unix
		function <computeroutput>iconv()</computeroutput>
		can help here. If your system doesn't have the
		<computeroutput>iconv()</computeroutput> facility, there
		is <ulink url="http://www.gnu.org/software/libiconv/">a
		free implementation</ulink> available from the GNU
		Project. Another library you might check out is IBM's
		<ulink url="http://icu.sourceforge.net/">ICU</ulink>. This
		is rather heavy-weight, so if you just need basic
		conversions, <computeroutput>iconv()</computeroutput>
		should suffice.</para>
	</sect2>


	<sect2>
		<title>Unicode and Win32</title>

		<para>Each Win32 API function that takes
		a string actually has two two versions. One
		version supports only 1-byte "ANSI" characters (a
		superset of ASCII), so they end in 'A'. Win32 also
		supports the 2-byte subset of Unicode called <ulink
		url="http://en.wikipedia.org/wiki/UCS-2">UCS-2</ulink>.
		Some call these "wide" characters, so the other
		set of functions end in 'W'. The <computeroutput><ulink
		url="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/messagebox.asp">MessageBox</ulink>()</computeroutput>
		API, for instance, is actually a macro,
		not a real function. If you define the
		<computeroutput>UNICODE</computeroutput>
		macro when building your program, the
		<computeroutput>MessageBox()</computeroutput>
		macro evaluates to
		<computeroutput>MessageBoxW()</computeroutput>; otherwise,
		to <computeroutput>MessageBoxA()</computeroutput>.</para>

		<para>Since MySQL uses UTF-8 and Win32 uses UCS-2,
		you must convert data going between the Win32
		API and MySQL++. Since there's no point in trying
		for portability &mdash; no other OS I'm aware of
		uses UCS-2 &mdash; you might as well use native
		Win32 functions for doing this translation. The following code
		is distilled from <computeroutput>utf8_to_win32_ansi()</computeroutput>
		in <filename>examples/util.cpp</filename>:</para>

		<programlisting>
void utf8_to_win32_ansi(const char* utf8_str, char* ansi_str, int ansi_len)
{
    wchar_t ucs2_buf[100];
    static const int ub_chars = sizeof(ucs2_buf) / sizeof(ucs2_buf[0]);

    MultiByteToWideChar(CP_UTF8, 0, utf8_str, -1, ucs2_buf, ub_chars);
    CPINFOEX cpi;
    GetCPInfoEx(CP_OEMCP, 0, &amp;cpi);
    WideCharToMultiByte(cpi.CodePage, 0, ucs2_buf, -1,
            ansi_str, ansi_len, 0, 0);
}</programlisting>

		<para>The examples use this function automatically on
		Windows systems. To see it in action, run simple1 in
		a console window (a.k.a. "DOS box"). The first item
		should be "N&uuml;rnberger Brats". If not, see the
		last paragraph in this section.</para>

		<para><computeroutput>utf8_to_win32_ansi()</computeroutput>
		converts <computeroutput>utf8_str</computeroutput>
		from UTF-8 to UCS-2, and from there to the local <ulink
		url="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/unicode_81rn.asp">code
		page</ulink>. "Waitaminnit," you shout! "I thought we
		were trying to get away from the problem of local code
		pages!" The console is one of the few Win32 facilities
		that doesn't support UCS-2 by default. It can be <ulink
		url="http://www.answers.com/topic/win32-console">put
		into UCS-2 mode</ulink>, but that seems like more
		work than we'd like to go to in a portable example
		program.  Since the default code page in most versions
		of Windows includes the "&uuml;" character used in the
		sample database, this conversion works out fine for our
		purposes.</para>
		
		<para>If your program is using the GUI to display
		text, you don't need the second conversion. Prove
		this to yourself by adding the following to
		<computeroutput>utf8_to_win32_ansi()</computeroutput>
		after the
		<computeroutput>MultiByteToWideChar()</computeroutput>
		call:</para>

		<programlisting>
MessageBox(0, ucs2_buf, "UCS-2 version of Item", MB_OK);</programlisting>

		<para>All of this assumes you're using Windows NT or one
		of its direct descendants: Windows 2000, Windows XP,
		Windows 2003 Server, and someday "Longhorn". Windows
		95/98/ME and Windows CE do not support UCS-2. They
		still have the 'W' APIs for compatibility, but they
		just smash the data down to 8-bit and call the 'A'
		version for you.</para>
	</sect2>


	<sect2>
		<title>For More Information</title>
			<para>The <ulink
			url="http://www.unicode.org/faq/">Unicode
			FAQs</ulink> page has copious information on
			this complex topic.</para>

			<para>When it comes to Unix
			and UTF-8 specific items, the <ulink
			url="http://www.cl.cam.ac.uk/~mgk25/unicode.html">UTF-8
			and Unicode FAQ for Unix/Linux</ulink> is a
			quicker way to find basic information.</para>
		</sect2>
</sect1>


<sect1 id="breakages">
	<title>Incompatible Library Changes</title>

	<para>This chapter documents those library changes since
	the epochal 1.7.9 release that break end-user programs. You
	can dig this stuff out of the ChangeLog, but the ChangeLog
	focuses more on explaining and justifying the facets of each
	change, while this section focuses on how to migrate your
	code between these library versions.</para>
	
	<para>Since pure additions do not break programs, those
	changes are still documented only in the ChangeLog.</para>


	<sect2>
		<title>API Changes</title>

		<para>This section documents files, functions,
		methods and classes that were removed or changed
		in an incompatible way. If your program uses the
		changed item, you will have to change something in
		your program to get it to compile after upgrading to
		each of these versions.</para>

		<sect3>
			<title>v1.7.10</title>

			<para>Removed
			<computeroutput>Row::operator[]()</computeroutput>
			overloads except the one for
			<computeroutput>size_type</computeroutput>,
			and added
			<computeroutput>Row::lookup_by_name()</computeroutput>
			to provide the "subscript by
			string" functionality.	In practical
			terms, this change means that the
			<computeroutput>row["field"]</computeroutput>
			syntax no longer works; you must use the new
			<computeroutput>lookup_by_name</computeroutput>
			method instead.</para>

			<para>Renamed the generated
			library on POSIX systems from
			<computeroutput>libsqlplus</computeroutput> to
			<computeroutput>libmysqlpp</computeroutput>.</para>
		</sect3>


		<sect3>
			<title>v1.7.19</title>

			<para>Removed
			<computeroutput>SQLQuery::operator=()</computeroutput>,
			and the same for its
			<computeroutput>Query</computeroutput>
			subclass. Use the copy constructor instead, if you need to copy
			one query to another query object.</para>
		</sect3>


		<sect3>
			<title>v1.7.20</title>

			<para>The library used to have two names for
			many core classes: a short one, such as
			<computeroutput>Row</computeroutput>
			and a longer one,
			<computeroutput>MysqlRow</computeroutput>. The
			library now uses the shorter names
			exclusively.</para>

			<para>All symbols within MySQL++ are in the
			<computeroutput>mysqlpp</computeroutput>
			namespace now if you use the new
			<computeroutput>mysql++.h</computeroutput>
			header. If you use the older
			<computeroutput>sqlplus.hh</computeroutput>
			or <computeroutput>mysql++.hh</computeroutput>
			headers, these symbols are hoist up into the
			global namespace. The older headers cause the
			compiler to emit warnings if you use them,
			and they will go away someday.</para>
		</sect3>

		
		<sect3>
			<title>v2.0.0</title>

			<sect4>
				<title>Connection class changes</title>

				<itemizedlist>
					<listitem><para><computeroutput>Connection::create_db()</computeroutput>
					and
					<computeroutput>drop_db()</computeroutput>
					return
					<computeroutput>true</computeroutput>
					on success. They returned
					<computeroutput>false</computeroutput>
					in v1.7.<emphasis>x</emphasis>!
					This change will only
					affect your code if
					you have exceptions
					disabled.</para></listitem>

					<listitem><para>Renamed
					<computeroutput>Connection::real_connect()</computeroutput>
					to
					<computeroutput>connect()</computeroutput>,
					made several more
					of its parameters
					default, and removed the old
					<computeroutput>connect()</computeroutput>
					method, as it's now a strict
					subset of the new one. The
					only practical consequence is
					that if your program was using
					<computeroutput>real_connect()</computeroutput>,
					you will have to change it to
					<computeroutput>connect()</computeroutput>.</para></listitem>

					<listitem><para>Replaced
					<computeroutput>Connection::read_option()</computeroutput>
					with new
					<computeroutput>set_option()</computeroutput>
					mechanism. In addition
					to changing the name,
					programs using this function
					will have to use the new
					<computeroutput>Connection::Option</computeroutput>
					enumerated values, accept a
					<computeroutput>true</computeroutput>
					return value as meaning
					success instead of 0, and
					use the proper argument
					type. Regarding the latter,
					<computeroutput>read_option()</computeroutput>
					took a <computeroutput>const
					char*</computeroutput>
					argument, but because it was
					just a thin wrapper over
					the MySQL C API function
					<ulink url="mysql-options"
					type="mysqlapi"/>, the actual
					value being pointed to could
					be any of several types. This
					new mechanism is properly
					type-safe.</para></listitem>
				</itemizedlist>
			</sect4>


			<sect4>
				<title>Exception-related changes</title>

				<itemizedlist>
					<listitem><para>Classes
					<computeroutput>Connection</computeroutput>,
					<computeroutput>Query</computeroutput>,
					<computeroutput>Result</computeroutput>,
					<computeroutput>ResUse</computeroutput>,
					and
					<computeroutput>Row</computeroutput>
					now derive from
					<ulink type="classref" url="OptionalExceptions"/>
					which gives these classes a
					common interface for disabling
					exceptions. In addition,
					almost all of the per-method
					exception-disabling flags were
					removed. The preferred method
					for disabling exceptions on
					these objects is to create
					an instance of the new
					<ulink type="classref" url="NoExceptions"/>
					class on the stack, which
					disables exceptions on an
					<computeroutput>OptionalExceptions</computeroutput>
					subclass as long as the
					<computeroutput>NoExceptions</computeroutput>
					instance is in
					scope. You can instead call
					<computeroutput>disable_exceptions()</computeroutput>
					on any of these objects,
					but if you only want them
					disabled temporarily, it's
					easy to forget to re-enable
					them later.</para></listitem>

					<listitem><para>In the
					previous version of MySQL++,
					those classes that supported
					optional exceptions that
					could create instances of
					other such classes were
					supposed to pass this flag
					on to their children. That
					is, if you created a
					<computeroutput>Connection</computeroutput>
					object with exceptions enabled,
					and then asked it to create a
					<computeroutput>Query</computeroutput>
					object, the
					<computeroutput>Query</computeroutput>
					object also had exceptions
					disabled. The problem is, this
					didn't happen in all cases
					where it should have in v1.7.
					This bug is fixed in v2.0. If
					your program begins crashing
					due to uncaught exceptions
					after upgrading to v2.0, this
					is the most likely cause. The
					most expeditious fix in this
					situation is to use the new
					<computeroutput>NoExceptions</computeroutput>
					feature to return these
					code paths to the v1.7
					behavior. A better fix is
					to rework your program to
					avoid or deal with the new
					exceptions.</para></listitem>

					<listitem><para>All
					custom MySQL++ exceptions
					now derive from the new
					<ulink type="classref" url="Exception"/>
					interface.  The practical
					upshot of this is that the
					variability between the
					various exception types has
					been eliminated. For instance,
					to get the error string, the
					<computeroutput>BadQuery</computeroutput>
					exception had a
					string member called
					<computeroutput>error</computeroutput>
					plus a method called
					<computeroutput>what()</computeroutput>.
					Both did the
					same thing, and the
					<computeroutput>what()</computeroutput>
					method is more common, so the
					error string was dropped from
					the interface. None of the
					example programs had to be
					changed to work with the new
					exceptions, so if your program
					handles MySQL++ exceptions
					the same way they do, your
					program won't need to change,
					either.</para></listitem>

					<listitem><para>Renamed
					<computeroutput>SQLQueryNEParams</computeroutput>
					exception to
					<computeroutput>BadParamCount</computeroutput>
					to match style of other
					exception names.</para></listitem>

					<listitem><para>Added
					<ulink type="classref" url="BadOption"/>,
					<ulink type="classref" url="ConnectionFailed"/>,
					<ulink type="classref" url="DBSelectionFailed"/>,
					<ulink type="classref" url="EndOfResults"/>,
					<ulink type="classref" url="EndOfResultSets"/>,
					<ulink type="classref" url="LockFailed"/>, and
					<ulink type="classref" url="ObjectNotInitialized"/>
					exception types,
					to fix overuse of
					<computeroutput>BadQuery</computeroutput>.
					Now the latter is used
					only for errors on query
					execution. If your program has
					a "catch-all" block taking a
					<computeroutput>std::exception</computeroutput>
					for each try block containing
					MySQL++ statements, you
					probably won't need to change
					your program. Otherwise,
					the new exceptions will
					likely show up as program
					crashes due to unhandled
					exceptions.</para></listitem>
				</itemizedlist>
			</sect4>


			<sect4>
				<title>Query class changes</title>

				<itemizedlist>
					<listitem><para>In
					previous versions,
					<computeroutput>Connection</computeroutput>
					had a querying
					interface similar to class
					<computeroutput>Query</computeroutput>'s.
					These methods
					were intended only for
					<computeroutput>Query</computeroutput>'s
					use; no example ever used
					this interface directly,
					so no end-user code is
					likely to be affected by
					this change.</para></listitem>

					<listitem><para>A more likely
					problem arising from the above
					change is code that tests for
					query success by calling the
					<computeroutput>Connection</computeroutput>
					object's
					<computeroutput>success()</computeroutput>
					method or by casting it to
					<computeroutput>bool</computeroutput>.
					This will now give misleading
					results, because queries
					no longer go through the
					<computeroutput>Connection</computeroutput>
					object. Class
					<computeroutput>Query</computeroutput>
					has the same success-testing
					interface, so use it
					instead.</para></listitem>

					<listitem><para><computeroutput>Query</computeroutput>
					now derives from
					<computeroutput>std::ostream</computeroutput>
					instead of
					<computeroutput>std::stringstream</computeroutput>.</para></listitem>
				</itemizedlist>
			</sect4>


			<sect4>
				<title>Result/ResUse class changes</title>

				<itemizedlist>
					<listitem><para>Renamed
					<computeroutput>ResUse::mysql_result()</computeroutput>
					to
					<computeroutput>raw_result()</computeroutput>
					so it's database server
					neutral.</para></listitem>

					<listitem><para>Removed
					<computeroutput>ResUse::eof()</computeroutput>,
					as it wrapped the deprecated
					and unnecessary MySQL C API
					function <ulink url="mysql-eof"
					type="mysqlapi"/>. See the
					<computeroutput>simple3</computeroutput>
					and
					<computeroutput>usequery</computeroutput>
					examples to see the proper
					way to test for the end of
					a result set.</para></listitem>
				</itemizedlist>
			</sect4>


			<sect4>
				<title>Row class changes</title>

				<itemizedlist>
					<listitem><para>Removed
					"field name" form of
					<computeroutput>Row::field_list()</computeroutput>.
					It was
					pointless.</para></listitem>

					<listitem><para><computeroutput>Row</computeroutput>
					subscripting works more like
					v1.7.9: one can subscript a
					<computeroutput>Row</computeroutput>
					with a string (e.g.
					<computeroutput>row["myfield"]</computeroutput>),
					or with an integer (e.g.
					<computeroutput>row[5]</computeroutput>).
					<computeroutput>lookup_by_name()</computeroutput>
					was removed. Because
					<computeroutput>row[0]</computeroutput>
					is ambiguous (0 could mean
					the first field, or be a null
					pointer to <computeroutput>const
					char*</computeroutput>),
					there is now
					<computeroutput>Row::at()</computeroutput>,
					which can look up any field by
					index.</para></listitem>
				</itemizedlist>
			</sect4>


			<sect4>
				<title>Miscellaneous changes</title>

				<itemizedlist>
					<listitem><para>Where
					possible, all distributed
					Makefiles only build dynamic
					libraries. (Shared objects on
					most Unices, DLLs on Windows,
					etc.) Unless your program
					is licensed under the GPL or
					LGPL, you shouldn't have been
					using the static libraries
					from previous versions
					anyway.</para></listitem>

					<listitem><para>Removed the
					backwards-compatibility headers
					<filename>sqlplus.hh</filename>
					and
					<filename>mysql++.hh</filename>.
					If you were still using these,
					you will have to change to
					<filename>mysql++.h</filename>,
					which will put all symbols
					in <computeroutput>namespace
					mysqlpp</computeroutput>.</para></listitem>

					<listitem><para>Can no
					longer use arrow operator
					(<computeroutput>-></computeroutput>)
					on the iterators into the
					<computeroutput>Fields</computeroutput>,
					<computeroutput>Result</computeroutput>
					and
					<computeroutput>Row</computeroutput>
					containers.</para></listitem>
				</itemizedlist>
			</sect4>
		</sect3>
	</sect2>


	<sect2>
		<title>ABI Changes</title>

		<para>This section documents those library changes
		that require you to rebuild your program so that it
		will link with the new library.  Most of the items
		in the previous section are also ABI changes, but
		this section is only for those items that shouldn't
		require any code changes in your program.</para>

		<para>If you were going to rebuild your program after
		installing the new library anyway, you can probably
		ignore this section.</para>


		<sect3>
			<title>v1.7.18</title>

			<para>The
			<computeroutput>Query</computeroutput>
			classes now subclass from
			<computeroutput>stringstream</computeroutput>
			instead of the deprecated
			<computeroutput>strstream</computeroutput>.</para>
		</sect3>


		<sect3>
			<title>v1.7.19</title>

			<para>Fixed several
			<computeroutput>const</computeroutput>-incorrectnesses
			in the <computeroutput>Query</computeroutput>
			classes.</para>
		</sect3>


		<sect3>
			<title>v1.7.22</title>

			<para>Removed "reset query" parameters from
			several <computeroutput>Query</computeroutput>
			class members. This is not an API change,
			because the parameters were given default
			values, and the library would ignore any value
			other than the default. So, any program that
			tried to make them take another value wouldn't
			have worked anyway.</para>
		</sect3>


		<sect3>
			<title>v1.7.24</title>

			<para>Some freestanding functions didn't
			get moved into <computeroutput>namespace
			mysqlpp</computeroutput> when that namespace
			was created. This release fixed that. It
			doesn't affect the API if your program's
			C++ source files say <computeroutput>using
			namespace mysqlpp</computeroutput> within
			them.</para>
		</sect3>


		<sect3>
			<title>v2.0.0</title>

			<para>Removed
			<computeroutput>Connection::infoo()</computeroutput>.
			(I'd call this an API change if I thought
			there were any programs out there actually
			using this...)</para>

			<para>Collapsed the
			<computeroutput>Connection</computeroutput>
			constructor taking a bool (for setting
			the throw_exceptions flag) and the default
			constructor into a single constructor using
			a default for the parameter.</para>

			<para>Classes
			<computeroutput>Connection</computeroutput>
			and <computeroutput>Query</computeroutput>
			are now derived from the
			<computeroutput>Lockable</computeroutput>
			interface, instead of implementing their own
			lock/unlock functions.</para>

			<para>In several instances, functions that
			took objects by value now take them by const
			reference, for efficiency.</para>

			<para>Merged
			<computeroutput>SQLQuery</computeroutput>
			class's members into class
			<computeroutput>Query</computeroutput>.</para>

			<para>Merged
			<computeroutput>RowTemplate</computeroutput>
			class's members into class
			<computeroutput>Row</computeroutput>.</para>

			<para>Reordered member variable declarations
			in some classes. The most common instance is
			when the private section was declared before
			the public section; it is now the opposite
			way. This can change the object's layout in
			memory, so a program linking to the library
			must be rebuilt.</para>

			<para>Simplified the date
			and time class hierarchy.
			<ulink type="structref" url="Date"/>
			used to derive from
			<computeroutput>mysql_date</computeroutput>,
			<ulink type="structref" url="Time"/>
			used to derive from
			<computeroutput>mysql_time</computeroutput>,
			and <ulink type="structref" url="DateTime"/>
			used to derive from both of those.  All
			three of these classes used to derive from
			<computeroutput>mysql_dt_base</computeroutput>.
			All of the
			<computeroutput>mysql_*</computeroutput>
			classes' functionality and data has
			been folded into the leaf classes,
			and now the only thing shared between
			them is their dependence on the
			<ulink type="structref" url="DTbase"/>
			template. Since the leaf classes' interface has
			not changed and end-user code shouldn't have
			been using the other classes, this shouldn't
			affect the API in any practical way.</para>

			<para><computeroutput>mysql_type_info</computeroutput>
			now always initializes its private
			<computeroutput>num</computeroutput> member.
			Previously, this would go uninitialized if
			you used the default constructor. Now there
			is no default ctor, but the ctor taking one
			argument (which sets
			<computeroutput>num</computeroutput>) has
			a default.</para>
		</sect3>
	</sect2>
</sect1>


<sect1 id="licenses">
	<title>Licensing</title>

	<para>The primary copyright holders on the MySQL++ library and
	its documentation are Kevin Atkinson (1998), MySQL AB (1999
	through 2001) and Educational Technology Resources, Inc. (2004
	through the date of this writing). There are other contributors,
	who also retain copyrights on their additions; see the ChangeLog
	file in the MySQL++ distribution tarball for details.</para>

	<para>The MySQL++ library and its Reference Manual are released
	under the GNU Lesser General Public License (LGPL), reproduced
	below.</para>
	
	<para>The MySQL++ User Manual &mdash; excepting some example
	code from the library reproduced within it &mdash; is offered
	under a license closely based on the Linux Documentation Project
	License (LDPL) v2.0, included below. (The MySQL++ documentation
	isn't actually part of the Linux Documentation Project, so
	the main changes are to LDP-related language. Also, generic
	language such as "author's (or authors')" has been replaced
	with specific language, because the license applies to only
	this one document.)</para>

	<para>These licenses basically state that you are free to use,
	distribute and modify these works, whether for personal or
	commercial purposes, as long as you grant the same rights to
	those you distribute the works to, whether you changed them or
	not. See the licenses below for full details.</para>


<?hard-pagebreak?>
<sect2>
	<title>GNU Lesser General Public License</title>
	<subtitle>Version 2.1, February 1999</subtitle>

	<para>Copyright (C) 1991, 1999 Free Software Foundation, Inc.
	59 Temple Place, Suite 330, Boston, MA	02111-1307  USA Everyone
	is permitted to copy and distribute verbatim copies of this
	license document, but changing it is not allowed.</para>

	<para>[This is the first released version of the Lesser GPL.
	It also counts as the successor of the GNU Library Public License,
	version 2, hence the version number 2.1.]</para>

	<sect3>
		<title>Preamble</title>

		<para>The licenses for most software are designed to take
		away your freedom to share and change it.  By contrast,
		the GNU General Public Licenses are intended to guarantee
		your freedom to share and change free software--to make
		sure the software is free for all its users.</para>

		<para>This license, the Lesser General Public License,
		applies to some specially designated software
		packages--typically libraries--of the Free Software
		Foundation and other authors who decide to use it.  You
		can use it too, but we suggest you first think carefully
		about whether this license or the ordinary General Public
		License is the better strategy to use in any particular
		case, based on the explanations below.</para>

		<para>When we speak of free software, we are referring to
		freedom of use, not price.  Our General Public Licenses
		are designed to make sure that you have the freedom to
		distribute copies of free software (and charge for this
		service if you wish); that you receive source code or can
		get it if you want it; that you can change the software
		and use pieces of it in new free programs; and that you
		are informed that you can do these things.</para>

		<para>To protect your rights, we need to make restrictions
		that forbid distributors to deny you these rights or to
		ask you to surrender these rights.  These restrictions
		translate to certain responsibilities for you if you
		distribute copies of the library or if you modify
		it.</para>

		<para>For example, if you distribute copies of the
		library, whether gratis or for a fee, you must give the
		recipients all the rights that we gave you.  You must make
		sure that they, too, receive or can get the source code.
		If you link other code with the library, you must provide
		complete object files to the recipients, so that they
		can relink them with the library after making changes
		to the library and recompiling it.  And you must show
		them these terms so they know their rights.</para>

		<para>We protect your rights with a two-step method:
		(1) we copyright the library, and (2) we offer you
		this license, which gives you legal permission to copy,
		distribute and/or modify the library.</para>

		<para>To protect each distributor, we want to make it very
		clear that there is no warranty for the free library.
		Also, if the library is modified by someone else and
		passed on, the recipients should know that what they
		have is not the original version, so that the original
		author's reputation will not be affected by problems
		that might be introduced by others.</para>

		<para>Finally, software patents pose a constant threat to
		the existence of any free program.  We wish to make sure
		that a company cannot effectively restrict the users of
		a free program by obtaining a restrictive license from
		a patent holder.  Therefore, we insist that any patent
		license obtained for a version of the library must be
		consistent with the full freedom of use specified in
		this license.</para>

		<para>Most GNU software, including some libraries,
		is covered by the ordinary GNU General Public License.
		This license, the GNU Lesser General Public License,
		applies to certain designated libraries, and is quite
		different from the ordinary General Public License.  We
		use this license for certain libraries in order to permit
		linking those libraries into non-free programs.</para>

		<para>When a program is linked with a library, whether
		statically or using a shared library, the combination of
		the two is legally speaking a combined work, a derivative
		of the original library.  The ordinary General Public
		License therefore permits such linking only if the entire
		combination fits its criteria of freedom.  The Lesser
		General Public License permits more lax criteria for
		linking other code with the library.</para>

		<para>We call this license the "Lesser" General Public
		License because it does Less to protect the user's
		freedom than the ordinary General Public License.
		It also provides other free software developers Less
		of an advantage over competing non-free programs.
		These disadvantages are the reason we use the ordinary
		General Public License for many libraries.  However,
		the Lesser license provides advantages in certain special
		circumstances.</para>

		<para>For example, on rare occasions, there may be a
		special need to encourage the widest possible use of a
		certain library, so that it becomes a de-facto standard.
		To achieve this, non-free programs must be allowed to use
		the library.  A more frequent case is that a free library
		does the same job as widely used non-free libraries.
		In this case, there is little to gain by limiting the
		free library to free software only, so we use the Lesser
		General Public License.</para>

		<para>In other cases, permission to use a particular
		library in non-free programs enables a greater number of
		people to use a large body of free software.  For example,
		permission to use the GNU C Library in non-free programs
		enables many more people to use the whole GNU operating
		system, as well as its variant, the GNU/Linux operating
		system.</para>

		<para>Although the Lesser General Public License is Less
		protective of the users' freedom, it does ensure that
		the user of a program that is linked with the Library
		has the freedom and the wherewithal to run that program
		using a modified version of the Library.</para>

		<para>The precise terms and conditions for copying,
		distribution and modification follow.  Pay close attention
		to the difference between a "work based on the library"
		and a "work that uses the library".  The former contains
		code derived from the library, whereas the latter must
		be combined with the library in order to run.</para>
	</sect3>


	<sect3>
		<title>GNU LESSER GENERAL PUBLIC LICENSE</title>
		<subtitle>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
			MODIFICATION</subtitle>

		<para>0. This License Agreement applies to any software
		library or other program which contains a notice placed
		by the copyright holder or other authorized party saying
		it may be distributed under the terms of this Lesser
		General Public License (also called "this License").
		Each licensee is addressed as "you".</para>

		<para>A "library" means a collection of software functions
		and/or data prepared so as to be conveniently linked with
		application programs (which use some of those functions
		and data) to form executables.</para>

		<para>The "Library", below, refers to any such software
		library or work which has been distributed under these
		terms.	A "work based on the Library" means either the
		Library or any derivative work under copyright law: that
		is to say, a work containing the Library or a portion
		of it, either verbatim or with modifications and/or
		translated straightforwardly into another language.
		(Hereinafter, translation is included without limitation
		in the term "modification".)</para>

		<para>"Source code" for a work means the preferred form of
		the work for making modifications to it.  For a library,
		complete source code means all the source code for all
		modules it contains, plus any associated interface
		definition files, plus the scripts used to control
		compilation and installation of the library.</para>

		<para>Activities other than copying, distribution and
		modification are not covered by this License; they are
		outside its scope.  The act of running a program using
		the Library is not restricted, and output from such a
		program is covered only if its contents constitute a
		work based on the Library (independent of the use of
		the Library in a tool for writing it).	Whether that
		is true depends on what the Library does and what the
		program that uses the Library does.</para>

		<para>1. You may copy and distribute verbatim copies
		of the Library's complete source code as you receive
		it, in any medium, provided that you conspicuously
		and appropriately publish on each copy an appropriate
		copyright notice and disclaimer of warranty; keep intact
		all the notices that refer to this License and to the
		absence of any warranty; and distribute a copy of this
		License along with the Library.</para>

		<para>You may charge a fee for the physical act of
		transferring a copy, and you may at your option offer
		warranty protection in exchange for a fee.</para>

		<para>2. You may modify your copy or copies of the Library
		or any portion of it, thus forming a work based on the
		Library, and copy and distribute such modifications or
		work under the terms of Section 1 above, provided that
		you also meet all of these conditions:</para>

		<blockquote>
			<para>a) The modified work must itself be a
			software library.</para>

			<para>b) You must cause the files modified to
			carry prominent notices stating that you changed
			the files and the date of any change.</para>

			<para>c) You must cause the whole of the work
			to be licensed at no charge to all third parties
			under the terms of this License.</para>

			<para>d) If a facility in the modified Library
			refers to a function or a table of data to
			be supplied by an application program that
			uses the facility, other than as an argument
			passed when the facility is invoked, then you
			must make a good faith effort to ensure that,
			in the event an application does not supply such
			function or table, the facility still operates,
			and performs whatever part of its purpose remains
			meaningful.</para>

			<para>(For example, a function in a library
			to compute square roots has a purpose that
			is entirely well-defined independent of the
			application.  Therefore, Subsection 2d requires
			that any application-supplied function or table
			used by this function must be optional: if the
			application does not supply it, the square root
			function must still compute square roots.)</para>
		</blockquote>

		<para>These requirements apply to the modified work as
		a whole.  If identifiable sections of that work are not
		derived from the Library, and can be reasonably considered
		independent and separate works in themselves, then this
		License, and its terms, do not apply to those sections
		when you distribute them as separate works.  But when you
		distribute the same sections as part of a whole which is a
		work based on the Library, the distribution of the whole
		must be on the terms of this License, whose permissions
		for other licensees extend to the entire whole, and thus
		to each and every part regardless of who wrote it.</para>

		<para>Thus, it is not the intent of this section to claim
		rights or contest your rights to work written entirely
		by you; rather, the intent is to exercise the right to
		control the distribution of derivative or collective
		works based on the Library.</para>

		<para>In addition, mere aggregation of another work
		not based on the Library with the Library (or with a
		work based on the Library) on a volume of a storage or
		distribution medium does not bring the other work under
		the scope of this License.</para>

		<para>3. You may opt to apply the terms of the ordinary
		GNU General Public License instead of this License to a
		given copy of the Library.  To do this, you must alter
		all the notices that refer to this License, so that
		they refer to the ordinary GNU General Public License,
		version 2, instead of to this License.	(If a newer
		version than version 2 of the ordinary GNU General Public
		License has appeared, then you can specify that version
		instead if you wish.)  Do not make any other change in
		these notices.</para>

		<para>Once this change is made in a given copy, it is
		irreversible for that copy, so the ordinary GNU General
		Public License applies to all subsequent copies and
		derivative works made from that copy.</para>

		<para>This option is useful when you wish to copy part
		of the code of the Library into a program that is not
		a library.</para>

		<para>4. You may copy and distribute the Library (or a
		portion or derivative of it, under Section 2) in object
		code or executable form under the terms of Sections 1 and
		2 above provided that you accompany it with the complete
		corresponding machine-readable source code, which must be
		distributed under the terms of Sections 1 and 2 above on
		a medium customarily used for software interchange.</para>

		<para>If distribution of object code is made by offering
		access to copy from a designated place, then offering
		equivalent access to copy the source code from the same
		place satisfies the requirement to distribute the source
		code, even though third parties are not compelled to
		copy the source along with the object code.</para>

		<para>5. A program that contains no derivative of any
		portion of the Library, but is designed to work with the
		Library by being compiled or linked with it, is called a
		"work that uses the Library".  Such a work, in isolation,
		is not a derivative work of the Library, and therefore
		falls outside the scope of this License.</para>

		<para>However, linking a "work that uses the Library" with
		the Library creates an executable that is a derivative
		of the Library (because it contains portions of the
		Library), rather than a "work that uses the library".
		The executable is therefore covered by this License.
		Section 6 states terms for distribution of such
		executables.</para>

		<para>When a "work that uses the Library" uses material
		from a header file that is part of the Library, the
		object code for the work may be a derivative work
		of the Library even though the source code is not.
		Whether this is true is especially significant if the
		work can be linked without the Library, or if the work
		is itself a library.  The threshold for this to be true
		is not precisely defined by law.</para>

		<para>If such an object file uses only numerical
		parameters, data structure layouts and accessors, and
		small macros and small inline functions (ten lines or
		less in length), then the use of the object file is
		unrestricted, regardless of whether it is legally a
		derivative work.  (Executables containing this object
		code plus portions of the Library will still fall under
		Section 6.)</para>

		<para>Otherwise, if the work is a derivative of the
		Library, you may distribute the object code for the work
		under the terms of Section 6.  Any executables containing
		that work also fall under Section 6, whether or not they
		are linked directly with the Library itself.</para>

		<para>6. As an exception to the Sections above, you
		may also combine or link a "work that uses the Library"
		with the Library to produce a work containing portions
		of the Library, and distribute that work under terms of
		your choice, provided that the terms permit modification
		of the work for the customer's own use and reverse
		engineering for debugging such modifications.</para>

		<para>You must give prominent notice with each copy of the
		work that the Library is used in it and that the Library
		and its use are covered by this License.  You must supply
		a copy of this License.  If the work during execution
		displays copyright notices, you must include the copyright
		notice for the Library among them, as well as a reference
		directing the user to the copy of this License.  Also,
		you must do one of these things:</para>

		<blockquote>
			<para>a) Accompany the work with the complete
			corresponding machine-readable source code for
			the Library including whatever changes were
			used in the work (which must be distributed
			under Sections 1 and 2 above); and, if the work
			is an executable linked with the Library, with
			the complete machine-readable "work that uses
			the Library", as object code and/or source code,
			so that the user can modify the Library and then
			relink to produce a modified executable containing
			the modified Library.  (It is understood that
			the user who changes the contents of definitions
			files in the Library will not necessarily be
			able to recompile the application to use the
			modified definitions.)</para>

			<para>b) Use a suitable shared library mechanism
			for linking with the Library.  A suitable
			mechanism is one that (1) uses at run time
			a copy of the library already present on the
			user's computer system, rather than copying
			library functions into the executable, and (2)
			will operate properly with a modified version of
			the library, if the user installs one, as long as
			the modified version is interface-compatible with
			the version that the work was made with.</para>

			<para>c) Accompany the work with a written offer,
			valid for at least three years, to give the same
			user the materials specified in Subsection 6a,
			above, for a charge no more than the cost of
			performing this distribution.</para>

			<para>d) If distribution of the work is made
			by offering access to copy from a designated
			place, offer equivalent access to copy the above
			specified materials from the same place.</para>

			<para>e) Verify that the user has already
			received a copy of these materials or that you
			have already sent this user a copy.</para>
		</blockquote>

		<para>For an executable, the required form of the "work
		that uses the Library" must include any data and utility
		programs needed for reproducing the executable from it.
		However, as a special exception, the materials to be
		distributed need not include anything that is normally
		distributed (in either source or binary form) with the
		major components (compiler, kernel, and so on) of the
		operating system on which the executable runs, unless
		that component itself accompanies the executable.</para>

		<para>It may happen that this requirement contradicts
		the license restrictions of other proprietary libraries
		that do not normally accompany the operating system.
		Such a contradiction means you cannot use both them
		and the Library together in an executable that you
		distribute.</para>

		<para>7. You may place library facilities that are a work
		based on the Library side-by-side in a single library
		together with other library facilities not covered by
		this License, and distribute such a combined library,
		provided that the separate distribution of the work
		based on the Library and of the other library facilities
		is otherwise permitted, and provided that you do these
		two things:</para>

		<blockquote>
			<para>a) Accompany the combined library with
			a copy of the same work based on the Library,
			uncombined with any other library facilities.
			This must be distributed under the terms of the
			Sections above.</para>

			<para>b) Give prominent notice with the combined
			library of the fact that part of it is a work
			based on the Library, and explaining where to
			find the accompanying uncombined form of the
			same work.</para>
		</blockquote>

		<para>8. You may not copy, modify, sublicense, link with,
		or distribute the Library except as expressly provided
		under this License.  Any attempt otherwise to copy,
		modify, sublicense, link with, or distribute the Library
		is void, and will automatically terminate your rights
		under this License.  However, parties who have received
		copies, or rights, from you under this License will not
		have their licenses terminated so long as such parties
		remain in full compliance.</para>

		<para>9. You are not required to accept this License,
		since you have not signed it.  However, nothing else
		grants you permission to modify or distribute the Library
		or its derivative works.  These actions are prohibited
		by law if you do not accept this License.  Therefore,
		by modifying or distributing the Library (or any work
		based on the Library), you indicate your acceptance of
		this License to do so, and all its terms and conditions
		for copying, distributing or modifying the Library or
		works based on it.</para>

		<para>10. Each time you redistribute the Library (or any
		work based on the Library), the recipient automatically
		receives a license from the original licensor to copy,
		distribute, link with or modify the Library subject to
		these terms and conditions.  You may not impose any
		further restrictions on the recipients' exercise of
		the rights granted herein.  You are not responsible
		for enforcing compliance by third parties with this
		License.</para>

		<para>11. If, as a consequence of a court judgment or
		allegation of patent infringement or for any other reason
		(not limited to patent issues), conditions are imposed on
		you (whether by court order, agreement or otherwise) that
		contradict the conditions of this License, they do not
		excuse you from the conditions of this License.  If you
		cannot distribute so as to satisfy simultaneously your
		obligations under this License and any other pertinent
		obligations, then as a consequence you may not distribute
		the Library at all.  For example, if a patent license
		would not permit royalty-free redistribution of the
		Library by all those who receive copies directly or
		indirectly through you, then the only way you could
		satisfy both it and this License would be to refrain
		entirely from distribution of the Library.</para>

		<para>If any portion of this section is held invalid
		or unenforceable under any particular circumstance,
		the balance of the section is intended to apply, and
		the section as a whole is intended to apply in other
		circumstances.</para>

		<para>It is not the purpose of this section to induce
		you to infringe any patents or other property right
		claims or to contest validity of any such claims;
		this section has the sole purpose of protecting the
		integrity of the free software distribution system
		which is implemented by public license practices.
		Many people have made generous contributions to the
		wide range of software distributed through that system
		in reliance on consistent application of that system;
		it is up to the author/donor to decide if he or she is
		willing to distribute software through any other system
		and a licensee cannot impose that choice.</para>

		<para>This section is intended to make thoroughly clear
		what is believed to be a consequence of the rest of
		this License.</para>

		<para>12. If the distribution and/or use of the Library
		is restricted in certain countries either by patents or
		by copyrighted interfaces, the original copyright holder
		who places the Library under this License may add an
		explicit geographical distribution limitation excluding
		those countries, so that distribution is permitted only
		in or among countries not thus excluded.  In such case,
		this License incorporates the limitation as if written
		in the body of this License.</para>

		<para>13. The Free Software Foundation may publish revised
		and/or new versions of the Lesser General Public License
		from time to time.  Such new versions will be similar in
		spirit to the present version, but may differ in detail
		to address new problems or concerns.</para>

		<para>Each version is given a distinguishing version
		number.  If the Library specifies a version number
		of this License which applies to it and "any later
		version", you have the option of following the terms
		and conditions either of that version or of any later
		version published by the Free Software Foundation.
		If the Library does not specify a license version number,
		you may choose any version ever published by the Free
		Software Foundation.</para>

		<para>14. If you wish to incorporate parts of the
		Library into other free programs whose distribution
		conditions are incompatible with these, write to the
		author to ask for permission.  For software which is
		copyrighted by the Free Software Foundation, write to the
		Free Software Foundation; we sometimes make exceptions
		for this.  Our decision will be guided by the two goals
		of preserving the free status of all derivatives of our
		free software and of promoting the sharing and reuse of
		software generally.</para>

		<para>NO WARRANTY</para>

		<para>15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE,
		THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT
		PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE
		STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
		PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF
		ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
		LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
		FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
		THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU.
		SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST
		OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</para>

		<para>16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE
		LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER,
		OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
		THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
		DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
		CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY
		TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
		DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED
		BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO
		OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER
		OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
		SUCH DAMAGES.</para>

		<para>END OF TERMS AND CONDITIONS</para>
	</sect3>


	<sect3>
		<title>How to Apply These Terms to Your New
		Libraries</title>

		<para>If you develop a new library, and you want it to be
		of the greatest possible use to the public, we recommend
		making it free software that everyone can redistribute
		and change.  You can do so by permitting redistribution
		under these terms (or, alternatively, under the terms
		of the ordinary General Public License).</para>

		<para>To apply these terms, attach the following notices
		to the library.  It is safest to attach them to the
		start of each source file to most effectively convey
		the exclusion of warranty; and each file should have at
		least the "copyright" line and a pointer to where the
		full notice is found.</para>

		<blockquote>
			<para>&lt;one line to give the library's name
			and a brief idea of what it does.&gt;</para>

			<para>Copyright &copy; &lt;year&gt; &lt;name
			of author&gt;</para>

			<para>This library is free software; you can
			redistribute it and/or modify it under the
			terms of the GNU Lesser General Public License
			as published by the Free Software Foundation;
			either version 2.1 of the License, or (at your
			option) any later version.</para>

			<para>This library is distributed in the
			hope that it will be useful, but WITHOUT ANY
			WARRANTY; without even the implied warranty of
			MERCHANTABILITY or FITNESS FOR A PARTICULAR
			PURPOSE.  See the GNU Lesser General Public
			License for more details.</para>

			<para>You should have received a copy of the GNU
			Lesser General Public License along with this
			library; if not, write to the Free Software
			Foundation, Inc., 59 Temple Place, Suite 330,
			Boston, MA 02111-1307 USA</para>
		</blockquote>

		<para>Also add information on how to contact you by
		electronic and paper mail.</para>

		<para>You should also get your employer (if you work
		as a programmer) or your school, if any, to sign a
		"copyright disclaimer" for the library, if necessary.
		Here is a sample; alter the names:</para>

		<blockquote>
			<para>Yoyodyne, Inc., hereby disclaims all
			copyright interest in the library `Frob' (a
			library for tweaking knobs) written by James
			Random Hacker.</para>

			<para>&lt;signature of Ty Coon&gt;, 1 April
			1990</para>

			<para>Ty Coon, President of Vice</para>
		</blockquote>

		<para>That's all there is to it!</para>
	</sect3>
</sect2>


<?hard-pagebreak?>
<sect2>
	<title>MySQL++ User Manual License</title>

	<sect3>
		<title>I. COPYRIGHT</title>

		<para>The copyright to the MySQL++ User Manual is owned
		by its authors.</para>
	</sect3>

	<sect3>
		<title>II. LICENSE</title>

		<para>The MySQL++ User Manual may be reproduced and
		distributed in whole or in part, in any medium physical or
		electronic, provided that this license notice is displayed
		in the reproduction. Commercial redistribution is
		permitted and encouraged. Thirty days advance notice via
		email to the authors of redistribution is appreciated, to
		give the authors time to provide updated documents.</para>

		<sect4>
			<title>A. REQUIREMENTS OF MODIFIED WORKS</title>

			<para>All modified documents, including
			translations, anthologies, and partial documents,
			must meet the following requirements:</para>

			<orderedlist numeration="arabic">
				<listitem><para>The modified version
				must be labeled as such.</para></listitem>

				<listitem><para>The person
				making the modifications must be
				identified.</para></listitem>

				<listitem><para>Acknowledgement
				of the original author must be
				retained.</para></listitem>

				<listitem><para>The location of
				the original unmodified document be
				identified.</para></listitem>

				<listitem><para>The original authors'
				names may not be used to assert or
				imply endorsement of the resulting
				document without the original authors'
				permission.</para></listitem>
			</orderedlist>

			<para>In addition it is requested that:</para>

			<orderedlist numeration="arabic">
				<listitem><para>The modifications
				(including deletions) be
				noted.</para></listitem>

				<listitem><para>The authors be
				notified by email of the modification
				in advance of redistribution, if
				an email address is provided in the
				document.</para></listitem>
			</orderedlist>

			<para>Mere aggregation of the MySQL++ User Manual
			with other documents or programs on the same
			media shall not cause this license to apply to
			those other works.</para>

			<para>All translations, derivative documents, or
			modified documents that incorporate the MySQL++
			User Manual may not have more restrictive license
			terms than these, except that you may require
			distributors to make the resulting document
			available in source format.</para>
		</sect4>
	</sect3>
</sect2>
</sect1>
</article>

