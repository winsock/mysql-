If you are going to make any changes to MySQL++, this file has some
hints and commentary you may find helpful.


Subversion Access
~~~~~~~~~~~~~~~~~
    To check out the current development version from the Gna!
    Subversion repository, say:

        $ svn co svn://svn.gna.org/svn/mysqlpp/trunk mysqlpp

    If you're a MySQL++ committer, use svn over ssh instead:
    
        $ svn co svn+ssh://LOGIN@svn.gna.org/svn/mysqlpp/trunk mysqlpp

    where LOGIN is your Gna! login name.  You will have to have your
    ssh public key(s) registered with Gna! for this to work.


Bootstrapping the Library
~~~~~~~~~~~~~~~~~~~~~~~~~
    When you check out MySQL++ from svn, there are a lot of things
    "missing" as compared to a distributed tarball, because the svn
    repository doesn't contain any generated files.

    If you're on a Unixy platform, you can generate these files
    by running the 'bootstrap' script.  You'll need autoconf 1.59,
    Bakefile 0.2.3, and Perl 5 installed on the system for bootstrap
    to run.  There are more details about the boostrap script in a
    separate section below.

    On Windows, things are a bit harder because the bootstrap script
    (and its dependencies) are very Unix-centric, even though most
    of its outputs are not.  Here are the files you need to generate
    to get MySQL++ to build on Windows:

    - Makefile.mingw, *.vcproj, *.sln:

      These are generated by Bakefile (http://bakefile.org/) from
      Bakefiles.bkgen and mysql++.bkl.  MySQL++ currently requires
      Bakefile 0.2.3 or newer.  Run rebake.bat to rebuild these files.

      As of this writing Bakefile 0.2.3 hasn't been released, so
      if you're not using Visual C++ 2003, you can change all the
      'msvs2003prj' strings to 'msvs2005prj' in Bakefiles.bkgen,
      mysql++.bkl and rebake.bat to make it generate VC++ 2005
      compatible project files instead of VC++ 2003 project files.
      This will let you use Bakefile 0.2.2.

    - lib/mysql++.h:

      This file (and several others used on Unixy systems) is generated
      by autoconf.  But, autoconf doesn't run natively on Windows.
      One way around this is to install Cygwin so you can run autoconf
      by hand.  (As opposed to running it via bootstrap, which is more
      trouble than it's worth, on Windows.)  Another is to install
      MySQL++ on a Linux box and let that system generate mysql++.h
      for you, then copy it over to the Windows box.  mysql++.h.in
      (the source file for mysql++.h) doesn't change very often,
      so this shouldn't be a hardship.

    - lib/ssqls.h and lib/querydef.h:

      Run lib/ssqls.pl and lib/querydef.pl with a Perl interpreter
      to create these files.


Submitting Patches
~~~~~~~~~~~~~~~~~~
    If you wish to submit a patch to the library, please send it to
    the MySQL++ mailing list, or attach it to an entry in our bug
    tracker on Gna!  We want patches in unified diff format.

    The easiest way to get a unified diff is to check out a copy of
    the current MySQL++ tree as described in the previous section.
    Then make your change, cd to the MySQL++ root directory, and ask
    Subversion to generate the diff for you:

        $ svn diff > mychange.patch

    If your patch adds new files to the distribution, you can say
    "svn add newfile" before you do the diff, which will include
    the contents of that file in the patch.  (You can do this even
    when you've checked out the tree anonymously.)  Then say "svn
    revert newfile" to make Subversion forget about the new file.

    If you're making a patch against a MySQL++ distribution tarball,
    then you can generate the diff this way:

        $ diff -ruN mysql++-olddir mysql++-newdir > mychange.patch

    The diff command is part of every Unix and Linux system, and
    should be installed by default.  If you're on a Windows machine,
    GNU diff is part of Cygwin (http://cygwin.com/).  Subversion is
    also available for all of these systems.  There are no excuses
    for not being able to make unified diffs.  :)


Testing Your Proposed Change
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    In v2.3.2, we added a new script called 'dtest'.  You run it
    like you would most of the examples, except that you don't need
    to run it via exrun:

        $ ./dtest [password] [user] [server_addr]

    This automatically runs most of the examples, captures the outputs
    to a file, and then compares that to a known-good run's outputs.
    The purpose of this is that, before you submit a patch, run dtest
    and see if it indicates that anything has changed.  If something
    has and you can't account for it, it represents a problem that
    you'll have to fix before submitting the patch.

    If your change purposely causes different outputs from the dtest
    run stored in svn, remove the bmark.txt file, then re-run dtest and
    include the bmark.txt diffs with your patch.  This communicates
    to us the fact that you know there are differences and want the
    patch evaluated anyway.  Otherwise, we are likely to view the
    change as a bug.


Adding Support for a Different Compiler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    MySQL++ uses the Bakefile system for creating project files
    and makefiles.  This allows us to make changes to a single set
    of files, and have the proper changes be made to all generated
    project files and makefiles.  In the past, we used more ad-hoc
    systems, and we'd frequently forget to update individual project
    files and makefiles, so at any given time, at least one target
    was likely to be broken.

    If MySQL++ doesn't currently ship with project files or makefiles
    tuned for your compiler of choice, you need to work through the
    Bakefile mechanism to add support.  We're not willing to do ad-hoc
    platform support any more, so please don't ask if you can send
    us project files instead; we don't want them.

    If you want to port MySQL++ to another platform, we need to be
    confident that the entire library works on your platform before
    we'll accept patches.  In the past, we've had broken ports that
    were missing important library features, or that crashed when built
    in certain ways.  Few people will knowingly use a crippled version
    of MySQL++, since there are usually acceptable alternatives.
    Therefore, such ports become maintenance baggage with little
    compensating value.


On Manipulating the Build System Source Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    If you're using Visual C++, there are two ways to change the Visual
    Studio project files:
    
    - You can just make the changes directly within Visual Studio.  This
      is a fine way to do it if you're only making small changes for
      your own purposes.

    - The Visual Studio project files are actually generated from
      mysql++.bkl by a tool called Bakefile, not maintained directly.
      (We do it this way because Bakefile can generate many different
      types of makefiles and project files from this single source file,
      so all the platforms we support get all the changes at once.)  So,
      if you want to make changes to the project files and contribute
      them back to the MySQL++ project, you need to do the changes
      in mysql++.bkl instead.  Rather than run Bakefile directly to
      regenerate the project files, we've wrapped up the necessary steps
      in the rebake.bat batch file.  Any arguments passed to rebake get
      sent on to Bakefile without change.

    If you're on a Unixy platform, things are a little more complex
    because the build system uses Autoconf in addition to Bakefile.
    The source files are mysql++.bkl, configure.ac, and config/*.  If you
    change any of these, run the bootstrap script to rebuild all their
    descendant files.

    The bootstrap script also has other functions besides running
    Bakefile and Autoconf for you:

        $ ./bootstrap [no{doc,ex,lib,opt}] [pedantic] [vstudio] \
                      [configure flags]

    Arguments:

    nodoc   The documentation won't be considered a prerequisite for
            building the distribution tarball.  This is useful on systems
            where the documentation doesn't build correctly, and you only
            need to make a binary RPM.  That process requires a tarball,
            but doesn't need the documentation.  Don't distribute the
            tarball or SRPM that results, as they are no good for any
            other purpose.

    noex    The generated Makefiles and project files won't try to build
            any of the examples.

    nolib   The generated Makefiles and project files won't try to build
            the MySQL++ library.

    noopt   Compiler optimization will be turned off.  (This currently
            has no effect on MinGW or Visual C++.)

    pedantic
            Turns on all of GCC's warnings and portability checks.
            Good for checking changes before making a public release.

    vstudio Builds only the Visual Studio project files.  (That is, it
            runs rebake.bat for you.)  This is useful when using
            Cygwin just as a command shell in preference to cmd.exe,
            as opposed to using Cygwin to build MySQL++ using its
            native tools.  Passing 'vstudio' stops all command line
            processing in the bootstrap script, so if you also pass
            some of the other options, make 'vstudio' last.  Not all
            of the above options are supported for Visual Studio,
            so don't be suprised if they have no effect on the built
            project files.

    configure options
            As soon as the bootstrap script sees an option that it
            doesn't understand, it stops processing the command line.
            Any subsequent options are passed to the configure script.
            See README-Unix.txt for more on configure script options.


Maintaining a Private CVS Repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    You may find it helpful to maintain your own CVS repository.
    Whenever there is a new MySQL++ release, import it on the vendor
    branch like this:

        $ cvs import -m "Version 1.7.35" software/mysql++ mysql++ mysql++-1_7_35

    (This assumes that you have your CVSROOT environment variable
    set properly.)

    Update the HEAD branch like this:

        $ cd mysql++
        $ cvs update -PdA
        $ cvs update -j HEAD -j mysql++-1_7_35 -Pd
        $ cvs ci -m "merged 1.7.35 into HEAD"
        $ cvs tag mysql++-1_7_35-merged

    Then any changes you make can easily be tracked, and diffs can
    be produced with rdiff:

        $ cvs rdiff -ru mysql++-1_7_35 -r mysql++-1_7_35_equal_list \
            $(cat CVS/Repository) > equal_list.patch

