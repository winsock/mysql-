Limitations
~~~~~~~~~~~
	Currently, MinGW can only build a static version of MySQL++.
	Legally speaking, this means that you can only use MySQL++ in
	programs with LGPL-compatible license.	This wouldn't be the
	case if we could get MinGW to build a DLL version of MySQL++.
	The effort to make it build a DLL has stalled due to lack
	of interest from the major maintainers.  We will, however,
	accept patches if someone manages to get it working.

	If you are not willing to contribute to that effort, I
	recommend that you switch to Visual C++, which builds a DLL
	version of MySQL++ without fuss.  (And no, you cannot link a
	Visual C++ DLL containing C++ code to a MinGW program; only
	C DLLs are compatible across toolchains.)
	
	If the cost is the only thing keeping you from using
	Visual C++, there are free versions of VC++ available.
	See the Visual C++ item in the MySQL++ FAQ for details:
	http://tangentsoft.net/mysql++/#faq


Building the Library and Example Programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	First, you will need to create a MinGW-compatible import
	library.  Assuming you installed MySQL in c:\mysql and MySQL++
	in c\mysql++, the commands to do this are:

		mkdir c:\mysql\lib\gcc
		cd c:\mysql\lib\gcc
	    dlltool -k -d c:\mysql++\libmysqlclient.def -l libmysqlclient.a
	
	Then to configure and build the MySQL++ library, say
	"makemake mingw" in the project's root directory.  You only
	have to give the "makemake" command once, unless you change
	the Makefile.base or Makefile.mingw files.  Thenceforth,
	you can just say "make".

	If you didn't install MySQL in c:\mysql, you will have to change
	Makefile.mingw in the lib and examples subdirectories and re-run
	"makemake mingw".  You may also look at changing these files for
	various other reasons, such as if you don't like the way we name
	the DLL file, or want the 'install' target to put the MySQL++
	development files somewhere other than c:\mysql++\mingw.
