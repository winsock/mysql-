Compatibility
~~~~~~~~~~~~~
    MySQL++ only builds under Visual C++ 7.1 (a.k.a. Visual Studio
    2003, a.k.a. cl version 13.10) or later.  Earlier versions did
    not support a sufficiently broad set of the Standard C++ language.


Building the Library and Example Programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Due to a limitation in Bakefile (the tool we use to generate
	the project files) there are two different workspaces (a.k.a.
	"solutions"): one in the lib subdirectory and one in the
	examples subdirectory.	You only have to build the project
	in the lib subdirectory, but you are encouraged to also build
	the examples, as they are good tests of whether your library
	is built and working correctly.

    If you didn't install MySQL in c:\mysql, you will have to change
    the project options.

    Once the library is built and you're satisfied that it's working
    correctly, you can run the install.bat file at the project
    root to automatically install the library files and headers in
    subdirectories under c:\mysql++.


Using MySQL++ in Your Own Projects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(This material is based on a post by Steve Hulet <krigare@gmail.com>)

    Fire up VS .NET, create a Blank Solution.  Add a new project.
    Choose Empty Project (.NET) under Visual C++ Projects.  Add a
    .cpp file to the solution so it _knows_ it's a C/C++ solution.
    Go to the solution Property Pages and make the following changes.
    (Where it doesn't specify Debug or Release, make the change to
    both configurations.)

        o Under Configuration Properties::General change "Use
          Managed Extensions" to "No"

        o Under C/C++::General add to "Additional Include
          Directories": c:\mysql++\include, c:\mysql\include

        o Under C/C++::Code Generation change "Runtime Library" to
          "Multi-threaded Debug DLL (/MDd)" for the Debug
          configuration.  For the Release configuration, make it
          "Multi-threaded DLL (/MD)".

        o Under Linker::General add to "Additional Library
          Directories": "c:\mysql\lib\debug, c:\mysql++\vc\debug"
          for the Debug configuration.  For the Release configuration,
          make it "c:\mysql\lib\opt, c:\mysql++\vc\release"

        o Under Linker::Input add to "Additional Dependencies":
          "libmysql.lib wsock32.lib mysqlpp.lib"


If You Run into Problems...
~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Especially if you have linking problems, make sure your project
    settings match the above.  Visual C++ is very picky about things
    like run time library settings.  If you still can't get things
    going, try running one of the example programs.  If it works,
    the problem is likely in your project settings, not in MySQL++.

