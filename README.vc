Compatibility
~~~~~~~~~~~~~
    MySQL++ only builds under Visual C++ 7.1 (a.k.a. Visual Studio
    2003, a.k.a. cl version 13.10) or later.  Earlier versions did
    not support a sufficiently broad set of the Standard C++ language.


Building the Library and Example Programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    As of MySQL++ v2.2, there is only one set of project files in
    the top level directory for MySQL++.  We ship VC++6 project
    files (.dsw and .dsp instead of .sln and .vcproj) due to a
    limitation of the version of Bakefile we're using to generate
    the project files.  Just let Visual Studio convert these to
    the new format.

    If MySQL isn't in C:\Program Files\MySQL\MySQL Server 5.0\
    you need to change the project file settings.  You have
    two options:

        - The simplest is to change the link and include
          file directories in the project settings directly.
          Although it's generally bad practice to change
          generated files, if that's all the only change to
          MySQL++ you need, this is harmless.

        - If you're doing deeper work on MySQL++, you
          should probably be changing mysql++.bkl instead.
          Then to generate Visual C++ project files from that
          file, you will need the Win32 port of Bakefile from
          http://bakefile.sf.net/  The command to do that is:

              bakefile -f msvc6prj mysql++.bkl

    Once the library is built and you're satisfied that it's working
    correctly, you can run the install.bat file at the project
    root to automatically install the library files and headers in
    subdirectories under c:\mysql++.


Using MySQL++ in an MFC Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    If you don't already have a project set up, open Visual Studio, say
    File::New::Project, then choose Visual C++::MFC::MFC Application.
    Go through the wizard setting up the project as you see fit.

    Once you have your project open, right click on your top-level
    executable in the Solution Explorer, choose Properties, and make
    the following changes.  (Where it doesn't specify Debug or Release,
    make the change to both configurations.)

        o Append the following to C/C++::General::Additional Include
          Directories:

            C:\Program Files\MySQL\MySQL Server 5.0\include,
            C:\mysql++\include

        o Under C/C++::Code Generation change "Runtime Library" to
          "Multi-threaded Debug DLL (/MDd)" for the Debug
          configuration.  For the Release configuration, make it
          "Multi-threaded DLL (/MD)".

        o Append the following to Linker::General::Additional Library
          Directories for the Debug configuration:

            C:\Program Files\MySQL\MySQL Server 5.0\lib\debug,
            C:\mysql++\vc\debug

          For the Release configuration, make it the same, but
          change the 'debug' directory names to 'opt'.

        o Under Linker::Input add the following to "Additional
          Dependencies":
          
            libmysql.lib wsock32.lib mysqlpp.lib

    You may want to study examples\vstudio\mfc\mfc.vcproj to see
    this in action.  Note that some of the paths will be different,
    because it can use relative paths for mysqlpp.dll.


Using MySQL++ in a Windows Forms C++/CLI Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Before you start work on getting MySQL++ working with your own
    program, you need to make some changes to the MySQL++ build settings.
    Open mysqlpp.sln, then right-click on the mysqlpp target and select
    Properties.  Make the following changes for both the Debug and
    Release configurations:

        o Under Configuration Properties::General, change "Common
          Language Runtime support" to the /clr setting.

        o Under C/C++::Command Line, remove the /EHsc from the
          Additional Options section.

    If you have already built MySQL++, be sure to perform a complete
    rebuild after changing these options.  The compiler will emit several
    C4835 warnings after making those changes, which are harmless when
    using the DLL with a C++/CLI program, but which warn of real problems
    when using it with unmanaged C++.  As a result, it's probably best
    if you don't install the resulting DLL in a system level directory.
    I'd recommend copying it only into the same directory as the EXE.

    Once you have MySQL++ built with CLR support, open your program's
    project.  If you don't already have a project set up, open Visual
    Studio, say File::New::Project, then choose Visual C++::CLR::Windows
    Forms Application.  Go through the wizard setting up the project as
    you see fit.

    The configuration process isn't much different from that for an
    MFC project, so go through the list above first.  Then, make the
    following changes particular to .NET and C++/CLI:

        o Under Configuration Properties::General change the setting
          from /clr:pure to /clr.  (You need mixed assembly support
          to allow a C++/CLI program to use a plain C++ library like
          MySQL++.)

        o For the Linker::Input settings, you don't need wsock32.lib.
          The mere fact that you're using .NET takes care of that
          dependency for you.

    In the MFC instructions above, it said that you need to build it
    using the Multi-threaded DLL version of the C++ Runtime Library.
    That's not strictly true for MFC, but it's an absolute requirement
    for C++/CLI.  See the Remarks in this MSDN article for details:

        http://msdn2.microsoft.com/en-us/library/k8d11d4s.aspx

    You may want to study examples\vstudio\wforms\wforms.vcproj to see
    all this in action.  Note that some of the paths will be different,
    because it can use relative paths for mysqlpp.dll.


If You Run into Problems...
~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Especially if you have linking problems, make sure your project
    settings match the above.  Visual C++ is very picky about things
    like run time library settings.  When in doubt, try running one
    of the example programs.  If it works, the problem is likely in
    your project settings, not in MySQL++.

