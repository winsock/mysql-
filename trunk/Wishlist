Patches for any of these thoughtfully considered!  See the HACKERS file
for instructions on sending patches.

The items in the bug fix/maintenance section are the easiest to do
without breaking things, so if you're looking for a project....

Here's a meta-item that doesn't really fit into any of the categories
below: any time you must hand-roll some SQL code in your program,
consider whether it could be reduced to an API feature that would be
widely useful.  Patches or proposals of this sort are always welcome.


v2.0 Release Plan
-----------------

	The basic concept of MySQL++ v2.0 is to roll up all of the ABI
	breakages that we've been putting off.
	
	Ideally, this will be the last ABI breakage for a long while.
	The mad god Murphy may have other plans, but even if we have
	to change the ABI again in the next major revision to correct
	unpopular changes, it's still in our best interest not to
	put off these changes any further.  The earlier we discover
	problems with these changes, the less time until we settle
	on a stable ABI.

	We're therefore putting off major changes that shouldn't impact the
	ABI to v2.1 or later.  See the next section.

	This plan is not engraved in stone.  Some of these changes may
	get pushed to v2.1, and other items from the following sections
	might get rolled up into v2.0.

	The remaining changes planned for v2.0 are:


	o Fold SQLQuery class into Query.

	o Use mysql_real_escape_string() instead of mysql_escape_string()
	  within the Query::pprepare() function.  (In C API
	  since 3.23.14.)  Depends on previous change, because
	  mysql_real_escape_string() requires access to the current
	  Connection object, to get the database's default character
	  encoding.

	o See if we can use mysql_real_escape_string() in manip.cpp
	  as well.  (This might end up being pushed into v2.1, if it's
	  too tough.)

	o Derive combined Query+SQLQuery class from something higher up the
	  IOStreams hierarchy, something that's meant to be subclassed.  Do
	  our own buffer management, possibly with a basic_stringbuf data
	  member.

	o There are comments in sql_query.h saying "only here temporary".
	  They've been there for literally years.  Time to decide what
	  to do about them!

	o Set type to some default in ColData_Tmpl default ctor.

	o Fold RowTemplate class into Row.

	o Add thread support to examples/Makefile.simple.  Commented-out
	  by default, but available if required.

	o It may be possible to optimize the use of ColData in the return
	  from Row::operator[]. Currently, that operator returns
	  a temporary ColData object, which contains a std::string
	  buffer which is initialized by a const char* pointer to
	  data within the Row object.  Since the ColData object is
	  temporary, you currently must copy the data a second time to
	  store it when using Row::operator[].	If the end user just
	  wants a const char*, this double copy could be prevented.
	  See http://lists.mysql.com/plusplus/4451 for the proposal.


Future Features and ABI Changes
-------------------------------

	These changes are planned for versions after v2.0. Some could happen
	as early as v2.1, but don't count on it.  If you need some of these
	changes to happen quicker than that, the best way to ensure it is to
	start coding and provide a patch!
	

	o Transaction support.  Create a "Transaction" class, an object of
	  which you create on the stack, giving it a reference to the
	  Connection object.  Transaction object's ctor calls a function on
	  the Connection object to start a transaction set, and its dtor
	  calls another function to commit the transaction.  Potential
	  problem: it would be natural to throw an exception on transaction
	  rejection, but doing this from a stack-based object's dtor can
	  open up a lot of problems.  Also, for this to work properly, the
	  Connection object has to be in a higher scope, or created on the
	  heap.

	  Alternate approach: explicit commit() call in the transaction class.
	  The dtor will always perform a rollback if not committed first.
	  This removes possibility of exception in the dtor, while allowing
	  an exception in commit().  The database will always be left in
	  a consistent state if an exception occurs that is not handled.


	o Abstract all uses of MySQL C API functions into a database
	  driver class with a generic interface.  This is a step
	  towards database-independence, without the parallel class
	  hierarchy required by the MySQL++ 1.7 design.  Also, it
	  will make it easier to make class Connection completely
	  friend-less.	Right now, the main reason it needs friends
	  is because these other classes make C API calls using its
	  private MYSQL data member.  The other reasons for it having
	  friends aren't nearly as compelling, so it wouldn't be
	  hard to justify redesigning Connection to eliminate these
	  final reasons.

	o Currently the "rubber meets the road" in the const char*
	  version of the execute(), store() and use() methods.
	  A version taking a C++ string would be more efficient, and
	  it could handle embedded null characters if we switched the
	  internals over to mysql_real_query().  Cannot add such an
	  overload for type conflict reasons, but we can move these
	  implementations into the first SQLString overload, which
	  previously was intended for use with template queries.
	  Then we can make the const char* versions wrappers for the
	  SQLString version.

	o Add a configure script option to allow the new lock mechanism to
	  use platform mutexes via the Boost.Threads library.

	o Consider other places true thread-awareness could be added.
	  Should more classes be Lockable?  Are there additional mechanisms
	  besides Lockable that we need to add?

	o SSQLS structures include some static elements (_table and
	  names[]), which are defined within the macro.  If you put an SSQLS
	  declaration in a header file and #include that from multiple
	  locations, you get a multiply-defined symbol warning.  Figure out
	  some way to separate the definition from the declaration.  One
	  idea is to give the SSQLS macros another parameter, to suppress
	  static definition.  Another is to put them in another macro, which
	  the user must instantiate once in a .cpp file.  (Similar to the
	  way MFC message maps work.)

	o MySQL++ handles automatic quoting and escaping differently for
	  cout and cerr than for Query streams.  This should probably
	  be simplified so that automatic quoting is only done for Query
	  streams.  No other stream type should be treated specially.

	o Some field_list() functions use the do_nothing manipulator, while
	  others use the quote manipulator.  Standardize on one.  Probably
	  do_nothing will work in all cases, because field names that work
	  as SSQLS member variable names don't need quoting or escaping.
	  But, among the fancier SSQLS features is the ability to use
	  different C++ variable names than the SQL table uses for field
	  names.  Is it worth breaking that compatibility?

	o Deprecate sql_create_basic_* ? They have less functionality and
	  they're no easier to use than sql_create and friends, so
	  why bother with them?  I suppose the code generated is a bit
	  smaller, but *really*....  Only possible saving grace is if BC++
	  can compile them due to the macro code being shorter.  They also
	  don't have the static members, which annoy some compilers.

	o User-settable floating-point comparison precisions?  Something
	  like this: http://lists.mysql.com/plusplus/3984  As it currently
	  stands, sql_cmp(double,double) is foolish.  One shouldn't do
	  exact equality comparison on floating point values.
	
	o Consider using MySQL C API enum constants in mysql_type_info::types
	  definition instead of hard-coded values.  This could potentially
	  break a lot of infrastructure, though, so do it only with care.

	o Add time_t conversion to date and time classes.
	  Also consider other niceties, like arithmetic.
	  (See "Algorithms for Programmers" by Binstock and Rex.)
	  Then write an example showing how to use these mechanisms.


Bug Fix/Maintenance Items
-------------------------

	These items could happen in any version.


	o 64-bit integer support has been reported to work, but more
	  confirmation is wanted.

	o Can one say something like find_if() on an interator from a
	  ResUse query?  If so, make an example of it, showing how you can
	  use the full expressiveness of C++ to augment SELECT matching.

	o Add symlinks from MySQL++ manuals to MySQL manuals online
	  when we reference C API functions and such.

	o Have resetdb also create a table that load_file and
	  cgi_image can use.  Remove "fax"ness from these examples,
	  and encourage people to load up JPEGs or something else that
	  a browser can display, so one can easily drop cgi_image into
	  a cgi-bin directory to try it out.  Make load_image use the
	  standard command line parameters, so you can manually load up
	  some images for cgi_image to retrieve.

	o Add Makefiles suitable for VC++ free command line tools and
	  for MinGW.  Consider adding support for BC++ free compilers as
	  well, and drop the BCB project files.  We could even drop the
	  VC++ project files, which might be a good thing during the
	  Visual Studio 2003 to 2005 changeover period.  This feature
	  should also subsume examples/Makefile.simple.

	o Visual C++ project files should build a DLL version of the library
	  only, for LGPL reasons.

	o MinGW can't build a DLL for MySQL++.  It has to do with the file
	  reorganization in 1.7.20: if you move everything from row.cc to
	  a new row2.h file and include it in a few strategic locations, it
	  works.  But, this is a bogus fix.  Find the right one.

	o Template ListInsert in lib/myset.h isn't being used within the
	  library.  It could probably be used in place of SetInsert
	  in the same file, which things like type_info.h do use now,
	  but it isn't clear how one would go about doing that without
	  changing the library code.  Document it or throw it away.

	o Define CSS stylesheet for userman to try and match its appearance
	  to that of the refman.  Perhaps we can just copy the stylesheet
	  from Doxygen?

