Patches for any of these thoughtfully considered!  See the HACKERS file
for instructions on sending patches.

The items in the bug fix/maintenance section are the easiest to do
without breaking things, so if you're looking for a project....


v2.0 Release Plan
-----------------

	The basic concept of MySQL++ v2.0 is to roll up all of the ABI
	breakages that we've been putting off.	Ideally, this will be
	the last ABI breakage for a long while.  The mad god Murphy may
	have other plans, but even if we have to change the ABI again in
	the next major revision to correct unpopular changes, it's still
	in our best interest not to put off these changes any further.
	The earlier we discover problems with these changes, the less
	time until we settle on a stable ABI.

	We're therefore putting off major changes that shouldn't impact the
	ABI to v2.1 or later.  See the next section.

	This plan is not engraved in stone.  Some of these changes may
	get pushed to v2.1, and other items from the following sections
	might get rolled up into v2.0.

	The planned v2.0 changes are:

	o Create interface class for disabling exceptions, and derive all
	  classes that currently can have exceptions disabled from this
	  interface.  Then create an exception-disabling class that
	  is designed to be created on the stack with a reference to
	  one of these objects; while the disabler object is in scope,
	  exceptions are disabled on the target object.  Side benefit:
	  this will standardize the mechanism for temporarily disabling
	  exceptions, which currently varies somewhat between classes.
	  Also possible to do this with templates, using compile-time
	  polymorphism.

	o Move SQLQueryNEParms into exceptions.h.

	o Hoist all common exception functionality up into a superclass,
	  and derive all MySQL++ exceptions from that.

	o Extract Connection class's lock mechanism into a separate class,
	  instances of which could be created on the stack so the lock
	  is always relesased on function exit.  Derive Connection from
	  an interface class ("Lockable"?) that provides lock and unlock
	  functions.  Add a configure script option to allow this lock
	  mechanism to use platform mutexes via the Boost.Threads library.
	  Also derive Query from this new interface, as it also has a
	  locking mechanism.

	o Change Connection::create_db() and drop_db() to return true on
	  success.

	o Connection::create_db(), drop_db() and select_db() should take
	  their arguments by reference, and be const.

	o Remove Connection::infoo() (Apparently an attempt to cope with
	  typos for "info()".)

	o Rename Connection::read_options() to set_option().

	o Rename Connection::real_connect() to connect(), drop old
	  connect() function, and set defaults for all parameters
	  beyond what connect() supported.  Thus the API only changes
	  for real_connect() users, and it's just a function rename.

	o Make Connection::execute() use mysql_real_query() instead of
	  mysql_query() so it can handle binary data.

	o Remove query-building interface from Connection.  It just
	  parallels most of the Query class interface, for little benefit.

	o Fold SQLQuery class into Query.

	o Use mysql_real_escape_string() instead of mysql_escape_string()
	  within the Query::pprepare() function.  (In C API
	  since 3.23.14.)  Depends on previous change, because
	  mysql_real_escape_string() requires access to the current
	  Connection object, to get the database's default character
	  encoding.

	o See if we can use mysql_real_escape_string() in manip.cpp
	  as well.  (This might end up being pushed into v2.1, if it's
	  too tough.)

	o Give combined Query+SQLQuery class all the members it needs to
	  look like a std::stringstream.   Use a private stringstream
	  data member to hold the query-under-construction.

	o There are comments in sql_query.h saying "only here temporary".
	  They've been there for literally years.  Time to decide what
	  to do about them!

	o Set type to some default in ColData_Tmpl default ctor.

	o Fold RowTemplate class into Row.

	o Collapse mysql_* date and time classes into their subclasses,
	  Date, Time, and DateTime.

	o Make dtors virtual in classes with virtual functions, to squish
	  GCC 4.0 warning.  Also, go through each changed class looking
	  for any code that allocates memory or other resources, and
	  make sure they're released in the dtor.

	o Collapse multiple public and private sections of class
	  mysql_type_info into one of each.  Also, consider renaming
	  that class.

	o Collapse store(string&) and store(string&, bool) into a single
	  function by making bool argument default to false.  Same for
	  use() and execute().

	o Several of the value_list* and related functions in vallist.h
	  and row.h can be collapsed into one by use of default
	  parameters.  A conservative refactoring wouldn't change the
	  API, but keep an open mind about whether a more aggressive
	  change would be better in the end.

	o Try to collapse all SQLQueryParams::set() overloads into
	  a single member by suitable use of default parameters.

	o Remove simp_list_b from vallist.h.  It's not used within the
	  library, and it doesn't seem to be useful for end-user code.

	o Null's copy ctor should take its parameter by reference.

	o Remove the field name form of field_list().  It's pretty silly:
	  it takes a field name as a paramter, and returns a field name!
	  True, there's a type conversion going on here, but...

	o Change Row ctor to take the MYSQL_ROW by const reference.

	o Swap the definitions of Row::operator[] and lookup_by_name().
	  That is, have the operator take a field name, and define a
	  function (at()?) that takes a field index.  The original problem
	  solved in 1.7.10 still exists, in that modern compilers won't
	  let you overload the operator on both strings and integers,
	  but the string form probably is the most useful.

	o Decide on a new soname scheme?  It'd be nice if the soname had
	  some obvious relationship to the library version.  We could
	  actually go with a 1:1 relationship, and simply override the
	  default library symlink scheme to handle things correctly if
	  libraries from the old scheme are still present.

	o Add a userman section severely summarizing ChangeLog, with a
	  focus on API and ABI breakages.

	o Automatically define USE_WIN32_UCS2 in util.cpp when platform.h
	  detects a Windows compiler.  Test with VC++ and Cygwin in
	  -mno-cygwin mode.

	o Remove the exception handling stuff from all the simple*
	  examples, so they earn their name.  Newbies get thrown into the
	  deep end of the pool in simple1.cpp in the userman right now...

	o With previous change done, promote existing "notes on
	  exceptions" section of tutorial into a new section, or even
	  a new chapter.

	o Consider splitting "The Basics" section of tutorial into two
	  parts, with the new EH discussion separating discussion of
	  the examples that use EH and those that don't.

	o Add thread support to examples/Makefile.simple.  Commented-out
	  by default, but available if required.

	o It may be possible to optimize the use of ColData in the return
	  from Row::operator[]. Currently, that operator returns
	  a temporary ColData object, which contains a std::string
	  buffer which is initialized by a const char* pointer to
	  data within the Row object.  Since the ColData object is
	  temporary, you currently must copy the data a second time to
	  store it when using Row::operator[].	If the end user just
	  wants a const char*, this double copy could be prevented.
	  See http://lists.mysql.com/plusplus/4451 for the proposal.

	o Relicense user manual.  Linux Documentation Project License v2.0
	  is the current front-runner.


Future Features and ABI Changes (after v2.0)
--------------------------------------------

	o Transaction support.  Create a "Transaction" class, an object of
	  which you create on the stack, giving it a reference to the
	  Connection object.  Transaction object's ctor calls a function on
	  the Connection object to start a transaction set, and its dtor
	  calls another function to commit the transaction.  Potential
	  problem: it would be natural to throw an exception on transaction
	  rejection, but doing this from a stack-based object's dtor can
	  open up a lot of problems.  Also, for this to work properly, the
	  Connection object has to be in a higher scope, or created on the
	  heap.

	o SSQLS structures include some static elements (_table and
	  names[]), which are defined within the macro.  If you put an SSQLS
	  declaration in a header file and #include that from multiple
	  locations, you get a multiply-defined symbol warning.  Figure out
	  some way to separate the definition from the declaration.  One
	  idea is to give the SSQLS macros another parameter, to suppress
	  static definition.  Another is to put them in another macro, which
	  the user must instantiate once in a .cpp file.  (Similar to the
	  way MFC message maps work.)

	o MySQL++ handles automatic quoting and escaping differently for
	  cout and cerr than for Query streams.  This should probably
	  be simplified so that automatic quoting is only done for Query
	  streams.  No other stream type should be treated specially.

	o Some field_list() functions use the do_nothing manipulator, while
	  others use the quote manipulator.  Standardize on one.  Probably
	  do_nothing will work in all cases, because field names that work
	  as SSQLS member variable names don't need quoting or escaping.
	  But, among the fancier SSQLS features is the ability to use
	  different C++ variable names than the SQL table uses for field
	  names.  Is it worth breaking that compatibility?

	o User-settable floating-point comparison precisions?  Something
	  like this: http://lists.mysql.com/plusplus/3984
	
	o Look through my own code for uses of hand-rolled SQL queries, and
	  try to reduce them to API features.

	o Consider other places true thread-awareness could be added,
	  besides the mutex + Connection lock item above.

	o Deprecate sql_create_basic_* ? They have less functionality and
	  they're no easier to use than sql_create and friends, so
	  why bother with them?  I suppose the code generated is a bit
	  smaller, but *really*....  Only possible saving grace is if BC++
	  can compile them due to the macro code being shorter.

	o Consider using MySQL C API enum constants in mysql_type_info::types
	  definition instead of hard-coded values.  This could potentially
	  break a lot of infrastructure, though, so do it only with care.


Bug Fix/Maintenance Items (could happen in any version)
-------------------------------------------------------

	o Can one say something like find_if() on an interator from a
	  ResUse query?  If so, make an example of it, showing how you can
	  use the full expressiveness of C++ to augment SELECT matching.

	o Add symlinks from MySQL++ manuals to MySQL manuals online
	  when we reference C API functions and such.

	o Have resetdb also create a table that load_file and
	  cgi_image can use.  Remove "fax"ness from these examples,
	  and encourage people to load up JPEGs or something else that
	  a browser can display, so one can easily drop cgi_image into
	  a cgi-bin directory to try it out.  Make load_image use the
	  standard command line parameters, so you can manually load up
	  some images for cgi_image to retrieve.

	o Add Makefiles suitable for VC++ free command line tools and
	  for MinGW. Consider adding support for BC++ free compilers as
	  well, and drop the BCB project files.  We could even drop the
	  VC++ project files, which might be a good thing during the
	  Visual Studio 2003 to 2005 changeover period.  This feature
	  should also subsume examples/Makefile.simple.

	o Template ListInsert in lib/myset.h isn't being used within the
	  library.  It could probably be used in place of SetInsert
	  in the same file, which things like type_info.h do use now,
	  but it isn't clear how one would go about doing that without
	  changing the library code.  Document it or throw it away.

	o sql_cmp(double,double) is foolish.  One shouldn't do ==
	  comparison on floating point values.	Same for
	  sql_cmp(float,float).  See also floating point precision item
	  in previous section.

	o 64-bit integer support has been reported to work, but more
	  confirmation is wanted.

	o Visual C++ project files should build a DLL version of the library
	  only, for LGPL reasons.

	o MinGW can't build a DLL for MySQL++.  It has to do with the file
	  reorganization in 1.7.20: if you move everything from row.cc to
	  a new row2.h file and include it in a few strategic locations, it
	  works.  But, this is a bogus fix.  Find the right one.

	o Define CSS stylesheet for userman to try and match its appearance
	  to that of the refman.  Perhaps we can just copy the stylesheet
	  from Doxygen?

