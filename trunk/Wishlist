Patches for any of these thoughtfully considered!  See the HACKERS file
for instructions on sending patches.

Here's a meta-item that doesn't really fit into any of the categories
below: any time you must hand-roll some SQL code in your program,
consider whether it could be reduced to an API feature that would be
widely useful.  Patches or proposals of this sort are always welcome.


v3.0 Plan
---------
    o Redesign Result to be a real container of Rows:

      - Either copy everything appropriate from ResUse into Result and
        drop inheritance between them, or move everything common
        between them into a new ResultBase from which they both derive.
        Result is-not-a ResUse.

      - Instead of keeping the MYSQL_RES object passed to the ctor
        as a data member, Result should keep a vector<Row>, which it
        populates as soon as it is passed the MYSQL_RES.  It can then
        immediately free the result set.

      - Can then make operator[] return by reference, removing the
        last reason subscript_iterator::operator ->() had to be
        removed.  Restore it for Result, as well as Fields and Row.

    o Try using MySQL C API enum constants in mysql_type_info::types
      instead of hard-coded values.

    o Add syntactic sugar to the Date and Time classes.  A way to
      represent SQL's NOW() function would be especially helpful.

    o Add userman chapter on connection options

    o Create examples/vstudio/threads to test new thread-related
      features.  Only VC++ since every other platform has the
      possibility of building without thread support.  Then work
      it into userman's threads chapter, which already has a stub
      for this.

    o Is MYSQLPP_QUERY_THISPTR still needed with VC++2003?  The recent
      manipulator changes and the removal of all operator<<(Query&,
      const T&) may make it unnecessary.

    o If Bakefile 0.2.3 (guessing) comes out before we release, change
      all the msvs2005prj references in mysql++.bkl, Bakefiles.bkgen
      and rebake.bat to msvs2003prj and remove the section on doing
      this by hand from README.vc.  If not, we might need to update
      some of the FAQ items on the MySQL++ home page.

    o Test with Visual Studio 2008 Professional and Express.  If it
      works, update FAQ.

    o Figure out how to name debug DLL and library under VC++ and
      Xcode differently (trailing '_d'?) to avoid trouble when mixing
      build options among translation units.  With VC++, we can do
      it in install.bat.  Xcode....?


v3.1 Tentative Plan
-------------------
    o SSQLS v2:

      - Switch from C macros to a DSL that is translated to .cpp and
        .h files by a tool built along with MySQL++ library.  Design:

        http://lists.mysql.com/plusplus/6929

      - Switch per SSQLS that makes it throw an exception when it sees
        a mismatch between DB schema and SSQLS definition.  Harkens
        back to pre v3.0 SSQLS behavior, where you'd get a crash as
        it tried to fill out fields by position, and fail.  For the
        B&D folk who don't like the new "just cope" behavior.

      - Try to design it so as much code as possible resides in
        a common base class (SsqlsBase) that all SSQLSes derive from.
        Can't do it in v1 because virtually everything is specific
        to the structure's type.  Study equal_list(), for example.
        Do it with an eye toward replacing Query's template methods
        taking SSQLSes with concrete methods taking SsqlsBase&.

      - Use NoExceptions(row) within the SSQLS's populate method in
        order to suppress BadFieldName exception when populating from
        a subset row.

      - Add truthiness operator to SSQLS to detect an incomplete
        object.

      - Add features to ssqlsxlat to write SSQLSv2 declaration files
        from existing schemas extracted from CREATE TABLE statements,
        from running databases, and from C++ files containing old
        SSQLS v1 declarations.

      - Add table creation ability to SSQLS.  It has the schema...

      - Support per-instance table name overrides, instead of just
        per SSQLS?  Needed if you're going to use a single SSQLS for
        many tables with the same structure in a multithreaded program,
        so changing it statically isn't safe.

    o Chris Frey's packarray class

    o Create adaptors for std::bitset, for storing binary data in a
      MySQL table.  Make two options available, one for storing the
      return from bitset::to_ulong() in an UNSIGNED INTEGER column,
      and another for storing a larger set of bits in a more flexible
      way, perhaps as a BLOB.

    o field_list should use backticks to quote its items to handle
      spaces and other special characters.  Probably also remove all
      the manipulator stuff associated with these: no reason to make
      it user-settable, as there's only one right way to do it.  See:

         http://dev.mysql.com/doc/refman/5.0/en/identifiers.html

    o Define custom template for sql_double et al., with the comparison
      precision being the parameter:

        http://lists.mysql.com/plusplus/3984

    o Define operator<< for Fields, Row, ResUse, etc.  In other
      words, there should be a way to get a user-readable version of
      received data without a lot of code.  CSV format by default, and
      mysql(1)-like ASCII grid optionally, perhaps with a manipulator?
      There is grid code in examples/multiquery.cpp which we can use
      and then make multiquery.cpp a demonstration platform for it.
      Maybe dbinfo and fieldinf, too?

    o Has experience with new thread awareness changed our mind on
      atomic inc/dec of reference counts in RefCounted*?


v4.0 or Later
-------------
    o Abstract all uses of MySQL C API functions into a database
      driver class with a generic interface.  This is a step towards
      database-independence, without the parallel class hierarchy
      required by the MySQL++ 1.7 design.

      A bonus is that it'll let us remove Connection's last friend,
      Query, which only needs to be a friend to make C API calls
      using Connection::mysql_.

      Abstract base class DBDriver declares the generic interface;
      it's subclassed for every database server type we support.
      Connection object creates leaf class, passes it generically
      as a DBDriver* to Query, which passes it to Result.  At the
      moment, that's all the classes that access the C API themselves.
      Everything else goes through either Query or Connection.

    o Some sort of support for prepared statements.  Can we hijack
      the template query mechanism?

    o If SSQLSv2 does use a common base class, change Query template
      methods taking SSQLS into concrete methods taking SsqlsBase&.
