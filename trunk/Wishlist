Patches for any of these thoughtfully considered!

New Feature Requests and ABI Changes
------------------------------------

	o Transaction support.  Considering block-level semantics: create
	  a "transaction object" on the stack, which takes a ref to the
	  Connection object (?) as a ctor parameter.  Transaction object's
	  ctor calls a function on the conn telling it to tell the server to
	  begin a transaction set.  When the transaction object is destroyed,
	  it tells the conn object to commit everything.  Conn object in
	  this situation must be created in a higher scope, or on the heap.
	
	o User-settable floating-point comparison precisions?  Something
	  like this: http://lists.mysql.com/plusplus/3984
	
	o Look through my own code for uses of hand-rolled SQL queries, and
	  try to reduce them to API features.

	o Write a new tutorial, separate from the reference manual, but
	  linking to it.  It should be built around the existing examples.
	  Where insufficient examples exist to support the tutorial, write
	  more.

	o True thread-awareness in the library.  One place this could
	  impact: Connection lock mechanism could use platform mutexes
	  where available.  Enable via configure script flag on Unixy
	  systems.

	o Why does Connection::create_db() return true on failure?
	  (This is in this section, because changing it would break a lot of
	  code.  This sort of thing should be put off to v1.8 or v2.0.)

	o Connection lock mechanism should be extracted into a separate
	  class, instances of which could be created on the stack so
	  the lock is always relesased on function exit.  (Does Boost
	  provide something like this?)  This will probably break the ABI,
	  because Connection would have to derive from an interface class
	  for the lock object to be able to call functions on it.

	o Do something similar to above with exception handling.  Derive
	  from exception-disabling interface, and instantiate an exception
	  disabler object that turns off exceptions until that object goes
	  out of scope.

	o Fold SQLQuery class into Query.  The separation goes back to the
	  dream of making MySQL++ database-independent.
	  
	o With previous item done, it should be possible to use
	  mysql_real_escape_string() instead of mysql_escape_string() within
	  the pprepare() function.  Doing the same in manip.cpp will be more
	  difficult.

	o Consider giving combined Query+SQLQuery class all the members it
	  needs to look like a std::stringstream and make them use a private
	  stream data member instead of deriving from it.  C++ library
	  classes were not designed to be subclassed.  Evidence is the
	  dynamic_cast<>s required for VC++ in insert() and friends.

	o Why is class ResUse separate from class Result?  They're declared
	  in the same file, only Result derives from it, and it isn't clear
	  that all of the other code that uses ResUse couldn't use Result
	  directly.

	o Same for mysql_date/Date and mysql_time/Time.  Some justification
	  is that DateTime derives from their base classes, but why can't
	  it be derived from the leaf classes instead?

	o Add UTF-8 handling for VC++, in simple1 program?  Umlaut in
	  first item shows as two high-ASCII characters when run in Win32
	  console.  (Oddly enough, VC++'s editor understands UTF-8!)

	o SSQLS structures include some static elements (_table and
	  names[]), which are defined within the macro.  If you put an SSQLS
	  declaration in a header file and #include that from multiple
	  locations, you get a multiply-defined symbol warning.  Figure out
	  some way to separate the definition from the declaration.  One
	  idea is to give the SSQLS macros another parameter, to suppress
	  static definition.  Another is to put them in another macro, which
	  the user must instantiate once in a .cpp file.  (Similar to the
	  way MFC message maps work.)

	o Deprecate sql_create_basic_* ? They have less functionality and
	  they're no easier to use than sql_create and friends, so
	  why bother with them?  I suppose the code generated is a bit
	  smaller, but *really*....  Only possible saving grace is if BC++
	  can compile them due to the macro code being shorter.


Bug Fix/Maintenance Items
-------------------------

	o Move SQLQueryNEParms into exceptions.h?
	
	o Template ListInsert in lib/myset.h isn't being used within the
	  library.  It could probably be used in place of SetInsert in the
	  same file, which things like type_info.h do use now, but it isn't
	  clear how one would go about doing that without changing the
	  library code.  Document it or throw it away.
	
	o sql_cmp(double,double) is foolish.  One shouldn't do == comparison
	  on floating point values.  Same for sql_cmp(float,float).  See
	  also floating point precision item in previous section.

	o Attribution and licensing needs attention.  Note LGPL at top of
	  all source files, and note copyrights where known.

	o 64-bit integer support is not heavily tested.  It may yet have
	  problems.

	o Visual C++ project files should build a DLL version of the library
	  only, for LGPL reasons.

	o MinGW can't build a DLL for MySQL++.  It has to do with the file
	  reorganization in 1.7.20: if you move everything from row.cc to
	  a new row2.h file and include it in a few strategic locations, it
	  works.  But, this is a bogus fix.  Find the right one.
