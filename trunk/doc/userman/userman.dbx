<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.3//EN"
        "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<article>
<articleinfo>
    <title>MySQL++ User Manual</title>
    
    <authorgroup>
        <author>
            <firstname>Kevin</firstname>
            <surname>Atkinson</surname>
        </author>

        <author>
            <firstname>Sinisa</firstname>
            <surname>Milivojevic</surname>
        </author>

        <author>
            <firstname>Monty</firstname>
            <surname>Widenius</surname>
        </author>

        <author>
            <firstname>Warren</firstname>
            <surname>Young</surname>
        </author>
    </authorgroup>

    <copyright>
        <year>1998-2001, 2005-2007</year>
        <holder>Kevin Atkinson (original author)</holder>
        <holder>MySQL AB</holder>
        <holder>Educational Technology Resources</holder>
    </copyright>

    <pubdate role="rcs">$Date$</pubdate>
</articleinfo>


<sect1 id="intro">
    <title>Introduction</title>

    <para>MySQL++ is a powerful C++ wrapper for MySQL's C API.
    Its purpose is to make working with queries as easy as working
    with STL containers.</para>

    <para>The latest version of MySQL++ can be found at
    <ulink url="http://tangentsoft.net/mysql++/">the official web
    site</ulink>.</para>

    <para>Support for MySQL++ can be had on <ulink
    url="http://lists.mysql.com/plusplus">the mailing
    list</ulink>. That page hosts the mailing list archives, and
    tells you how you can subscribe.</para>


    <sect2>
        <title>A Brief History of MySQL++</title>

        <para>MySQL++ was created in 1998 by Kevin Atkinson. It
        started out MySQL-specific, but there were early efforts to
        try and make it database-independent, and call it SQL++. This
        is where the old library name "sqlplus" came from. This is
        also why the old versions prefixed some class names with
        "Mysql" but not others: the others were supposed to be the
        database-independent parts.</para>

        <para>Then in 1999, Sinisa Milivojevic unofficially
        took over maintenance of the library, releasing versions
        1.0 and 1.1. (All of Kevin's releases were pre-1.0 point
        releases.) Kevin gave over maintenance to Sinisa officially
        with 1.2, and ceased to have any involvement with the library's
        maintenance. Sinisa went on to maintain the library through
        1.7.9, released in mid-2001. Since Sinisa is an employee of
        <ulink url="http://www.mysql.com/">MySQL AB</ulink>, it seems
        to be during this time that the dream of multiple-database
        compatibility died.</para>

        <para>With version 1.7.9, MySQL++ went into a period of stasis,
        lasting over three years. During this time, Sinisa ran the
        MySQL++ mailing list and supported its users, but made no
        new releases. There were many patches submitted during this
        period, some of which were ignored, others which were just
        put on the MySQL++ web site for people to try. A lot of these
        patches were mutually-incompatible, and not all of them gave
        a fully-functional copy of MySQL++.</para>

        <para>In early August of 2004, the current maintainer (Warren
        Young) got fed up with this situation and took over. He
        released 1.7.10 later that month.</para>
    </sect2>


    <sect2>
        <title>If You Have Questions...</title>

        <para>If you want to email someone to ask questions about
        this library, we greatly prefer that you send mail to the
        <ulink url="http://lists.mysql.com/plusplus">MySQL++ mailing
        list</ulink>. The mailing list is archived, so if you have
        questions, do a search to see if the question has been asked
        before.</para>

        <para>You may find people's individual email addresses in
        various files within the MySQL++ distribution. Please do not
        send mail to them unless you are sending something that is
        inherently personal. Not all of the principal developers of
        MySQL++ are still active in its development; those who have
        dropped out have no wish to be bugged about MySQL++. Those of
        us still active in MySQL++ development monitor the mailing
        list, so you aren't getting any extra "coverage" by sending
        messages to additional email addresses.</para>
    </sect2>
</sect1>


<sect1 id="overview">
    <title>Overview</title>

    <para>MySQL++ has a lot of complexity and power to cope with the
    variety of ways people use databases, but at bottom it doesn't
    work all that differently than other database access APIs. The
    usage pattern looks like this:</para>

    <orderedlist>
        <listitem><para>Open the connection</para></listitem>

        <listitem><para>Form and execute the query</para></listitem>

        <listitem><para>If successful, iterate through the result
        set</para></listitem>

        <listitem><para>Else, deal with errors</para></listitem>
    </orderedlist>

    <para>Each of these steps corresponds to a MySQL++ class or class
    hierarchy. An overview of each follows.</para>


    <sect2>
        <title>The Connection Object</title>

        <para>A <ulink type="classref" url="Connection"/> object
        manages the connection to the MySQL server. You need at
        least one of these objects to do anything. Because the
        other MySQL++ objects your program will use often depend (at
        least indirectly) on the <classname>Connection</classname>
        instance, the <classname>Connection</classname> object needs
        to live at least as long as all other MySQL++ objects in
        your program.</para>

        <para>MySQL supports many different types of data
        connection between the client and the server: TCP/IP,
        Unix domain sockets, and Windows named pipes. The generic
        <classname>Connection</classname> class supports all of these,
        figuring out which one you mean based on the parameters you
        pass to <methodname>Connection::connect()</methodname>. But
        if you know in advance that your program only needs one
        particular connection type, there are subclasses with simpler
        interfaces. For example, there's <ulink type="classref"
        url="TCPConnection"/> if you know your program will always
        use a networked database server.</para>
    </sect2>


    <sect2>
        <title>The Query Object</title>

        <para>Most often, you create SQL queries using a <ulink
        type="classref" url="Query"/> object created by the
        <classname>Connection</classname> object.</para>

        <para><classname>Query</classname> acts as a standard
        C++ output stream, so you can write data to it like
        you would to <classname>std::cout</classname> or
        <classname>std::ostringstream</classname>. This is
        the most C++ish way MySQL++ provides for building
        up a query string.  The library includes <ulink
        url="../refman/manip_8h.html">stream manipulators</ulink> that
        are type-aware so it's easy to build up syntactically-correct
        SQL.</para>

        <para><classname>Query</classname> also has a feature called
        <xref linkend="tquery"/> which work something like C's
        <function>printf()</function> function: you set up a fixed
        query string with tags inside that indicate where to insert
        the variable parts. If you have multiple queries that are
        structurally similar, you simply set up one template query,
        and use that in the various locations of your program.</para>

        <para>A third method for building queries is to use
        <classname>Query</classname> with <xref linkend="ssqls"/>
        (SSQLS). This feature lets you create C++ structures
        that mirror your database schemas. These in turn
        give <classname>Query</classname> the information it
        needs to build many common SQL queries for you. It can
        <command>INSERT</command>, <command>REPLACE</command> and
        <command>UPDATE</command> rows in a table given the data
        in SSQLS form. It can also generate <command>SELECT * FROM
        SomeTable</command> queries and store the results as an STL
        collection of SSQLSes.</para>
    </sect2>


    <sect2>
        <title>Result Sets</title>

        <para>The field data in a result set are stored in a special
        <classname>std::string</classname>-like class called <ulink
        type="classref" url="String"/>. This class has conversion
        operators that let you automatically convert these objects to
        any of the basic C data types. Additionally, MySQL++ defines
        classes like <ulink type="structref" url="DateTime"/>, which
        you can initialize from a MySQL <command>DATETIME</command>
        string. These automatic conversions are protected against
        bad conversions, and can either set a warning flag or throw
        an exception, depending on how you set the library up.</para>

        <para>As for the result sets as a whole, MySQL++ has a number
        of different ways of representing them:</para>

        <sect3>
            <title>Queries That Do Not Return Data</title>

            <para>Not all SQL queries return data. An example
            is <command>CREATE TABLE</command>. For these types
            of queries, there is a special result type (<ulink
            type="classref" url="ResNSel"/>) that simply reports the
            state resulting from the query: whether the query was
            successful, how many rows it impacted (if any), etc.</para>
        </sect3>

        <sect3>
            <title>Queries That Return Data: Dynamic Method</title>

            <para>The easiest way to retrieve data from MySQL
            uses a <ulink type="classref" url="Result"/>
            object, which includes one or more <ulink
            type="classref" url="Row"/> objects, which each
            include one or more <classname>String</classname>
            objects. Because <classname>Result</classname>
            and <classname>Row</classname> are
            <classname>std::vector</classname>-like containers, you
            can treat the result set as a two-dimensional array. For
            example, you can get the 5th field on the 2nd row by
            simply saying <methodname>result[1][4]</methodname>. You
            can also access row elements by field name, like this:
            <methodname>result[2]["price"]</methodname>.</para>

            <para>An alternate way of accessing your query results
            is through a <ulink type="classref" url="ResUse"/>
            object. This class acts more like an STL input iterator
            than a container: you walk through your result set one
            item at a time, always going forward. You can't seek
            around in the result set, and you can't know how many
            results are in the set until you find the end. In payment
            for that inconvenience, you get higher memory efficiency,
            because the entire result set doesn't need to be stored
            in RAM. This is very useful when you need large result
            sets.</para>
        </sect3>

        <sect3>
            <title>Queries That Return Data: Static Method</title>

            <para>The <xref linkend="ssqls"/> (SSQLS) feature defines
            C++ structures that match the table structures in your
            database schema.</para>

            <para>We call it the "static" method because the table
            structure is fixed at compile time. Indeed, some schema
            changes require that you update your SSQLS definitions
            and recompile, or else the program could crash or throw
            "bad conversion" exceptions when MySQL++ tries to stuff
            the new data into an outdated data structure.  (Not all
            changes require a recompile. Adding a column to a table
            is safe, for instance, as the program will ignore the
            new column until you update the SSQLS definition.)</para>

            <para>The advantage of this method is that your program
            will require very little embedded SQL code. You can
            simply execute a query, and receive your results as C++
            data structures, which can be accessed just as you would
            any other structure. The results can be accessed through
            the Row object, or you can ask the library to dump the
            results into an STL container &mdash; sequential or
			set-associative, it doesn't matter &mdash;
            for you. Consider this:</para>

            <programlisting>
vector&lt;stock&gt; v;
query &lt;&lt; "SELECT * FROM stock";
query.storein(v);
for (vector&lt;stock&gt;::iterator it = v.begin(); it != v.end(); ++it) {
    cout &lt;&lt; "Price: " &lt;&lt; it-&gt;price &lt;&lt; endl;
}</programlisting>

            <para>Isn't that slick?</para>

			<para>If you don't want to create SSQLSes to match your
			table structures, as of MySQL++ v3 you can now use
			<classname>Row</classname> here instead:</para>

            <programlisting>
vector&lt;mysqlpp::Row&gt; v;
query &lt;&lt; "SELECT * FROM stock";
query.storein(v);
for (vector&lt;mysqlpp::Row&gt;::iterator it = v.begin(); it != v.end(); ++it) {
    cout &lt;&lt; "Price: " &lt;&lt; it->at(3) &lt;&lt; endl;
}</programlisting>

			<para>It lacks a certain syntactic elegance, but it has its
			uses.</para>
        </sect3>
    </sect2>


    <sect2>
        <title>Exceptions</title>

        <para>By default, the library throws  <xref
        linkend="exceptions"/> whenever it encounters an error. You
        can ask the library to set an error flag instead, if you
        like, but the exceptions carry more information. Not only do
        they include a string member telling you why the exception
        was thrown, there are several exception types, so you can
        distinguish between different error types within a single
        <symbol>try</symbol> block.</para>
    </sect2>
</sect1>


<sect1 id="tutorial" xreflabel="Tutorial">
    <title>Tutorial</title>

    <para>This tutorial is meant to give you a jump start in using
    MySQL++. While it is a very complicated and powerful library,
    it's possible to make quite functional programs without tapping
    but a fraction of its power. This section will introduce you to
    the most useful fraction.</para>

    <para>This tutorial assumes you know C++ fairly well, in particular
    the Standard Template Library (STL) and exceptions.</para>


    <sect2>
        <title>Running the Examples</title>

        <para>All of the examples are complete running programs. If
        you built the library from source, the examples should
        have been built as well. If you installed it via the RPM
        package, the example source code and a simplified Makefile
        is in the examples subdirectory of the mysql++-devel
        package's documentation directory. (This is usually
        <filename>/usr/share/doc/mysql++-devel-*</filename>, but it
        can vary on different Linuxes.)</para>

        <para>Before you get started, please read through any of the
        <filename>README*</filename> files included with the MySQL++
        distribution that are relevant to your platform. We won't
        repeat all of that here.</para>

        <para>Most of the examples require a test database, created
        by <filename>resetdb</filename>. You run it like so:</para>

        <screen>        ./exrun resetdb [-s server_addr] [-u user] [-p password]</screen>

        <para><filename>exrun</filename> is a shell script that
        ensures that the MySQL++ example program you give as its
        first argument finds the correct shared library version. If
        you run the example program directly, it will search the
        system directories for the MySQL++ shared library. That
        will only work correctly if you've installed the library
        before running the examples. You should run the examples
        before installing the library to ensure that the library
        is working correctly, thus <filename>exrun</filename>. See
        <filename>README.examples</filename> for more details. (We've
        been using POSIX file and path names for simplicity above, but
        there's a Windows version of <filename>exrun</filename>, called
        <filename>exrun.bat</filename>. It works the same way.)</para>

        <para>All of the program arguments are optional.</para>

        <para>If you don't give <option>-s</option>, the underlying
        MySQL C API assumes the server is on the local machine.
        Depending on how the C API library and the server are
        configured, it can use any of several different IPC methods
        to contact the server. You can instead specify how to contact
        the server yourself, with the method depending on the value
        you give for the server address:</para>

        <itemizedlist>
            <listitem>
                <para><emphasis>localhost</emphasis> &mdash; this is
                the default; it doesn't buy you anything</para>
            </listitem>

            <listitem>
                <para>On Windows, a simple period tells the
                underlying MySQL C API to use named pipes, if it's
                available.</para>
            </listitem>

            <listitem>
                <para><emphasis>172.20.0.252:12345</emphasis>
                &mdash; this would connect to IP address
                <computeroutput>172.20.0.252</computeroutput> on TCP
                port <computeroutput>12345</computeroutput>.</para>
            </listitem>

            <listitem>
                <para><emphasis>my.server.name:svc_name</emphasis>
                &mdash; this would first look up TCP service
                name <computeroutput>svc_name</computeroutput>
                in your system's network services database
                (<filename>/etc/services</filename>
                on Unixy systems, and something like
                <filename>c:\windows\system32\drivers\etc\services</filename>
                on modern Windows variants). If it finds an entry
                for the service, it then tries to connect to that
                port on the domain name given.</para>
            </listitem>
        </itemizedlist>

        <para>You can mix symbolic host and service names in any
        combination. If the name doesn't contain a colon, it uses
        the default port, 3306.</para>

        <para>If you don't give <option>-u</option>, it uses your
        user name to log into the database server.</para>

        <para>If you don't give <option>-p</option>, it will assume
        the MySQL user doesn't have a password, which had better not be
        the case.  It's a wild world out there; play safe, kids.</para>

        <para>A typical invocation is:</para>

        <screen>        ./exrun resetdb -u mydbuser -p nunyabinness</screen>

        <para>For <filename>resetdb</filename>, the user name needs to
        be for an account with permission to create databases. Once
        the database is created, you can use any account that
        has read and write permissions for the sample database,
        <filename>mysql_cpp_data</filename>.</para>

        <para>You may also have to re-run <filename>resetdb</filename>
        after running some of the other examples, as they change
        the database.</para>
    </sect2>


    <sect2>
        <title>A Simple Example</title>

        <para>The following example demonstrates
        how to open a connection, execute a simple
        query, and display the results. This is
        <filename>examples/simple1.cpp</filename>:</para>

        <programlisting><xi:include href="simple1.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>This example simply gets the entire "item" column from
        the example table, and prints those values out.</para>

        <para>Notice that MySQL++'s <ulink type="classref"
        url="Result"/> and <ulink type="classref"
        url="Row"/> objects work like an array or the STL
        <classname>std::vector</classname> container. The only trick is
        that if you use a variable to subscript one of these objects,
        it must be of type <type>int</type>, or your C++ compiler
        isn't likely to know which overload for <methodname>operator
        []()</methodname> to call. You can avoid this trap by using
        the <methodname>at()</methodname> instead of using the
        subscript operator if you don't mind losing the syntactic
        convenience. It does the same thing, but it isn't overloaded
        like <methodname>operator []()</methodname>.</para>

        <para>The only thing that isn't explicit in the code above is
        that we delegate command line argument parsing and connection
        establishment to <function>connect_to_db()</function> in
        the <filename>util</filename> module. This function exists
        to give the examples a consistent interface, not to hide
        important details.</para>
    </sect2>


    <sect2>
        <title>A More Complicated Example</title>

        <para>The <filename>simple1</filename> example above
        was pretty trivial. Let's get a little deeper. Here is
        <filename>examples/simple2.cpp</filename>:</para>

        <programlisting><xi:include href="simple2.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>The main point of this example is that we're accessing
        fields in the row objects by name, instead of index. This is
        slower, but obviously clearer. We're also printing out the
        entire table, not just one column.</para>
    </sect2>


    <sect2 id="exceptions" xreflabel="exceptions">
        <title>Exceptions</title>

        <para>By default, MySQL++ uses exceptions to signal
        errors. Most of the examples have a full set of exception
        handlers. This is worthy of emulation.</para>

        <para>All of MySQL++'s custom exceptions derive
        from a common base class, <ulink type="classref"
        url="Exception"/>. That in turn derives from Standard C++'s
        <classname>std::exception</classname> class. Since the library
        can indirectly cause exceptions to come from the Standard C++
        Library, it's possible to catch all exceptions from MySQL++
        by just catching <classname>std::exception</classname>.
        However, it's better to have individual catch blocks for
        each of the concrete exception types that you expect, and
        add a handler for either <classname>Exception</classname> or
        <classname>std::exception</classname> to act as a "catch-all"
        for unexpected exceptions.</para>

        <para>Some of these exceptions are optional. When exceptions
        are disabled on a MySQL++ object, it signals errors in some
        other way, typically by returning an error code or setting
        an error flag. Classes that support this feature derive
        from <ulink type="classref" url="OptionalExceptions"/>.
        Moreover, when such an object creates another object
        that also derives from this interface, it passes on its
        exception flag. Since everything flows from the <ulink
        type="classref" url="Connection"/> object, disabling
        exceptions on it at the start of the program disables all
        optional exceptions. You can see this technique at work in the
        <filename>simple[1-3]</filename> examples, which keeps them,
        well, simple.</para>

        <para>Real-world code typically can't afford to lose out on the
        additional information and control offered by exceptions. But
        at the same time, it is still sometimes useful to disable
        exceptions temporarily. To do this, put the section of
        code that you want to not throw exceptions inside a block,
        and create a <ulink type="classref" url="NoExceptions"/>
        object at the top of that block. When created, it saves the
        exception flag of the <classname>OptionalExceptions</classname>
        derivative you pass to it, and then disables exceptions
        on it. When the <classname>NoExceptions</classname>
        object goes out of scope at the end of the block,
        it restores the exceptions flag to its previous state.
        See <filename>examples/resetdb.cpp</filename> to see this
        technique at work.</para>

        <para>When one <classname>OptionalExceptions</classname>
        derivative passes its exceptions flag to another such object,
        it is only passing a copy. This means that the two objects'
        flags operate independently. There's no way to globally
        enable or disable this flag on existing objects in a single
        call. If you're using the <classname>NoExceptions</classname>
        feature and you're still seeing optional exceptions thrown, you
        disabled exceptions on the wrong object. The exception thrower
        could be unrelated to the object you disabled exceptions on,
        it could be its parent, or it could be a child created before
        you changed the exception throwing flag.</para>

        <para>Some of the exceptions MySQL++ can throw are not
        optional:</para>

        <itemizedlist>
            <listitem><para>The largest set of non-optional exceptions
            are those from the Standard C++ Library. For instance,
            if your code said "<varname>row[21]</varname>"
            on a row containing only 5 fields, the
            <classname>std::vector</classname> underlying the row
            object will throw an exception. (It will, that is,
            if it conforms to the standard.) You might consider
            wrapping your program's main loop in a try block catching
            <classname>std::exception</classname>s, just in case you
            trigger one of these exceptions.</para></listitem>

            <listitem><para><ulink type="classref" url="String"/> will
            always throw <ulink type="classref" url="BadConversion"/>
            when you ask it to do an improper type conversion. For
            example, you'll get an exception if you try to convert
            "1.25" to <type>int</type>, but not when you convert
            "1.00" to <type>int</type>. In the latter case, MySQL++
            knows that it can safely throw away the fractional
            part.</para></listitem>

            <listitem><para>If you use template queries and
            don't pass enough parameters when instantiating the
            template, <classname>Query</classname> will throw
            a <ulink type="classref" url="BadParamCount"/>
            exception.</para></listitem>

            <listitem><para>If you pass a bad option value to
            <methodname>Connection::set_option</methodname>, it will
            throw a <classname>BadOption</classname>
            exception.</para></listitem>
        </itemizedlist>

        <para>It's educational to modify the examples to force
        exceptions. For instance, misspell a field name, use
        an out-of-range index, or change a type to force a
        <classname>String</classname> conversion error.</para>
    </sect2>


    <sect2 id="qescape" xreflabel="quoting and escaping">
        <title>Quoting and Escaping</title>

        <para>SQL syntax often requires certain data to be
        quoted. Consider this query:</para>

        <programlisting>
SELECT * FROM stock WHERE item = 'Hotdog Buns' </programlisting>

        <para>Because the string "Hotdog Buns" contains a space,
        it must be quoted. With MySQL++, you don't have to add these
        quote marks manually:</para>

        <programlisting>
string s = "Hotdog Buns";
query &lt;&lt; "SELECT * FROM stock WHERE item = " &lt;&lt; quote_only &lt;&lt; s; </programlisting>

        <para>That code produces the same query string as in the
        previous example. We used the MySQL++ <type>quote_only</type>
        manipulator, which causes single quotes to be added
        around the next item inserted into the stream. This
        works for various string types, for any type of data
        that can be converted to MySQL++'s <ulink type="classref"
        url="SQLTypeAdapter">SQLTypeAdapter</ulink> type, and for <xref
        linkend="ssqls"/>. (The next section introduces the SSQLS
        feature.)</para>

        <para>Quoting is pretty simple, but SQL syntax also often
        requires that certain characters be "escaped". Imagine if the
        string in the previous example was "Frank's Brand Hotdog Buns"
        instead. The resulting query would be:</para>

        <programlisting>
SELECT * FROM stock WHERE item = 'Frank's Brand Hotdog Buns' </programlisting>

        <para>That's not valid SQL syntax. The correct syntax
        is:</para>

        <programlisting>
SELECT * FROM stock WHERE item = 'Frank''s Brand Hotdog Buns' </programlisting>

        <para>As you might expect, MySQL++ provides that feature,
        too, through its <type>escape</type> manipulator. But here,
        we want both quoting and escaping. That brings us to the most
        widely useful manipulator:</para>

        <programlisting>
string s = "Frank's Brand Hotdog Buns";
query &lt;&lt; "SELECT * FROM stock WHERE item = " &lt;&lt; quote &lt;&lt; s; </programlisting>

        <para>The <type>quote</type> manipulator both quotes strings
        and escapes any characters that are special in SQL.</para>

        <para>MySQL++ provides other manipulators as well. See
        the <ulink url="../refman/manip_8h.html">manip.h</ulink>
        page in the <ulink url="../refman/index.html">reference
        manual</ulink>.</para>

        <para>It's important to realize that MySQL++'s
        quoting and escaping mechanism is type-aware. It has
        no effect unless you insert the manipulator into a
        <classname>Query</classname> or <ulink type="classref"
        url="SQLQueryParms">SQLQueryParms</ulink> stream.
        <footnote><para><classname>SQLQueryParms</classname>
        is used as a stream only as an implementation
        detail within the library. End user code simply
        sees it as a <classname>std::vector</classname>
        derivative.</para></footnote> Also, values are only quoted
        and/or escaped if they are of a data type that may need it. For
        example, <ulink type="structref" url="Date">Date</ulink>
        must be quoted but never needs to be escaped, and integer
        types need neither quoting nor escaping. Manipulators are
        suggestions to the library, not commands: MySQL++ will
        ignore these suggestions if it knows it won't result in
        syntactically-incorrect SQL.</para>

        <para>It's also important to realize that as of MySQL++ v3,
        quoting and escaping in <classname>Query</classname> streams
        and template queries is never implicit.<footnote><para>By
        contrast, the <classname>Query</classname> methods that take
        <xref linkend="ssqls"/> <emphasis>do</emphasis> add quotes
        and escape strings implicitly. It can do this because SSQLS
        knows all the SQL code and data types, so it never has to guess
        whether quoting or escaping is appropriate.</para></footnote>
        You must use manipulators and template query flags as necessary
        to tell MySQL++ where quoting and escaping is necessary. It
        would be nice if MySQL++ could do quoting and escaping
        implicitly based on data type, but this isn't possible in
        all cases.<footnote id="whyexpmanip"><para>Unless you're
        smarter than I am, you don't immediately see why explicit
        manipulators are necessary. We can tell when quoting and
        escaping is <emphasis>not</emphasis> appropriate based on type,
        so doesn't that mean we know when it <emphasis>is</emphasis>
        appropriate?  Alas, no. For most data types, it is possible
        to know, or at least make an awfully good guess, but it's a
        complete toss-up for C strings, <type>const char*</type>. A C
        string could be either a literal string of SQL code, or it can
        be a value used in a query. Since there's no easy way to know
        and it would damage the library's usability to mandate that C
        strings only be used for one purpose or the other, the library
        requires you to be explicit.</para></footnote> Since MySQL++
        can't reliably guess when quoting and escaping is appropriate,
        and the programmer doesn't need to<footnote><para>One hopes
        the programmer <emphasis>knows</emphasis>.</para></footnote>,
        MySQL++ makes you tell it.</para>
    </sect2>


    <sect2>
        <title>Specialized SQL Structures</title>

        <sect3>
            <title>Retrieving data</title>

            <para>The next example introduces one of the most powerful
            features of MySQL++: <xref linkend="ssqls"/> (SSQLS). This
            is <filename>examples/custom1.cpp</filename>:</para>

            <programlisting><xi:include href="custom1.txt" parse="text" 
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>Here is the stock.h header used by that example,
            and many others:</para>

            <programlisting><xi:include href="stock.txt" parse="text"
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>As you can see, SSQLS is very powerful. It allows
            you to have a C++ structure paralleling your SQL table
            structure and use it easily with STL code.</para>
        </sect3>

        <sect3>
            <title>Adding data</title>

            <para>SSQLS can also be used to add data to a table. This
            is <filename>examples/custom2.cpp</filename>:</para>

            <programlisting><xi:include href="custom2.txt" parse="text" 
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>That's all there is to it!</para>

            <para>There is one subtlety: MySQL++ automatically quotes
            and escapes the data when building SQL queries using SSQLS
            structures. It's efficient, too: MySQL++ is smart enough
            to apply quoting and escaping only for those data types
            that actually require it.</para>

            <para>Because this example modifies the sample database,
            you may want to run resetdb after running this
            program.</para>
        </sect3>

        <sect3>
            <title>Modifying data</title>

            <para>It almost as easy to modify data with SSQLS. This
            is <filename>examples/custom3.cpp</filename>:</para>

            <programlisting><xi:include href="custom3.txt" parse="text"
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>When you run the example you will notice that in the
            WHERE clause only the 'item' field is checked for. This
            is because SSQLS also also less-than-comparable.</para>

            <para>Don't forget to run resetdb after running the
            example.</para>
        </sect3>

        <sect3>
            <title>Less-than-comparable</title>

            <para>SSQLS structures can be sorted and
            stored in STL associative containers as
            demonstrated in the next example. This is
            <filename>examples/custom4.cpp</filename>:</para>

            <programlisting><xi:include href="custom4.txt" parse="text"
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>For more details on the SSQLS feature, see the
            <xref linkend="ssqls"/> chapter.</para>
        </sect3>
    </sect2>


    <sect2>
        <title>C++ Equivalents of SQL Column Types</title>

        <para>In MySQL++ version 2.1, the new
        <filename>sql_types.h</filename> header declares typedefs
        for all MySQL column types. These typedefs all begin with
        <classname>sql_</classname> and end with a lowercase version of
        the standard SQL type name. For instance, the MySQL++ typedef
        corresponding to <classname>TINYINT UNSIGNED</classname>
        is <classname>mysqlpp::sql_tinyint_unsigned</classname>.
        You do not have to use these typedefs; you could use an
        <classname>unsigned char</classname> here if you wanted to. For
        that matter, you could use a plain <classname>int</classname>
        in most cases; MySQL++ is quite tolerant of this sort of
        thing. The typedefs exist for style reasons, for those who
        want their C++ code to use the closest equivalent type for
        any given SQL type.</para>

        <para>Most of these typedefs use standard C++ data types, but
        a few are aliases for a MySQL++ specific type. For instance,
        the SQL type <classname>DATETIME</classname> is mirrored in
        MySQL++ by <classname>mysqlpp::DateTime</classname>. For
        consistency, <filename>sql_types.h</filename> includes a
        typedef alias for <classname>DateTime</classname> called
        <classname>mysqlpp::sql_datetime</classname>.</para>
    </sect2>


    <sect2>
        <title>Handling SQL Nulls</title>

        <para>There is no equivalent of SQL's null in the standard C++
        type system.</para>

        <para>The primary distinction is one of type: in SQL, null
        is a column attribute, which affects whether that column
        can hold a SQL null. Just like the <symbol>const</symbol>
        keyword in the C++ type system, this effectively doubles the
        number of SQL data types. To emulate this, MySQL++ provides
        the <ulink type="classref" url="null">Null</ulink> template
        to allow the creation of distinct "nullable" versions of
        existing C++ types. So for example, if you have a <type>TINY
        INT UNSIGNED</type> column that can have nulls, the proper
        declaration for MySQL++ would be:</para>

        <programlisting>
mysqlpp::Null&lt;mysqlpp::sql_tinyint_unsigned&gt; myfield;</programlisting>

        <para>Template instantiations are first-class types in
        the C++ language, on par with any other type. You can
        use <classname>Null</classname> template instantiations
        anywhere you'd use the plain version of that type. (You can
        see a complete list of <classname>Null</classname> template
        instantiations for all column types that MySQL understands
        at the top of <filename>lib/type_info.cpp</filename>.)</para>

        <para>There's a secondary distinction between SQL null and
        anything available in the standard C++ type system: SQL null
        is a distinct value, equal to nothing else. We can't use
        C++'s <symbol>NULL</symbol> for this because it is ambiguous,
        being equal to 0 in integer context. MySQL++ provides the
        global <varname>null</varname> object, which you can assign
        to a <classname>Null</classname> template instance to make
        it equal to SQL null:</para>

        <programlisting>
myfield = mysqlpp::null;</programlisting>

        <para>The final aspect of MySQL++'s null handling is that,
        by default, it will enforce the uniqueness of the SQL null
        value. If you try to convert a SQL null to a plain C++
        data type, MySQL++ will throw a <ulink type="classref"
        url="BadNullConversion"/> exception. If you insert
        a SQL null into a C++ stream, you get "(NULL)". If
        you don't like this behavior, you can change it, by
        passing a different value for the second parameter to
        template <classname>Null</classname>. By default, this
        parameter is <ulink type="structref" url="NullIsNull"/>,
        meaning that we should enforce the uniqueness of the null
        type. To relax this distinction, you can instantiate the
        <classname>Null</classname> template with a different
        behavior type: <ulink type="structref" url="NullIsZero"/>
        or <ulink type="structref" url="NullIsBlank"/>. Consider
        this code:</para>

        <programlisting>
mysqlpp::Null&lt;unsigned char, mysqlpp::NullIsZero&gt; myfield;

myfield = mysqlpp::null;
cout &lt;&lt; myfield &lt;&lt; endl;

int x = myfield;
cout &lt;&lt; x &lt;&lt; endl;</programlisting>

        <para>This will print "0" twice. If you had used the
        default for the second <classname>Null</classname>
        template parameter, the first output statement would
        have printed "(NULL)", and the second would have thrown a
        <classname>BadNullConversion</classname> exception.</para>
    </sect2>


    <sect2>
        <title>Using Transactions</title>

        <para>MySQL++ v2.1 added the <ulink type="classref"
        url="Transaction"/> class, which makes it easier to use
        transactions in an exception-safe manner. Normally you create
        the <classname>Transaction</classname> object on the stack
        before you issue the queries in your transaction set. Then,
        when all the queries in the transaction set have been issued,
        you call <function>Transaction::commit()</function>,
        which commits the transaction set. If the
        <classname>Transaction</classname> object goes out of scope
        before you call <function>commit()</function>, the transaction
        set is rolled back. This ensures that if some code throws an
        exception after the transaction is started but before it is
        committed, the transaction isn't left unresolved.</para>

        <para><filename>examples/transaction.cpp</filename> illustrates
        this:</para>

        <programlisting><xi:include href="transaction.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>One of the downsides of transactions is that the locking
        it requires in the database server is prone to deadlocks. The
        classic case where this happens is when two programs both want
        access to the same two rows within a single transaction each,
        but they modify them in opposite orders. If the timing is
        such that the programs interleave their lock acquisitions,
        the two come to an impasse: neither can get access to the
        other row they want to modify until the other program commits
        its transaction and thus release the row locks, but neither
        can finish the transaction because they're waiting on row
        locks the database server is holding on behalf of the other
        program.</para>

        <para>The MySQL server is smart enough to detect this
        condition, but the best it can do is abort the second
        transaction. This breaks the impasse, allowing the first
        program to complete its transaction.</para>

        <para>The second program now has to deal with the fact that its
        transaction just got aborted. There's a subtlety in detecting
        this situation when using MySQL++. By default, MySQL++ signals
        errors like these with exceptions. In the exception handler,
        you might expect to get <constant>ER_LOCK_DEADLOCK</constant>
        from <methodname>Query::errnum()</methodname> (or
        <methodname>Connection::errnum()</methodname>, same thing),
        but what you'll almost certainly get instead is 0, meaning
        "no error." Why? It's because you're probably using a
        <classname>Transaction</classname> object to get automatic
        roll-backs in the face of exceptions. In this case, the
        roll-back happens before your exception handler is called by
        issuing a <command>ROLLBACK</command> query to the database
        server. Thus, <methodname>Query::errnum()</methodname> returns
        the error code associated with this roll-back query, not the
        deadlocked transaction that caused the exception.</para>

        <para>To avoid this problem, a few of the exception objects
        as of MySQL++ v3.0 include this last error number in the
        exception object itself. It's populated at the point of the
        exception, so it can differ from the value you would get from
        <methodname>Query::errnum()</methodname> later on when the
        exception handler runs.</para>

        <para>The example <filename>examples/deadlock.cpp</filename>
        demonstrates the problem:</para>

        <programlisting><xi:include href="deadlock.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>This example works a little differently than the others.
        You run one copy of the example, then when it pauses waiting
        for you to press <keycap>Enter</keycap>, you run another copy.
        Then, depending on which one you press <keycap>Enter</keycap>
        in, one of the two will abort with the deadlock exception. You
        can see from the error message you get that it matters which
        method you call to get the error number. What you do about
        it is up to you as it depends on your program's design and
        system architecture.</para>
    </sect2>


    <sect2 id="querytypes">
        <title>Which Query Type to Use?</title>

        <para>There are three major ways to execute a query in
        MySQL++: <methodname>Query::execute()</methodname>,
        <methodname>Query::store()</methodname>, and
        <methodname>Query::use()</methodname>. Which should you use,
        and why?</para>

        <para><methodname>execute()</methodname> is for queries
        that do not return data <emphasis>per se</emphasis>. For
        instance, <command>CREATE INDEX</command>. You do
        get back some information from the MySQL server, which
        <methodname>execute()</methodname> returns to its caller in a
        <ulink type="classref" url="ResNSel"/> object. In addition to
        the obvious &mdash; a flag stating whether the query succeeded
        or not &mdash; this object also contains things like the
        number of rows that the query affected. If you only need the
        success status, there's <methodname>Query::exec()</methodname>,
        which just returns bool.</para>

        <para>If your query does pull data from the database, the
        simplest option is <methodname>store()</methodname>. (All
        of the examples up to this point have used this method.)
        This returns a <ulink type="classref" url="Result"/> object,
        which contains the entire result set. The nice thing about
        this is that <classname>Result</classname> is a random-access
        container, like <classname>std::vector</classname>, so you can
        iterate through it forwards and backwards, access elements with
        subscript notation, etc. If you'd rather store the result set
        in an STL container instead of a <classname>Result</classname>
        object, you can use <methodname>storein()</methodname>
        instead.</para>

        <para><methodname>store*()</methodname> queries are convenient,
        but the cost of keeping the entire result set in main memory
        can sometimes be too high. It can be surprisingly costly,
        in fact. A MySQL database server stores data compactly on
        disk, but it returns query data to the client in a textual
        form. This results in a kind of data bloat that affects
        numeric and BLOB types the most. MySQL++ and the underlying C
        API library also have their own memory overheads in addition
        to this. So, if you happen to know that the database server
        stores every record of a particular table in 1 KB, pulling
        a million records from that table could easily take several
        GB of memory with a <methodname>store()</methodname> query,
        depending on what's actually stored in that table.</para>

        <para>For these large result sets, the superior option
        is a <methodname>use()</methodname> query. This returns
        a <ulink type="classref" url="ResUse"/> object, which is
        similar to <classname>Result</classname>, but without
        all of the random-access features. This is because a
        "use" query tells the database server to send the results
        back one row at a time, to be processed linearly. It's
        analogous to a C++ stream's input iterator, as opposed
        to a random-access iterator that a container like vector
        offers. By accepting this limitation, you can process
        arbitrarily large result sets. This technique is demonstrated
        in <filename>examples/simple3.cpp</filename>:</para>

        <programlisting><xi:include href="simple3.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>This example does the same thing as
        <filename>simple2</filename>, only with a "use" query instead
        of a "store" query. If your program uses exceptions, you should
        instead look at <filename>examples/usequery.cpp</filename>,
        which does the same thing as <filename>simple3</filename>,
        but with exception-awareness.</para>

        <para>Valuable as <methodname>use()</methodname> queries are,
        they should not be the first resort in solving problems of
        excessive memory use. It's better if you can find a way to
        simply not pull as much data from the database in the first
        place. Maybe you're saying <command>SELECT *</command> even
        though you don't immedidately need all the columns from the
        table. Or, maybe you're filtering the result set with C++ code
        after you get it from the database server. If you can do that
        filtering with a more restrictive <command>WHERE</command>
        clause on the <command>SELECT</command>, it'll not only save
        memory, it'll save bandwidth between the database server
        and client, and can even save CPU time. If the filtering
        criteria can't be expressed in a <command>WHERE</command>
        clause, however, read on to the next section.</para>
    </sect2>


    <sect2 id="store_if">
        <title>Conditional Result Row Handling</title>

        <para>Sometimes you must pull more data from the database
        server than you actually need and filter it in memory. SQL's
        <command>WHERE</command> clause is powerful, but not as
        powerful as C++. Instead of storing the full result set and
        then picking over it to find the rows you want to keep,
        use <methodname>Query::store_if()</methodname>. This is
        <filename>examples/store_if.cpp</filename>:</para>

        <programlisting><xi:include href="store_if.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>I doubt anyone really needs to select rows from
        a table that have a prime number in a given field. This
        example is meant to be just barely more complex than SQL can
        manage, to avoid obscuring the point. That point being, the
        <methodname>Query::store_if()</methodname> call here gives
        you a container full of results meeting a criterion that you
        probably can't express in SQL. You will no doubt have much
        more useful criteria in your own programs.</para>

        <para>If you need a more complex query than the one
        <methodname>store_if()</methodname> knows how to build when
        given an SSQLS examplar, there are two overloads that let
        you use your own query string. One overload takes the query
        string directly, and the other uses the query string built
        with <classname>Query</classname>'s stream interface.</para>
    </sect2>


    <sect2>
        <title>Executing Code for Each Row In a Result Set</title>

        <para>SQL is more than just a database query language. Modern
        database engines can actually do some calculations on the data
        on the server side. But, this isn't always the best way to
        get something done. When you need to mix code and a query,
        MySQL++'s new <methodname>Query::for_each()</methodname>
        facility might be just what you need. This is
        <filename>examples/for_each.cpp</filename>:</para>

        <programlisting><xi:include href="for_each.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>You only need to read the <function>main()</function>
        function to get a good idea of what the program
        does. The key line of code passes an SSQLS examplar and
        a functor to <methodname>Query::for_each()</methodname>.
        <methodname>for_each()</methodname> uses the SSQLS instance to
        build a <computeroutput>select * from TABLE</computeroutput>
        query, <computeroutput>stock</computeroutput> in
        this case. It runs that query internally, calling
        <classname>gather_stock_stats</classname> on each row. This
        is a pretty contrived example; you could actually do this in
        SQL, but we're trying to prevent the complexity of the code
        from getting in the way of the demonstration here.</para>

        <para>Just as with <methodname>store_if()</methodname>,
        described above, there are two other overloads for
        <methodname>for_each()</methodname> that let you use your
        own query string.</para>
    </sect2>


    <sect2>
        <title>Getting Field Meta-Information</title>

        <para>The following example demonstrates how to get
        information about the fields in a result set, such
        as the name of the field and the SQL type. This is
        <filename>examples/fieldinf.cpp</filename>:</para>

        <programlisting><xi:include href="fieldinf.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
    </sect2>


    <sect2>
        <title>MySQL++'s Special String Types</title>

        <para>MySQL++ has two classes that work like
        <classname>std::string</classname> to some degree: <ulink
        type="classref" url="String"/> and <ulink type="classref"
        url="SQLTypeAdapter"/>. These classes exist to provide
        functionality that <classname>std::string</classname>
        doesn't provide, but they are neither derivatives of nor
        complete supersets of <classname>std::string</classname>.
        As a result, end-user code generally doesn't deal with these
        classes directly, because <classname>std::string</classname>
        is a better general-purpose string type. In fact, MySQL++
        itself uses <classname>std::string</classname> most of the
        time, too. But, the places these specialized stringish types
        do get used are so important to the way MySQL++ works that
        it's well worth taking the time to understand them.</para>


        <sect3>
            <title>SQLTypeAdapter</title>

            <para>The simpler of the two is
            <classname>SQLTypeAdapter</classname>,
            or <classname>STA</classname> for
            short.<footnote><para>In version 2 of MySQL++ and
            earlier, <classname>SQLTypeAdapter</classname> was
            called <classname>SQLString</classname>, but it was
            confusing because its name and the fact that it derived
            from <classname>std::string</classname> suggested that
            it was a general-purpose string type. MySQL++ even used
            it this way in a few places internally. In v3, we made it
            a simple base class and renamed it to reflect its proper
            limited function.</para></footnote></para>

            <para>As its name suggests, its only purpose is to
            adapt other data types to be used with SQL. It has a
            whole bunch of conversion constructors, one for all data
            types we expect to be used with MySQL++ for values in
            queries. SQL queries are strings, so constructors that take
            stringish types just make a copy of that string, and all
            the others "stringize" the value in the format needed by
            SQL.<footnote><para><classname>SQLTypeAdapter</classname>
            doesn't do <xref linkend="qescape"/> itself. That
            happens elsewhere, right at the point that the
            <classname>STA</classname> gets used to build a
            query.</para></footnote> The conversion constructors
            preserve type information, so this stringization process
            doesn't throw away any essential information.</para>

            <para><classname>STA</classname> is used anywhere
            MySQL++ needs to be able to accept any of several
            data types for use in a SQL query. Major users
            are <classname>Query</classname>'s template query
            mechanism and the <classname>Query</classname>
            stream quoting and escaping mechanism. You
            care about <classname>STA</classname> because
            any time you pass a data value to MySQL++ to
            be used in building a SQL query, it goes through
            <classname>STA</classname>. <classname>STA</classname>
            is one of the key pieces in MySQL++ that makes it easy
            to generate syntactically-correct SQL queries.</para>
        </sect3>


        <sect3>
            <title>String</title>

            <para>If MySQL++ can be said to have its own generic
            string type, it's <classname>String</classname>,
            but it's not really functional enough for general
            use. It's possible that in future versions of MySQL++
            we'll expand its interface to include everything
            <classname>std::string</classname> does, so that's why
            it's called that.<footnote><para>If you used MySQL++
            before v3, <classname>String</classname> used to be
            called <classname>ColData</classname>. It was renamed
            because starting in v2.3, we began using it for holding
            more than just column data. I considered renaming it
            <classname>SQLString</classname> instead, but that would
            have confused old MySQL++ users to no end. Instead,
            I followed the example of <classname>Set</classname>,
            MySQL++'s specialized <classname>std::set</classname>
            variant.</para></footnote></para>

            <para>The key thing <classname>String</classname>
            provides over <classname>std::string</classname>
            is conversion of strings in SQL value formats to
            their native C++ data types. For example, if you
            initialize it with the string "2007-11-19", you can
            assign the <classname>String</classname> to a <ulink
            type="structref" url="Date">Date</ulink>, not because
            <classname>Date</classname> knows how to initialize
            itself from <classname>String</classname>, but the
            reverse: <classname>String</classname> has a bunch of
            implicit conversion operators defined for it, so you
            can use it in any type context that makes sense in your
            application.</para>

            <para>Because <methodname>Row::operator[]</methodname>
            returns <classname>String</classname>, you can say things
            like this:</para>

            <programlisting>int x = row["x"];</programlisting>

            <para>In a very real sense, <classname>String</classname>
            is the inverse of <classname>STA</classname>:
            <classname>String</classname> converts SQL value strings to
            C++ data types, and <classname>STA</classname> converts C++
            data types to SQL value strings.<footnote><para>During
            the development of MySQL++ v3.0, I tried
            merging <classname>SQLTypeAdapter</classname> and
            <classname>String</classname> into a single class to
            take advantage of this. The resulting class gave the C++
            compiler the freedom to tie itself up in knots, because
            it was then allowed to convert almost any data type
            to almost any other. You'd get a tangle of ambiguous
            data type conversion errors from the most innocent
            code.</para></footnote></para>

            <para><classname>String</classname> has two main
            uses.</para>

            <para>By far the most common use is as the
            field value type of <classname>Row</classname>,
            as exemplified above. It's not just the return
            type of <methodname>Row::operator[]</methodname>,
            though: it's actually the value type used within
            <classname>Row</classname>'s internal array. As a result,
            any time MySQL++ pulls data from the database, it goes
            through <classname>String</classname> when converting
            it from the string form used in SQL result sets to the
            C++ data type you actually want the data in. It's the
            core of the structure population mechanism in <xref
            linkend="ssqls"/>, for example.</para>

            <para>Because <classname>String</classname> is the
            last pristine form of data in a result set before
            it gets out of MySQL++'s internals where end-user
            code can see it, MySQL++'s <type>sql_blob</type>
            and related <type>typedef</type>s are aliases for
            <classname>String</classname>. Using anything else would
            require copies; while the whole "networked database server"
            thing means most of MySQL++ can be quite inefficient and
            still not affect benchmark results meaningfully, BLOBs
            tend to be big, so making unnecessary copies can really
            make a difference. Which brings us to...</para>
        </sect3>


        <sect3>
            <title>Reference Counting</title>

            <para>To avoid unnecessary buffer
            copies, both <classname>STA</classname> and
            <classname>String</classname> are implemented in terms
            of a reference-counted copy-on-write buffer scheme. Both
            classes share the same underlying mechanism, and so are
            interoperable. This means that if you construct one of
            these objects from another, it doesn't actually copy the
            string data, it only copies a pointer to the data buffer,
            and increments its reference count. If the object has
            new data assigned to it or it's otherwise modified, it
            decrements its reference count and creates its own copy
            of the buffer. This has a lot of practical import, such
            as the fact that <methodname>Row::operator[]</methodname>
            can return <classname>String</classname> by value, and
            it's still efficient.</para>
        </sect3>
    </sect2>


    <sect2>
        <title>Dealing with Binary Data</title>

        <para>The tricky part about dealing with binary data in
        MySQL++ is to ensure that you don't ever treat the data as a
        C string, which is really easy to do accidentally. C strings
        treat zero bytes as special end-of-string characters, but
        they're not special at all in binary data. Recent releases
        of MySQL++ do a better job of letting you keep data in
        forms that don't have this problem, but it's still possible
        to do it incorrectly. These examples demonstrate correct
        techniques.</para>

        <sect3>
            <title>Loading a binary file into a BLOB column</title>

            <para>This example shows how to insert binary data
            into a MySQL table's BLOB column with MySQL++,
            and also how to get the value of the auto-increment
            column from the previous insert. (This MySQL feature
            is usually used to create unique IDs for rows as
            they're inserted.) The program requires one command
            line parameter over that required by the other examples
            you've seen so far, the path to a JPEG file. This is
            <filename>examples/load_jpeg.cpp</filename>:</para>

            <programlisting><xi:include href="load_jpeg.txt" parse="text"
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>Notice that we used the <type>escape</type>
            manipulator when building the INSERT query above. This
            is because we're not using one of the MySQL++ types that
            does automatic escaping and quoting.</para>
        </sect3>

        <sect3>
            <title>Serving images from BLOB column via CGI</title>

            <para>This example is also a very short one, considering
            the function that it performs. It retreives data loaded
            by <filename>load_jpeg</filename> and prints it out in
            the form a web server can accept for a CGI call. This
            is <filename>examples/cgi_jpeg.cpp</filename>:</para>

            <programlisting><xi:include href="cgi_jpeg.txt" parse="text"
            xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

            <para>You install this in a web server's CGI
            program directory, then call it with a URL like
            <uri>http://my.server.com/cgi-bin/cgi_jpeg?id=1</uri>.
            That retrieves the JPEG with ID 1 from the table and
            returns it to the web server, which will send it on to
            the browser.</para>
        </sect3>
    </sect2>


    <sect2 id="concurrentqueries">
        <title>Concurrent Queries on a Connection</title>

        <para>An important limitation of the MySQL C API library
        &mdash; which MySQL++ is built atop, so it shares this
        limitation &mdash; is that you can't have two concurrent
        queries running on a single connection. If you try, you get an
        obscure error message about "Commands out of sync" from the
        underlying C API library. (You get it in a MySQL++ exception
        unless you have exceptions disabled, in which case you get a
        failure code and <methodname>Connection::error()</methodname>
        returns this message.)</para>

        <para>The easiest way to cause this error is in a multithreaded
        program where you have a single <ulink type="classref"
        url="Connection"/> object, but allow multiple threads to issue
        queries on it. Unless you put in a lot of work to synchronize
        access, this is almost guaranteed to fail.</para>

        <para>If you give each thread that issues queries has
        its own <classname>Connection</classname> object, you can
        still run into trouble if you pass the data you get from
        queries around to other threads. What can happen is that
        one of these child objects indirectly calls back to the
        <classname>Connection</classname> at a time where it's involved
        with another query. (There are other ways to run into trouble
        when sharing MySQL++ data structures among threads, but the
        whole topic is complex enough to deserve its own chapter,
        <xref linkend="threads"/>.)</para>

        <para>It's possible to run into this problem in a
        single-threaded program as well. As discussed above (<xref
        linkend="querytypes"/>), one of the options MySQL offers for
        executing a query lets you issue the query, then consume the
        rows one at a time, on demand: it's the "use" query. If you
        don't consume all rows from a query before you issue another
        on that connection, you are effectively trying to have multiple
        concurrent queries on a single connection, and you end up with
        the same problem. The simplest recipie for disaster is:</para>

        <programlisting>
Result r1 = query.use("select garbage from plink where foobie='tamagotchi'");
Result r2 = query.use("select blah from bonk where bletch='smurf'");</programlisting>

        <para>The second <methodname>use()</methodname> call fails
        because the first result set hasn't been consumed yet.</para>
    </sect2>
</sect1>


<sect1 id="tquery" xreflabel="Template Queries">
    <title>Template Queries</title>

    <para>Another powerful feature of MySQL++ is being able
    to set up template queries. These are kind of like C's
    <function>printf()</function> facility: you give MySQL++ a string
    containing the fixed parts of the query and placeholders for
    the variable parts, and you can later substitute in values into
    those placeholders.</para>

    <para>The following program demonstrates how to use this
    feature. This is <filename>examples/tquery1.cpp</filename>:</para>

    <programlisting><xi:include href="tquery1.txt" parse="text" 
    xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

    <para>The line just before the call to
    <methodname>query.parse()</methodname> sets the template, and the
    parse call puts it into effect. From that point on, you can re-use
    this query by calling any of several Query member functions that
    accept query template parameters. In this example, we're using
    <methodname>Query::execute()</methodname>.</para>

    <para>Let's dig into this feature a little deeper.</para>


    <sect2>
        <title>Setting up Template Queries</title>

        <para>To set up a template query, you simply insert it into the
        Query object, using numbered placeholders wherever you want
        to be able to change the query. Then, you call the parse()
        function to tell the Query object that the query string is
        a template query, and it needs to parse it:</para>

        <programlisting>
query &lt;&lt; "select (%2:field1, %3:field2) from stock where %1:wheref = %0q:what";
query.parse();</programlisting>

        <para>The format of the placeholder is:</para>

        <programlisting>
%###(modifier)(:name)(:)</programlisting>

        <para>Where '###' is a number up to three digits. It is
        the order of parameters given to a <ulink type="classref"
        url="SQLQueryParms"/> object, starting from 0.</para>

        <para>'modifier' can be any one of the following:</para>

        <blockquote>
        <informaltable frame="none">
        <tgroup cols="2">
        <colspec colsep="1" rowsep="1"/>
        <tbody>
            <row>
                <entry><emphasis role="bold">%</emphasis></entry>
                <entry>Print an actual "%"</entry>
            </row>

            <row>
                <entry><emphasis role="bold">""</emphasis></entry>
                <entry>Don't quote or escape no matter what.</entry>
            </row>

            <row>
                <entry><emphasis role="bold">q</emphasis></entry>
                <entry>This will escape the item using the MySQL
                C API function <ulink url="mysql-escape-string"
                type="mysqlapi"/> and add single quotes around it
                as necessary, depending on the type of the value
                you use.</entry>
            </row>

            <row>
                <entry><emphasis role="bold">Q</emphasis></entry>
                <entry>Quote but don't escape based on the same rules
                as for 'q'. This can save a bit of processing time
                if you know the strings will never need quoting</entry>
            </row>
        </tbody>
        </tgroup>
        </informaltable>
        </blockquote>

        <para>":name" is for an optional name which aids in filling
        SQLQueryParms. Name can contain any alpha-numeric characters
        or the underscore. You can have a trailing colon, which will
        be ignored. If you need to represent an actual colon after
        the name, follow the name with two colons. The first one will
        end the name and the second one won't be processed.</para>
    </sect2>


    <sect2>
        <title>Setting the Parameters at Execution Time</title>

        <para>To specify the parameters when you want to execute
        a query simply use <methodname>Query::store(const
        SQLString &amp;parm0, [..., const SQLString
        &amp;parm11])</methodname>. This type of multiple overload
        also exists for <methodname>Query::storein()</methodname>,
        <methodname>Query::use()</methodname> and
        <methodname>Query::execute()</methodname>. 'parm0'
        corresponds to the first parameter, etc. You may specify up
        to 25 parameters. For example:</para>

        <programlisting>
Result res = query.store("Dinner Rolls", "item", "item", "price")</programlisting>

        <para>with the template query provided above would
        produce:</para>

        <programlisting>
select (item, price) from stock where item = "Dinner Rolls"</programlisting>

        <para>The reason we didn't put the template parameters in
        numeric order...</para>

        <programlisting>
select (%0:field1, %1:field2) from stock where %2:wheref = %3q:what</programlisting>

        <para>...will become apparent shortly.</para>
    </sect2>


    <sect2>
        <title>Parameter Types and Function Overloads</title>

        <para>There are quite a few overloads for each of
        <classname>Query</classname>'s query execution
        functions. (<methodname>store()</methodname>,
        <methodname>use()</methodname>,
        <methodname>execute()</methodname>...) It's possible to
        have code that looks like it should work, but which doesn't,
        because it's calling the wrong overload. For instance:</para>

        <programlisting>
query.storein(my_vector, "1");
query.storein(my_vector, 1);</programlisting>

        <para>The first one works, and the second does
        not. The cause is a vestigial second parameter to one
        of <methodname>storein()</methodname>'s overloads that's
        compatible with integers. Being vestigial, it's only getting
        in the way right now, but we can't fix it until the next
        major version of the libary, where it will be okay to break
        the ABI. Until then, we're stuck with it.</para>

        <para>If the MySQL server keeps rejecting your template
        queries, try explicitly casting the parameters to
        <classname>SQLString</classname>:</para>

        <programlisting>
query.storein(my_vector, SQLString(1));</programlisting>

        <para>This ensures that your code calls one of the overloads
        meant to handle template query parameters. I don't recommend
        doing this habitually, because it will clutter your code. For
        the most part, MySQL++'s interface is set up to do the right
        thing. It's just that there are still a few corner cases
        that can't be fixed until the next time we can redesign the
        interface.</para>
    </sect2>

    <sect2>
        <title>Default Parameters</title>

        <para>The template query mechanism allows you to set
        default parameter values. You simply assign a value
        for the parameter to the appropriate position in the
        <varname>Query::template_defaults</varname> array. You can
        refer to the parameters either by position or by name:</para>

        <programlisting>
query.template_defaults[1] = "item";
query.template_defaults["wheref"] = "item";</programlisting>

        <para>Both do the same thing.</para>

        <para>This mechanism works much like C++'s default function
        parameter mechanism: if you set defaults for the parameters at
        the end of the list, you can call one of
        <classname>Query</classname>'s query execution methods without
        passing all of the values. If the query takes four parameters
        and you've set defaults for the last three, you can execute the
        query using as little as just one explicit parameter.</para>

        <para>Now you can see why we numbered the template query
        parameters the way we did a few sections earlier. We ordered
        them so that the ones less likely to change have higher
        numbers, so we don't always have to pass them. We can just give
        them defaults and take those defaults when applicable. This
        is most useful when some parameters in a template query vary
        less often than other parameters. For example:</para>

        <programlisting>
query.template_defaults["field1"] = "item"; 
query.template_defaults["field2"] = "price"; 
Result res1 = query.store("Hamburger Buns", "item"); 
Result res2 = query.store(1.25, "price"); </programlisting>

        <para>This stores the result of the following queries
        in <varname>res1</varname> and <varname>res2</varname>,
        respectively:</para>

        <programlisting>
select (item, price) from stock where item = "Hamburger Buns"
select (item, price) from stock where price = 1.25</programlisting>

        <para>Default parameters are useful in this example because
        we have two queries to issue, and parameters 2 and 3 remain
        the same for both, while parameters 0 and 1 vary.</para>

        <para>Some have been tempted into using this mechanism as a
        way to set all of the template parameters in a query:</para>

        <programlisting>
query.template_defaults["what"] = "Hamburger Buns";
query.template_defaults["wheref"] = "item";
query.template_defaults["field1"] = "item"; 
query.template_defaults["field2"] = "price"; 
Result res1 = query.store();</programlisting>

        <para>This can work, but it is <emphasis>not designed
        to</emphasis>. In fact, it's known to fail horribly in one
        common case. You will not get sympathy if you complain on
        the mailing list about it not working. If your code doesn't
        actively reuse at least one of the parameters in subsequent
        queries, you're abusing MySQL++, and it is likely to take
        its revenge on you.</para>
    </sect2>


    <sect2>
        <title>Error Handling</title>

        <para>If for some reason you did not specify all
        the parameters when executing the query and the
        remaining parameters do not have their values set
        via <varname>Query::template_defaults</varname>, the
        query object will throw a <ulink type="classref"
        url="BadParamCount"/> object. If this happens, you
        can get an explanation of what happened by calling
        <methodname>BadParamCount::what()</methodname>, like so:</para>

        <programlisting>
query.template_defaults["field1"] = "item"; 
query.template_defaults["field2"] = "price"; 
Result res = query.store(1.25); </programlisting>

        <para>This would throw <classname>BadParamCount</classname>
        because the <varname>wheref</varname> is not specified.</para>

        <para>In theory, this exception should never be thrown. If
        the exception is thrown it probably a logic error in your
        program.</para>
    </sect2>
</sect1>


<sect1 id="ssqls" xreflabel="Specialized SQL Structures">
    <title>Specialized SQL Structures</title>

    <para>The Specialized SQL Structure (SSQLS) feature lets you
    easily define C++ structures that match the form of your SQL
    tables. Because of the extra functionality that this feature builds
    into these structures, MySQL++ can populate them automatically
    when retrieving data from the database; with queries returning
    many records, you can ask MySQL++ to populate an STL container of
    your SSQLS records with the results. When updating the database,
    MySQL++ can use SSQLS structures to match existing data, and it
    can insert SSQLS structures directly into the database.</para>

    <para>You define an SSQLS using one of several macros. (These
    are in the file custom.h, and in the file that it includes,
    custom-macros.h.) There are a bunch of different macros, for
    different purposes. The following sections will discuss each macro
    type separately, beginning with the easiest and most generally
    useful.</para>


    <sect2>
        <title>sql_create</title>

        <para>This is the most basic sort of SSQLS declaration:</para>

        <programlisting>
sql_create_5(stock, 1, 0,
    string, item,
    int, num,                  
    double, weight,  
    double, price,  
    mysqlpp::Date, date)</programlisting>

        <para>This creates a C++ structure called
        <classname>stock</classname> containing five member
        variables (<varname>item</varname>, <varname>num</varname>,
        <varname>weight</varname>, <varname>price</varname> and
        <varname>date</varname>), along with some constructors and
        other member functions useful with MySQL++.</para>

        <para>One of the generated constructors takes a reference
        to a mysqlpp::Row object, allowing you to easily populate a
        vector of stocks like so:</para>

        <programlisting>
vector&lt;stock&gt; result; 
query.storein(result);</programlisting>

        <para>That's all there is to it. The only requirements are
        that the table structure be compatible with the SSQLS's member
        variables, and that the fields are in the same order.</para>

        <para>The general format of this set of macros is:</para>

        <programlisting>
sql_create_#(NAME, COMPCOUNT, SETCOUNT, TYPE1, ITEM1, ... TYPE#, ITEM#)</programlisting>

        <para>Where # is the number of member variables,
        <parameter>NAME</parameter> is the name of the structure you
        wish to create, <parameter>TYPEx</parameter> is the type of
        a member variable, and <parameter>ITEMx</parameter> is that
        variable's name.</para>

        <para>The <parameter>COMPCOUNT</parameter> and
        <parameter>SETCOUNT</parameter> arguments are described in
        the next section.</para>
    </sect2>


    <sect2>
        <title>SSQLS Comparison and Initialization</title>

        <para><varname>sql_create_</varname><emphasis>x</emphasis>
        adds member functions and operators to each SSQLS that
        allow you to compare one SSQLS instance to another. These
        functions compare the first <parameter>COMPCOUNT</parameter>
        fields in the structure. In the example above,
        <parameter>COMPCOUNT</parameter> is 1, so only the
        <varname>item</varname> field will be checked when comparing
        two <classname>stock</classname> structures.</para>

        <para>This feature works best when your table's "key"
        fields are the first ones in the table schema and you set
        <parameter>COMPCOUNT</parameter> equal to the number of key
        fields.  That way, a check for equality between two SSQLS
        structures in your C++ code will give the same results as a
        check for equality in SQL.</para>

        <para><parameter>COMPCOUNT</parameter> must
        be at least 1. The current implementation of
        <varname>sql_create_</varname><emphasis>x</emphasis> cannot
        create an SSQLS without comparison member functions.</para>

        <para>Because our <classname>stock</classname> structure
        is less-than-comparable, you can use it in STL algorithms
        and containers that require this, such as STL's associative
        containers:</para>

        <programlisting>
std::set&lt;stock&gt; result;   
query.storein(result);
cout &lt;&lt; result.lower_bound(stock("Hamburger"))-&gt;item &lt;&lt; endl;</programlisting>

        <para>This will print the first item in the result set that
        begins with "Hamburger".</para>

        <para>The third parameter to
        <varname>sql_create_</varname><emphasis>x</emphasis> is
        <parameter>SETCOUNT</parameter>. If this is nonzero, it adds an
        initialization constructor and a <function>set()</function>
        member function taking the given number of arguments,
        for setting the first <emphasis>N</emphasis> fields of the
        structure. For example, you could change the above example
        like so:</para>

        <programlisting>
sql_create_5(stock, 1, 2,
    string, item,
    int, num,                  
    double, weight,  
    double, price,  
    mysqlpp::Date, date)
        
stock foo("Hotdog", 52);</programlisting>

        <para>In addition to this 2-parameter constructor, this version
        of the <classname>stock</classname> SSQLS will have a similar
        2-parameter <function>set()</function> member function.</para>

        <para>The <parameter>COMPCOUNT</parameter> and
        <parameter>SETCOUNT</parameter> values cannot be equal. If
        they are, the macro will generate two initialization
        constructors with identical parameter lists, which
        is illegal in C++. Why does this happen? It's often
        convenient to be able to say something like <userinput>x
        == stock("Hotdog")</userinput>. This requires that there
        be a constructor taking <parameter>COMPCOUNT</parameter>
        arguments to create the temporary <classname>stock</classname>
        instance used in the comparison. It is easy to work around
        this limitation. Using our <classname>stock</classname>
        example structure, if you wanted comparisons to consider all
        5 fields and also be able to initialize all 5 fields at once,
        you would pass 5 for <parameter>COMPCOUNT</parameter> and
        0 for <parameter>SETCOUNT</parameter>. You would still get
        a 5-parameter initialization constructor and a 5-parameter
        <function>set()</function> function.</para>
    </sect2>


    <sect2>
        <title>Retrieving a Table Subset</title>

        <para>It's not necessary to retrieve an entire table
        row using SSQLS, as long as the fields you want are
        grouped together at the start of the table schema.
        <filename>examples/custom6.cpp</filename> illustrates
        this:</para>

        <programlisting><xi:include href="custom6.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>(See the simple1 example in the <xref
        linkend="tutorial"/> for another way to accomplish the same
        thing.)</para>

        <para>This example illustrates an important point: you
        could not use the 5-member <classname>stock</classname>
        structure in this example. The reason is, when you assign a
        <classname>Row</classname> object to an SSQLS, the function
        that copies the row's data into the structure expects to
        see as many fields in the row as are in the SSQLS. Your
        program will crash when the code tries to access fields
        beyond those that exist in the <classname>Row</classname>
        object. The converse is not true, however: if you change
        the <command>SELECT</command> statement above so that
        it retrieves more than one column, the code will still
        work, because the extra fields in each row will simply be
        ignored.</para>

        <para>Realize that the second and third parameters to
        <varname>sql_create_1</varname> can't be anything other
        than 1 and 0, respectively. As discussed above, the second
        parameter must be at least 1, but since there is only one
        field in the structure, it cannot be higher than 1. Since
        the third parameter cannot be equal to the second, only 0
        works there.</para>
    </sect2>


    <sect2>
        <title>Additional Features of Specialized SQL
        Structures</title>

        <para>Up to this point, we haven't been using all of the
        features in the SSQLS structures we've been generating.
        What else can we do with SSQLSes? Consider this:</para>

        <programlisting>
query.insert(s);</programlisting>

        <para>This does exactly what you think it does: it builds
        an <command>INSERT</command> query to insert the contents
        of <varname>s</varname> into the database. You have only to
        call <methodname>query::execute()</methodname> to actually
        insert it. This is possible because SSQLSes have functions that
        <classname>Query</classname> can call to get the list of fields
        and such, which it uses to build the <command>INSERT</command>
        query. <methodname>query::update()</methodname> and
        <methodname>query::replace()</methodname> also rely on these
        features.</para>

        <para>Another feature you might find a use for is changing
        the table name used in queries. By default, the table in the
        MySQL database is assumed to have the same name as the SSQLS
        structure type. But if this is inconvenient, you can globally
        change the table name used in queries like this:</para>

        <programlisting>
stock::table() = "MyStockData";</programlisting>
    </sect2>


    <sect2>
        <title>Using an SSQLS in Multiple Modules</title>

        <para>It's convenient to define an SSQLS in a header file
        so you can use it in multiple modules. You run into a bit of
        a problem, though, because each SSQLS includes a few static
        data members to hold information common to all structures of
        that type. (The table name and the list of field names.) When
        you <command>#include</command> that header in more than
        one module, you get a multiply-defined symbol error at link
        time.</para>

        <para>The way around this is to add this before <emphasis>all
        but one</emphasis> of the places where you pull in the header
        definining the SSQLS:</para>

        <programlisting>
#define MYSQLPP_SSQLS_NO_STATICS</programlisting>

        <para>This suppresses the static data members in any SSQLS
        defined thereafter.</para>

        <para>These data members must exist, so one (and only
        one!) module must bring in the SSQLS definition without
        this being defined. Thus, you don't want to put this
        <userinput>#define</userinput> in the header file with the
        SSQLS definition. It's usually easy to find one module in a
        program that logically "owns" each SSQLS, and it can pull in
        the header definining the SSQLS directly, without suppressing
        the static data members.</para>

        <para>Note that due to a compiler limitation, you can't
        use this feature with Visual C++ 2003. As instructed
        in <filename>README.vc</filename>, you have to disable
        this feature in order to get the SSQLS header files to
        compile. Having done that, the SSQLS feature works fine as
        long as you can live with using each structure type in a
        single module. Visual C++ 2005 and newer don't suffer from
        this limitation.</para>
    </sect2>


    <sect2>
        <title>Harnessing SSQLS Internals</title>

        <para>The <symbol>sql_create</symbol> macros define several
        methods for each SSQLS. These methods are mostly for use within
        the library, but some of them are useful enough that you might
        want to harness them for your own ends. Here is some pseudocode
        showing how the most useful of these methods would be defined
        for the <structname>stock</structname> structure used in all
        the <filename>custom*.cpp</filename> examples:</para>

        <programlisting>
// Basic form
template &lt;class Manip&gt;   
stock_value_list&lt;Manip&gt; value_list(cchar *d = &#34;,&#34;,
    Manip m = mysqlpp::quote) const;  

template &lt;class Manip&gt;   
stock_field_list&lt;Manip&gt; field_list(cchar *d = &#34;,&#34;,   
    Manip m = mysqlpp::do_nothing) const;  

template &lt;class Manip&gt;   
stock_equal_list&lt;Manip&gt; equal_list(cchar *d = &#34;,&#34;,
    cchar *e = &#34; = &#34;, Manip m = mysqlpp::quote) const;  


// Boolean argument form
template &lt;class Manip&gt;
stock_cus_value_list&lt;Manip&gt; value_list([cchar *d, [Manip m,] ]   
    bool i1, bool i2 = false, ... , bool i5 = false) const;  

// List form  
template &lt;class Manip&gt;
stock_cus_value_list&lt;Manip&gt; value_list([cchar *d, [Manip m,] ]  
    stock_enum i1, stock_enum i2 = stock_NULL, ...,
    stock_enum i5 = stock_NULL) const;  

// Vector form  
template &lt;class Manip&gt;
stock_cus_value_list&lt;Manip&gt; value_list([cchar *d, [Manip m,] ]  
    vector&lt;bool&gt; *i) const;  

...Plus the obvious equivalents for field_list() and equal_list()</programlisting>

        <para>Rather than try to learn what all of these methods do at
        once, let's ease into the subject. Consider this code:</para>

        <programlisting>
stock s("Dinner Rolls", 75, 0.95, 0.97, "1998-05-25");   
cout &lt;&lt; "Value list: " &lt;&lt; s.value_list() &lt;&lt; endl;  
cout &lt;&lt; "Field list: " &lt;&lt; s.field_list() &lt;&lt; endl;  
cout &lt;&lt; "Equal list: " &lt;&lt; s.equal_list() &lt;&lt; endl;</programlisting>

        <para>That would produce something like:</para>

        <programlisting>
Value list: 'Dinner Rolls',75,0.95,0.97,'1998-05-25'   
Field list: item,num,weight,price,date  
Equal list: item = 'Dinner Rolls',num = 75,weight = 0.95, price = 0.97,date = '1998-05-25'</programlisting>

        <para>That is, a "value list" is a list of data member values
        within a particular SSQLS instance, a "field list" is a list
        of the fields (columns) within that SSQLS, and an "equal list"
        is a list in the form of an SQL equals clause.</para>

        <para>Just knowing that much, it shouldn't surprise you
        to learn that <methodname>Query::insert()</methodname> is
        implemented more or less like this:</para>

        <programlisting>
*this &lt;&lt; "INSERT INTO " &lt;&lt; v.table() &lt;&lt; " (" &lt;&lt; v.field_list() &lt;&lt;
        ") VALUES (" &lt;&lt; v.value_list() &lt;&lt; ")";</programlisting>

        <para>where 'v' is the SSQLS you're asking the Query object
        to insert into the database.</para>

        <para>Now let's look at a complete example,
        which uses one of the more complicated forms of
        <methodname>equal_list()</methodname>. This example
        builds a query with fewer hard-coded strings than
        the most obvious technique requires, which makes
        it more robust in the face of change. Here is
        <filename>examples/custom5.cpp</filename>:</para>

        <programlisting><xi:include href="custom5.txt" parse="text" 
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>This example uses the list form of
        <methodname>equal_list()</methodname>. The
        arguments <varname>stock_weight</varname>
        and <varname>stock_price</varname> are enum
        values equal to the position of these columns
        within the <structname>stock</structname> table.
        <symbol>sql_create_</symbol><emphasis>x</emphasis> generates
        this enum for you automatically.</para>

        <para>The boolean argument form of that
        <methodname>equal_list()</methodname> call would look like
        this:</para>

        <programlisting>
query &lt;&lt; "select * from stock where " &lt;&lt;
        res[0].equal_list(" and ", false, false, true, true, false);</programlisting>

        <para>It's a little more verbose, as you can see. And if you
        want to get really complicated, use the vector form:</para>

        <programlisting>
vector&lt;bool&gt; v(5, false);
v[stock_weight] = true;
v[stock_price] = true;
query &lt;&lt; "select * from stock where " &lt;&lt;
        res[0].equal_list(" and ", v);</programlisting>

        <para>This form makes the most sense if you are building many
        other queries, and so can re-use that vector object.</para>

        <para>Many of these methods accept manipulators and custom
        delimiters. The defaults are suitable for building SQL queries,
        but if you're using these methods in a different context,
        you may need to override these defaults. For instance, you
        could use these methods to dump data to a text file using
        different delimiters and quoting rules than SQL.</para>

        <para>At this point, we've seen all the major aspects of the
        SSQLS feature. The final sections of this chapter look at
        some of the peripheral aspects.</para>
    </sect2>


    <sect2>
        <title>Alternate Creation Methods</title>

        <para>If for some reason you want your SSQLS data members
        to have different names than used in the MySQL database,
        you can do so like this:</para>

        <programlisting>
sql_create_c_names_5(stock, 1, 5,        
    string, item, "item",
    int, num, "quantity",  
    double, weight, "weight",  
    double, price, "price"  
    mysqlpp::Date, date, "shipment")</programlisting>

        <para>If you want your SSQLS to have its data members in a
        different order from those in the MySQL table, you can do it
        like this:</para>

        <programlisting>
sql_create_c_order_5(stock, 2, 5,   
    mysqlpp::Date, date, 5,
    double, price, 4,   
    string, item, 1,    
    int, num, 2,   
    double, weight, 3)</programlisting>

        <para>You can combine the custom names and custom ordering
        like this:</para>

        <programlisting>
sql_create_complete_5(stock, 2, 5,   
    mysqlpp::date, date, "shipment", 5,
    double, price, "price", 4,
    string, item, "item", 1,
    int, num, "quantity", 2,
    double, weight, "weight", 3)</programlisting>
    </sect2>


    <sect2>
        <title>Expanding SSQLS Macros</title>

        <para>If you ever need to see the code that a given
        SSQLS declaration expands out to, use the utility
        <filename>doc/ssqls-pretty</filename>, like so:</para>

        <programlisting>
doc/ssqls-pretty &lt; myprog.cpp |less</programlisting>

        <para>This Perl script locates the first SSQLS declaration
        in that file, then uses the C++ preprocessor to expand that
        macro. (The script assumes that your system's preprocessor
        is called <filename>cpp</filename>, and that its command line
        interface follows Unix conventions.)</para>

        <para>If you run it from the top MySQL++ directory, as shown
        above, it will use the header files in the distribution's
        <filename>lib</filename> subdirectory. Otherwise, it
        assumes the MySQL++ headers are in their default location,
        <filename>/usr/include/mysql++</filename>. If you want to
        use headers in some other location, you'll need to change
        the directory name in <command>-I</command> flag at the top
        of the script.</para>
    </sect2>


    <sect2>
        <title>Extending the SSQLS Mechanism</title>

        <para>The SSQLS headers &mdash; custom.h and custom-macros.h
        &mdash; are automatically generated by the Perl script
        <filename>custom.pl</filename>. Although it is possible to
        change this script to get additional functionality, it's
        usually better to do that through inheritance.</para>

        <para>A regular user may find it helpful to change the the
        limit on the maximum number of SSQLS data members allowed.
        It's 25 out of the box. A smaller value may speed up
        compile time, or you may require a higher value because
        you have more complex tables than that. Simply change the
        <varname>max_data_members</varname> variable at the top of
        <filename>custom.pl</filename> and say <command>make</command>.
        The limit for Visual C++ is 31, according to one report. There
        doesn't seem to be a practical limit with GCC 3.3 at least:
        I set the limit to 100 and the only thing that happened
        is that custom-macros.h went from 1.3 MB to 18 MB and the
        build time for <filename>examples/custom.*</filename> got a
        lot longer.</para>
    </sect2>

    <sect2>
        <title>SSQLS and BLOB Columns</title>

        <para>It takes special care to use SSQLS with BLOB
        columns. It's safest to declare the SSQLS field as of
        type <classname>mysqlpp::sql_blob</classname>. This
        is currently a typedef alias for <ulink type="classref"
        url="String">String</ulink>, which is the form the data is in
        just before the SSQLS mechanism populates the structure. Thus,
        when the data is copied from the internal MySQL++ data
        structures into your SSQLS, you get a direct copy of the
        <classname>String</classname> object's contents, without
        interference.</para>

        <para>Because C++ strings handle binary data just fine, you
        might think you can use <classname>std::string</classname>
        instead of <classname>sql_blob</classname>, but the
        current design of <classname>String</classname> converts
        to <classname>std::string</classname> via a C string. As a
        result, the BLOB data is truncated at the first embedded
        null character during population of the SSQLS. There's
        no way to fix that without completely redesigning either
        <classname>String</classname> or the SSQLS mechanism.</para>

        <para>The <classname>sql_blob</classname> typedef may be
        changed to alias a different type in the future, so using it
        instead of <classname>String</classname> ensures that your
        code tracks these library changes automatically. Besides,
        <classname>String</classname> is only intended to be an
        internal mechanism within MySQL++. The only reason the
        layering is so thin here is because it's the only way to
        prevent BLOB data from being corrupted while avoiding that
        looming redesign effort.</para>

        <para>You can see this technique in action in the
        <filename>cgi_jpeg</filename> example:</para>

        <programlisting><xi:include href="cgi_jpeg.txt" parse="text"
        xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
    </sect2>
</sect1>


<sect1 id="unicode" xreflabel="Using Unicode with MySQL++">
    <title>Using Unicode with MySQL++</title>

    <sect2>
        <title>A Short History of Unicode</title>
        <subtitle>...with a focus on relevance to MySQL++</subtitle>

        <para>In the old days, computer operating systems only
        dealt with 8-bit character sets. That only allows for 256
        possible characters, but the modern Western languages have
        more characters combined than that alone. Add in all the
        other languages of the world plus the various symbols people
        use in writing, and you have a real mess!</para>

        <para>Since no standards body held sway over things like
        international character encoding in the early days of
        computing, many different character sets were invented. These
        character sets weren't even standardized between operating
        systems, so heaven help you if you needed to move localized
        Greek text on a DOS box to a Russian Macintosh! The only
        way we got any international communication done at all was
        to build standards on top of the common 7-bit ASCII subset.
        Either people used approximations like a plain "c" instead
        of the French "&ccedil;", or they invented things like
        HTML entities ("&amp;ccedil;" in this case) to encode these
        additional characters using only 7-bit ASCII.</para>

        <para>Unicode solves this problem. It encodes every character
        used for writing in the world, using up to 4 bytes per
        character. The subset covering the most economically valuable
        cases takes two bytes per character, so most Unicode-aware
        programs deal in 2-byte characters, for efficiency.</para>

        <para>Unfortunately, Unicode was invented about two decades
        too late for Unix and C. Those decades of legacy created an
        immense inertia preventing a widespread move away from 8-bit
        characters. MySQL and C++ come out of these older traditions,
        and so they share the same practical limitations. MySQL++
        doesn't have a reason to do anything more than just pass
        data along unchanged, so you still need to be aware of these
        underlying issues.</para>

        <para>During the development of the <ulink
        url="http://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs">Plan
        9</ulink> operating system (a kind
        of successor to Unix) Ken Thompson <ulink
        url="http://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">invented</ulink>
        the <ulink url="http://en.wikipedia.org/wiki/UTF-8">UTF-8
        encoding</ulink>. UTF-8 is a superset of 7-bit ASCII and
        is compatible with C strings, since it doesn't use 0 bytes
        anywhere as multi-byte Unicode encodings do. As a result,
        many programs that deal in text will cope with UTF-8 data
        even though they have no explicit support for UTF-8. (Follow
        the last link above to see how the design of UTF-8 allows
        this.) Thus, when explicit support for Unicode was added in
        MySQL v4.1, they chose to make UTF-8 the native encoding,
        to preserve backward compatibility with programs that had no
        Unicode support.</para>
    </sect2>


    <sect2>
        <title>Unicode on Unixy Systems</title>

        <para>Linux and Unix have system-wide UTF-8 support these
        days. If your operating system is of 2001 or newer vintage,
        it probably has such support.</para>

        <para>On such a system, the terminal I/O code understands
        UTF-8 encoded data, so your program doesn't require any
        special code to correctly display a UTF-8 string. If you
        aren't sure whether your system supports UTF-8 natively,
        just run the <filename>simple1</filename> example: if the
        first item has two high-ASCII characters in place of the
        "&uuml;" in "N&uuml;rnberger Brats", you know it's not
        handling UTF-8.</para>

        <para>If your Unix doesn't support UTF-8 natively, it likely
        doesn't support any form of Unicode at all, for the historical
        reasons I gave above. Therefore, you will have to convert the
        UTF-8 data to the local 8-bit character set. The standard Unix
        function <function>iconv()</function> can help here. If your
        system doesn't have the <function>iconv()</function> facility,
        there is <ulink url="http://www.gnu.org/software/libiconv/">a
        free implementation</ulink> available from the GNU
        Project. Another library you might check out is IBM's <ulink
        url="http://icu.sourceforge.net/">ICU</ulink>. This is
        rather heavy-weight, so if you just need basic conversions,
        <function>iconv()</function> should suffice.</para>
    </sect2>


    <sect2>
        <title>Unicode on Windows</title>

        <para>Each Windows API function that takes a string actually
        comes in two versions. One version supports only 1-byte "ANSI"
        characters (a superset of ASCII), so they end in 'A'. Windows
        also supports the 2-byte subset of Unicode called <ulink
        url="http://en.wikipedia.org/wiki/UCS-2">UCS-2</ulink>.
        Some call these "wide" characters,
        so the other set of functions end in 'W'. The <function><ulink
        url="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/messagebox.asp">MessageBox</ulink>()</function>
        API, for instance, is actually a macro, not a real function. If
        you define the <symbol>UNICODE</symbol> macro when building
        your program, the <function>MessageBox()</function> macro
        evaluates to <function>MessageBoxW()</function>; otherwise,
        to <function>MessageBoxA()</function>.</para>

        <para>Since MySQL uses the UTF-8 Unicode encoding and Windows
        uses UCS-2, you must convert data when passing text between
        MySQL++ and the Windows API. Since there's no point in trying
        for portability &mdash; no other OS I'm aware of uses UCS-2
        &mdash; you might as well use platform-specific functions
        to do this translation. Since version 2.2.2, MySQL++ ships
        with two Visual C++ specific examples showing how to do this
        in a GUI program.  (In earlier versions of MySQL++, we did
        Unicode conversion in the console mode programs, but this
        was unrealistic.)</para>

        <para>How you handle Unicode data depends on whether you're
        using the native Windows API, or the newer .NET API. First,
        the native case:</para>

        <programlisting>
// Convert a C string in UTF-8 format to UCS-2 format.
void ToUCS2(LPTSTR pcOut, int nOutLen, const char* kpcIn)
{
    MultiByteToWideChar(CP_UTF8, 0, kpcIn, -1, pcOut, nOutLen);
}

// Convert a UCS-2 string to C string in UTF-8 format.
void ToUTF8(char* pcOut, int nOutLen, LPCWSTR kpcIn)
{
    WideCharToMultiByte(CP_UTF8, 0, kpcIn, -1, pcOut, nOutLen, 0, 0);
}</programlisting>

        <para>These functions leave out some important error checking,
        so see <filename>examples/vstudio/mfc/mfc_dlg.cpp</filename>
        for the complete version.</para>

        <para>If you're building a .NET application (such as, perhaps,
        because you're using Windows Forms), it's better to use the
        .NET libraries for this:</para>

        <programlisting>
// Convert a C string in UTF-8 format to a .NET String in UCS-2 format.
String^ ToUCS2(const char* utf8)
{
    return gcnew String(utf8, 0, strlen(utf8), System::Text::Encoding::UTF8);
}

// Convert a .NET String in UCS-2 format to a C string in UTF-8 format.
System::Void ToUTF8(char* pcOut, int nOutLen, String^ sIn)
{
    array&lt;Byte&gt;^ bytes = System::Text::Encoding::UTF8->GetBytes(sIn);
    nOutLen = Math::Min(nOutLen - 1, bytes->Length);
    System::Runtime::InteropServices::Marshal::Copy(bytes, 0,
        IntPtr(pcOut), nOutLen);
    pcOut[nOutLen] = '\0';
}</programlisting>

        <para>Unlike the native API versions, these examples are
        complete, since the .NET platform handles a lot of things
        behind the scenes for us. We don't need any error-checking
        code for such simple routines.</para>

        <para>All of this assumes you're using Windows NT or one of
        its direct descendants: Windows 2000, Windows XP, Windows
        Vista, or any "Server" variant of Windows. Windows 95 and its
        descendants (98, ME, and CE) do not support UCS-2. They still
        have the 'W' APIs for compatibility, but they just smash the
        data down to 8-bit and call the 'A' version for you.</para>
    </sect2>


    <sect2>
        <title>For More Information</title>
            <para>The <ulink
            url="http://www.unicode.org/faq/">Unicode
            FAQs</ulink> page has copious information on
            this complex topic.</para>

            <para>When it comes to Unix
            and UTF-8 specific items, the <ulink
            url="http://www.cl.cam.ac.uk/~mgk25/unicode.html">UTF-8
            and Unicode FAQ for Unix/Linux</ulink> is a
            quicker way to find basic information.</para>
        </sect2>
</sect1>


<sect1 id="threads">
    <title>Using MySQL++ in a Multithreaded Program</title>

    <para>MySQL++ doesn't fall out of the box ready to be used with
    threads. Furthermore, once you build a thread-aware program with
    MySQL++, it isn't "thread safe" in an absolute sense: there
    exist incorrect usage patterns which will cause errors. This
    section will discuss these issues, and give advice on how to
    avoid problems.</para>

    <sect2>
        <title>Build Issues</title>

        <para>Before you can safely use MySQL++ with threads, there are
        several things you must do to get a thread-aware build:</para>

        <orderedlist>
            <listitem>
                <para><emphasis>Build MySQL++ itself with thread
                awareness turned on.</emphasis></para>

                <para>On platforms that use the
                <filename>configure</filename> script (Linux, Mac OS X,
                *BSD, Solaris, Cygwin...) you need to explicitly ask
                for thread support. And beware, this is only a request
                to the <filename>configure</filename> script to look
                for thread support on your system, not a requirement
                to do or die: if the script doesn't find what it needs
                to do threading, MySQL++ will just get built without
                thread support. See <filename>README.unix</filename>
                for more details.</para>

                <para>When building MySQL++ with the Visual C++
                project files or the MinGW Makefile that comes with
                the MySQL++ distribution, threading is always turned
                on, due to the nature of Windows.</para>

                <para>If you build MySQL++ in some unsupported way,
                such as with Dev-Cpp (based on MinGW) you're on your
                own to enable this.</para>
            </listitem>

            <listitem>
                <para><emphasis>Link your program to a thread-aware
                build of the MySQL C API library.</emphasis></para>

                <para>Depending on your platform, you might
                have to build this yourself (e.g. Cygwin), or
                you might get only one library which is always
                thread-aware (e.g. Visual C++), or there might be
                two different MySQL C API libraries, one of which
                is thread-aware and the other not (e.g. Linux). See
                the <filename>README</filename>.* file for your
                particular platform, and also the MySQL developer
                documentation.</para>
            </listitem>

            <listitem>
                <para><emphasis>Enable threading in your program's
                build options.</emphasis></para>

                <para>This is different for every platform, but
                it's usually the case that you don't get thread-aware
                builds by default. You might have to turn on a compiler
                option, or link your program to a different library,
                or some combination of both. See your development
                environment's documentation, or study how MySQL++
                itself turns on thread-aware build options when
                requested.</para>
            </listitem>
        </orderedlist>
    </sect2>

    <sect2>
        <title>Connection Management</title>

        <para>The MySQL C API underpinning MySQL++ does not allow
        multiple concurrent queries on a single connection. You
        can run into this problem in a single-threaded program,
        too, which is why we cover the details elsewhere, in <xref
        linkend="concurrentqueries"/>. It's a thornier problem when
        using threads, though.</para>

        <para>The simple fix is to just create a separarate <ulink
        url="Connection" type="classref"/> object for each thread
        that needs to make database queries. This works well if you
        have a small number of threads that need to make queries, and
        each thread uses its connection often enough that the server
        doesn't time out waiting for queries. (By default, current
        MySQL servers have an 8 hour idle timeout on connections. It's
        a configuration option, though, so your server may be set
        differently.)</para>

        <para>If you have lots of threads or the frequency
        of queries is low, the connection management overhead
        will be excessive. To avoid that, we created the <ulink
        url="ConnectionPool" type="classref"/> class. It manages a
        pool of <classname>Connection</classname>s like library books:
        a thread checks one out, uses it, and then returns it to the
        pool when it's done with it. This keeps the number of active
        connections as low as possible. The class is abstract because
        it has two Template Methods that you need to define, to provide
        implementation details MySQL++ can't know itself. In designing
        your <classname>ConnectionPool</classname> derivative, you
        might consider making it a Singleton (see Gamma et al.),
        since there should only be one pool in a program.</para>
        
        <para>Here is an example showing how to use connection
        pools with POSIX threads:</para>

        <!-- FIXME: CPOOL EXAMPLE GOES HERE -->

        <para>There are other examples in the MySQL++ examples
        subdirectory for other thread implementations, but they're
        functionally identical to this.</para>

        <para>Beware, connection pools only work correctly with threads
        if you build MySQL++ with thread support. The mutex lock
        mechanism used to keep the pool's internal data consistent
        while multiple threads access it will just quietly become
        a no-op if MySQL++ is built without thread support. We do
        it this way because we don't want to make thread support a
        MySQL++ prerequisite. And, although it would be of limited
        value, this lets you use <classname>ConnectionPool</classname>
        in single-threaded programs.</para>

        <para>You might wonder why we don't just work around this
        weakness in the C API transparently in MySQL++ instead of
        mandating design guidelines to avoid it. We'd like to do
        just that, but how? If you consider just the threaded case,
        you could argue for the use of mutexes to protect a connection
        from trying to execute two queries at once. The cure is worse
        than the disease: it turns a design error into a performance
        sap, as the second thread is blocked indefinitely waiting
        for the connection to free up. Much better to let the program
        get the "Commands out of sync" error, which will guide you to
        this section of the manual, which tells you how to avoid the
        error with a better design. Another option would be to bury
        <classname>ConnectionPool</classname> functionality within
        MySQL++ itself, so the library could create new connections at
        need. Unfortunately, that increases the complexity of using
        the library; the above example is one of the most complex
        in MySQL++. The whole point of the library is to make using
        the database easier. We added the pool option for those that
        really need it, but an option it must remain.</para>
    </sect2>


    <sect2>
        <title>Helper Functions</title>

        <para><classname>Connection</classname> has several
        thread-related methods you might care about when using MySQL++
        with threads.</para>

        <para>You can call
        <methodname>Connection::thread_aware()</methodname> to
        determine whether MySQL++ and the underlying C API library
        were both built to be thread-aware. Again, I stress that
        thread <emphasis>awareness</emphasis> is not the same thing
        as thread <emphasis>safety</emphasis>: it's still up to you
        to make your code thread-safe. If this method returns true,
        it just means it's <emphasis>possible</emphasis> to achieve
        thread-safety.</para>

        <para>If your program's connection-management strategy
        allows a thread to use a <classname>Connection</classname>
        object that another thread created, you must call
        <methodname>Connection::thread_start()</methodname> from these
        threads before they do anything with MySQL++. It's safe for
        the thread that created the <classname>Connection</classname>
        object to call it, too, but unnecessary. This is because the
        underlying C API library takes care of it for you when you try
        to establish your first connection from that thread. So, if you
        use the simple <classname>Connection</classname>-per-thread
        strategy lined out above, you never need to call this
        method, but if you use something more complex like
        <classname>ConnectionPool</classname>, you do.</para>

        <para>Finally, there's the complementary method,
        <methodname>Connection::thread_end()</methodname>. Strictly
        speaking, it's not <emphasis>necessary</emphasis> to
        call this. However, as alluded above, the underlying C API
        library allocates some per-thread memory for each thread that
        calls <methodname>Connection::thread_start()</methodname>
        or establishes connections. It's not very much memory,
        it doesn't grow over time, and a typical program is going
        to need this memory for its entire run time anyway. Memory
        debuggers aren't smart enough to know all this, though, so
        they will gripe about a memory leak unless you call this from
        each thread that uses MySQL++ before that thread exits.</para>

        <para>It's not relevant to this chapter's
        topic, so to be clear I want to point out that
        <methodname>Connection::thread_id()</methodname> has to do with
        threads in the database server, not client-side threads.</para>
    </sect2>


    <sect2>
        <title>Sharing MySQL++ Data Structures</title>

        <para>We're in the process of making it safer to share
        MySQL++'s data structures across threads.</para>

        <para>By way of illustration, let me explain a problem we
        had up until MySQL++ v3.0. When you issue a database query,
        part of the data you get back in the result set is common
        to all rows in that result set. For example, there's a
        list of what columns are in each row.  Since this data is
        the same for each row, older versions of MySQL++ kept this
        information in the <ulink url="Result" type="classref"/>
        object, and each <ulink url="Row" type="classref"/> kept
        a pointer back to the <classname>Result</classname> that
        created it, so it could access this common data at need. This
        is fine as long as each <classname>Result</classname> object
        outlives the <classname>Row</classname> objects it returns,
        which isn't a hardship in a single-threaded program. But
        in a multi-threaded program, there's frequently a desire to
        let one connection do the queries, and other threads process
        the results. You can see how avoiding lifetime problems here
        would require a careful locking strategy. We got around this
        by giving these shared data structures a lifetime independent
        of the <classname>Result</classname> object that intitially
        creates it, so the last one out could turn off the lights,
        so to speak.</para>

        <para>Although this is now a solved problem, I bring it up
        because there are likely other similar lifetime and sequencing
        problems waiting to be discovered inside MySQL++. If you
        would like to help us find these, by all means, share data
        between threads willy-nilly. We welcome your crash reports
        on the MySQL++ mailing list. But if you'd prefer to avoid
        problems, it's better to keep all data about a query within
        a single thread. Between this and the previous section's
        advice, you should be able to use threads with MySQL++
        without trouble.</para>
    </sect2>
</sect1>


<sect1 id="breakages">
    <title>Incompatible Library Changes</title>

    <para>This chapter documents those library changes since the
    epochal 1.7.9 release that break end-user programs. You can dig
    this stuff out of the ChangeLog, but the ChangeLog focuses more
    on explaining and justifying the facets of each change, while
    this section focuses on how to migrate your code between these
    library versions.</para>

    <para>Since pure additions do not break programs, those changes
    are still documented only in the ChangeLog.</para>


    <sect2>
        <title>API Changes</title>

        <para>This section documents files, functions, methods and
        classes that were removed or changed in an incompatible
        way. If your program uses the changed item, you will have to
        change something in your program to get it to compile after
        upgrading to each of these versions.</para>

        <sect3>
            <title>v1.7.10</title>

            <para>Removed <methodname>Row::operator[]()</methodname>
            overloads except the one for <type>size_type</type>,
            and added <methodname>Row::lookup_by_name()</methodname>
            to provide the "subscript by string" functionality.
            In practical terms, this change means that the
            <varname>row["field"]</varname> syntax no longer works; you
            must use the new <methodname>lookup_by_name</methodname>
            method instead.</para>

            <para>Renamed the generated library on POSIX
            systems from <filename>libsqlplus</filename> to
            <filename>libmysqlpp</filename>.</para>
        </sect3>


        <sect3>
            <title>v1.7.19</title>

            <para>Removed
            <methodname>SQLQuery::operator=()</methodname>, and the
            same for its <classname>Query</classname> subclass. Use
            the copy constructor instead, if you need to copy one
            query to another query object.</para>
        </sect3>


        <sect3>
            <title>v1.7.20</title>

            <para>The library used to have two names for many core
            classes: a short one, such as <classname>Row</classname>
            and a longer one, <classname>MysqlRow</classname>. The
            library now uses the shorter names exclusively.</para>

            <para>All symbols within MySQL++ are in the
            <filename>mysqlpp</filename> namespace now if you
            use the new <filename>mysql++.h</filename> header. If
            you use the older <filename>sqlplus.hh</filename> or
            <filename>mysql++.hh</filename> headers, these symbols
            are hoist up into the global namespace. The older headers
            cause the compiler to emit warnings if you use them,
            and they will go away someday.</para>
        </sect3>

        
        <sect3>
            <title>v2.0.0</title>

            <sect4>
                <title>Connection class changes</title>

                <itemizedlist>
                    <listitem><para><methodname>Connection::create_db()</methodname>
                    and <methodname>drop_db()</methodname> return
                    <symbol>true</symbol> on success. They
                    returned <symbol>false</symbol> in
                    v1.7.<emphasis>x</emphasis>!  This change will
                    only affect your code if you have exceptions
                    disabled.</para></listitem>

                    <listitem><para>Renamed
                    <methodname>Connection::real_connect()</methodname>
                    to <methodname>connect()</methodname>, made several
                    more of its parameters default, and removed the
                    old <methodname>connect()</methodname> method, as
                    it's now a strict subset of the new one. The only
                    practical consequence is that if your program was
                    using <methodname>real_connect()</methodname>,
                    you will have to change it to
                    <methodname>connect()</methodname>.</para></listitem>

                    <listitem><para>Replaced
                    <methodname>Connection::read_option()</methodname>
                    with new <methodname>set_option()</methodname>
                    mechanism. In addition to changing the name,
                    programs using this function will have to use
                    the new <classname>Connection::Option</classname>
                    enumerated values, accept a <symbol>true</symbol>
                    return value as meaning success instead of 0,
                    and use the proper argument type. Regarding the
                    latter, <methodname>read_option()</methodname>
                    took a <type>const char*</type> argument, but
                    because it was just a thin wrapper over the
                    MySQL C API function <ulink url="mysql-options"
                    type="mysqlapi"/>, the actual value being pointed
                    to could be any of several types. This new
                    mechanism is properly type-safe.</para></listitem>
                </itemizedlist>
            </sect4>


            <sect4>
                <title>Exception-related changes</title>

                <itemizedlist>
                    <listitem><para>Classes
                    <classname>Connection</classname>,
                    <classname>Query</classname>,
                    <classname>Result</classname>,
                    <classname>ResUse</classname>, and
                    <classname>Row</classname> now derive from <ulink
                    type="classref" url="OptionalExceptions"/>
                    which gives these classes a common interface
                    for disabling exceptions. In addition, almost
                    all of the per-method exception-disabling
                    flags were removed. The preferred method
                    for disabling exceptions on these objects
                    is to create an instance of the new <ulink
                    type="classref" url="NoExceptions"/> class
                    on the stack, which disables exceptions on an
                    <classname>OptionalExceptions</classname> subclass
                    as long as the <classname>NoExceptions</classname>
                    instance is in scope. You can instead call
                    <methodname>disable_exceptions()</methodname>
                    on any of these objects, but if you only want
                    them disabled temporarily, it's easy to forget
                    to re-enable them later.</para></listitem>

                    <listitem><para>In the previous version of
                    MySQL++, those classes that supported optional
                    exceptions that could create instances of other
                    such classes were supposed to pass this flag
                    on to their children. That is, if you created
                    a <classname>Connection</classname> object
                    with exceptions enabled, and then asked it to
                    create a <classname>Query</classname> object,
                    the <classname>Query</classname> object also had
                    exceptions disabled. The problem is, this didn't
                    happen in all cases where it should have in v1.7.
                    This bug is fixed in v2.0. If your program begins
                    crashing due to uncaught exceptions after upgrading
                    to v2.0, this is the most likely cause. The most
                    expeditious fix in this situation is to use the
                    new <classname>NoExceptions</classname> feature to
                    return these code paths to the v1.7 behavior. A
                    better fix is to rework your program to avoid or
                    deal with the new exceptions.</para></listitem>

                    <listitem><para>All custom MySQL++ exceptions
                    now derive from the new <ulink type="classref"
                    url="Exception"/> interface.  The practical
                    upshot of this is that the variability
                    between the various exception types has been
                    eliminated. For instance, to get the error
                    string, the <classname>BadQuery</classname>
                    exception had a string member called
                    <varname>error</varname> plus a method called
                    <methodname>what()</methodname>.  Both did the same
                    thing, and the <methodname>what()</methodname>
                    method is more common, so the error string was
                    dropped from the interface. None of the example
                    programs had to be changed to work with the new
                    exceptions, so if your program handles MySQL++
                    exceptions the same way they do, your program
                    won't need to change, either.</para></listitem>

                    <listitem><para>Renamed
                    <classname>SQLQueryNEParams</classname> exception
                    to <classname>BadParamCount</classname> to match
                    style of other exception names.</para></listitem>

                    <listitem><para>Added
                    <ulink type="classref" url="BadOption"/>,
                    <ulink type="classref" url="ConnectionFailed"/>,
                    <ulink type="classref" url="DBSelectionFailed"/>,
                    <ulink type="classref" url="EndOfResults"/>,
                    <ulink type="classref" url="EndOfResultSets"/>,
                    <ulink type="classref" url="LockFailed"/>, and
                    <ulink type="classref" url="ObjectNotInitialized"/>
                    exception types, to fix overuse of
                    <classname>BadQuery</classname>.  Now the latter
                    is used only for errors on query execution. If
                    your program has a "catch-all" block taking
                    a <classname>std::exception</classname> for
                    each try block containing MySQL++ statements,
                    you probably won't need to change your
                    program. Otherwise, the new exceptions will
                    likely show up as program crashes due to unhandled
                    exceptions.</para></listitem>
                </itemizedlist>
            </sect4>


            <sect4>
                <title>Query class changes</title>

                <itemizedlist>
                    <listitem><para>In previous versions,
                    <classname>Connection</classname>
                    had a querying interface similar to class
                    <classname>Query</classname>'s.  These methods were
                    intended only for <classname>Query</classname>'s
                    use; no example ever used this interface directly,
                    so no end-user code is likely to be affected by
                    this change.</para></listitem>

                    <listitem><para>A more likely problem
                    arising from the above change is code that
                    tests for query success by calling the
                    <classname>Connection</classname> object's
                    <methodname>success()</methodname> method or by
                    casting it to <type>bool</type>.  This will now
                    give misleading results, because queries no longer
                    go through the <classname>Connection</classname>
                    object. Class <classname>Query</classname> has
                    the same success-testing interface, so use it
                    instead.</para></listitem>

                    <listitem><para><classname>Query</classname>
                    now derives from
                    <classname>std::ostream</classname> instead of
                    <classname>std::stringstream</classname>.</para></listitem>
                </itemizedlist>
            </sect4>


            <sect4>
                <title>Result/ResUse class changes</title>

                <itemizedlist>
                    <listitem><para>Renamed
                    <methodname>ResUse::mysql_result()</methodname>
                    to <methodname>raw_result()</methodname> so it's
                    database server neutral.</para></listitem>

                    <listitem><para>Removed
                    <methodname>ResUse::eof()</methodname>,
                    as it wrapped the deprecated and
                    unnecessary MySQL C API function <ulink
                    url="mysql-eof" type="mysqlapi"/>. See
                    the <filename>simple3</filename> and
                    <filename>usequery</filename> examples to see
                    the proper way to test for the end of a result
                    set.</para></listitem>
                </itemizedlist>
            </sect4>


            <sect4>
                <title>Row class changes</title>

                <itemizedlist>
                    <listitem><para>Removed "field name" form of
                    <methodname>Row::field_list()</methodname>.
                    It was pointless.</para></listitem>

                    <listitem><para><classname>Row</classname>
                    subscripting works more
                    like v1.7.9: one can subscript a
                    <classname>Row</classname> with a string (e.g.
                    <methodname>row["myfield"]</methodname>), or with
                    an integer (e.g.  <methodname>row[5]</methodname>).
                    <methodname>lookup_by_name()</methodname> was
                    removed. Because <methodname>row[0]</methodname>
                    is ambiguous (0 could mean the first field, or be
                    a null pointer to <type>const char*</type>), there
                    is now <methodname>Row::at()</methodname>, which
                    can look up any field by index.</para></listitem>
                </itemizedlist>
            </sect4>


            <sect4>
                <title>Miscellaneous changes</title>

                <itemizedlist>
                    <listitem><para>Where possible, all distributed
                    Makefiles only build dynamic libraries. (Shared
                    objects on most Unices, DLLs on Windows,
                    etc.) Unless your program is licensed under
                    the GPL or LGPL, you shouldn't have been using
                    the static libraries from previous versions
                    anyway.</para></listitem>

                    <listitem><para>Removed the backwards-compatibility
                    headers <filename>sqlplus.hh</filename> and
                    <filename>mysql++.hh</filename>.  If you were
                    still using these, you will have to change
                    to <filename>mysql++.h</filename>, which
                    will put all symbols in <symbol>namespace
                    mysqlpp</symbol>.</para></listitem>

                    <listitem><para>Can no longer use arrow operator
                    (<symbol>-></symbol>) on the iterators
                    into the <classname>Fields</classname>,
                    <classname>Result</classname>
                    and <classname>Row</classname>
                    containers.</para></listitem>
                </itemizedlist>
            </sect4>
        </sect3>

        <sect3>
            <title>v2.2.0</title>

            <para>Code like this will have to change:</para>

            <programlisting>
query &lt;&lt; "delete from mytable where myfield=%0:myvalue";
query.parse();
query.def["myvalue"] = some_value;
query.execute();</programlisting>

            <para>...to something more like this:</para>

            <programlisting>
query &lt;&lt; "delete from mytable where myfield=%0";
query.parse();
query.execute(some_value);</programlisting>

            <para>The first code snippet abuses the default template
            query parameter mechanism (<varname>Query::def</varname>)
            to fill out the template instead of using one of the
            overloaded forms of <methodname>execute()</methodname>,
            <methodname>store()</methodname> or
            <methodname>use()</methodname> taking one or more
            <classname>SQLString</classname> parameters.  The purpose
            of <varname>Query::def</varname> is to allow for default
            template parameters over multiple queries. In the first
            snippet above, there is only one parameter, so in order
            to justify the use of template queries in the first
            place, it must be changing with each query. Therefore,
            it isn't really a "default" parameter at all. We did not
            make this change maliciously, but you can understand why
            we are not in any hurry to restore this "feature".</para>

            <para>(Incidentally, this change was made to allow better
            support for BLOB columns.)</para>
        </sect3>


        <sect3>
            <title>v2.3.0</title>

            <para><methodname>Connection::set_option()</methodname>
            calls now set the connection option immediately, instead
            of waiting until just before the connnection is actually
            established. Code that relied on the old behavior could see
            unhandled exceptions, since option setting errors are now
            thrown from a different part of the code. You want to wrap
            the actual <methodname>set_option()</methodname> call now,
            not <methodname>Connection::connect()</methodname></para>

            <para><classname>FieldNames</classname> and
            <classname>FieldTypes</classname> are no longer exported
            from the library. If you are using these classes directly
            from Visual C++ or MinGW, your code won't be able to
            dynamically link to a DLL version of the library any
            more. These are internal classes, however, so no one
            should be using them directly.</para>
        </sect3>
    </sect2>


    <sect2>
        <title>ABI Changes</title>

        <para>This section documents those library changes that require
        you to rebuild your program so that it will link with the
        new library.  Most of the items in the previous section are
        also ABI changes, but this section is only for those items
        that shouldn't require any code changes in your program.</para>

        <para>If you were going to rebuild your program after
        installing the new library anyway, you can probably ignore
        this section.</para>


        <sect3>
            <title>v1.7.18</title>

            <para>The <classname>Query</classname> classes now subclass
            from <classname>stringstream</classname> instead of the
            deprecated <classname>strstream</classname>.</para>
        </sect3>


        <sect3>
            <title>v1.7.19</title>

            <para>Fixed several <type>const</type>-incorrectnesses
            in the <classname>Query</classname> classes.</para>
        </sect3>


        <sect3>
            <title>v1.7.22</title>

            <para>Removed "reset query" parameters from several
            <classname>Query</classname> class members. This is not
            an API change, because the parameters were given default
            values, and the library would ignore any value other than
            the default. So, any program that tried to make them take
            another value wouldn't have worked anyway.</para>
        </sect3>


        <sect3>
            <title>v1.7.24</title>

            <para>Some freestanding functions didn't get moved into
            <symbol>namespace mysqlpp</symbol> when that namespace was
            created. This release fixed that. It doesn't affect the
            API if your program's C++ source files say <symbol>using
            namespace mysqlpp</symbol> within them.</para>
        </sect3>


        <sect3>
            <title>v2.0.0</title>

            <para>Removed <methodname>Connection::infoo()</methodname>.
            (I'd call this an API change if I thought there were any
            programs out there actually using this...)</para>

            <para>Collapsed the <classname>Connection</classname>
            constructor taking a bool (for setting the throw_exceptions
            flag) and the default constructor into a single constructor
            using a default for the parameter.</para>

            <para>Classes <classname>Connection</classname> and
            <classname>Query</classname> are now derived from the
            <classname>Lockable</classname> interface, instead of
            implementing their own lock/unlock functions.</para>

            <para>In several instances, functions that took
            objects by value now take them by const reference,
            for efficiency.</para>

            <para>Merged <classname>SQLQuery</classname> class's
            members into class <classname>Query</classname>.</para>

            <para>Merged <classname>RowTemplate</classname> class's
            members into class <classname>Row</classname>.</para>

            <para>Reordered member variable declarations in some
            classes. The most common instance is when the private
            section was declared before the public section; it is now
            the opposite way. This can change the object's layout
            in memory, so a program linking to the library must be
            rebuilt.</para>

            <para>Simplified the date and time class hierarchy.
            <ulink type="structref" url="Date"/> used to
            derive from <classname>mysql_date</classname>,
            <ulink type="structref" url="Time"/> used to derive
            from <classname>mysql_time</classname>, and <ulink
            type="structref" url="DateTime"/> used to derive from
            both of those.  All three of these classes used to derive
            from <classname>mysql_dt_base</classname>.  All of the
            <classname>mysql_*</classname> classes' functionality and
            data has been folded into the leaf classes, and now the
            only thing shared between them is their dependence on the
            <ulink type="structref" url="DTbase"/> template. Since
            the leaf classes' interface has not changed and end-user
            code shouldn't have been using the other classes, this
            shouldn't affect the API in any practical way.</para>

            <para><classname>mysql_type_info</classname> now always
            initializes its private <varname>num</varname> member.
            Previously, this would go uninitialized if you used
            the default constructor. Now there is no default
            ctor, but the ctor taking one argument (which sets
            <varname>num</varname>) has a default.</para>
        </sect3>
    </sect2>
</sect1>


<sect1 id="licenses">
    <title>Licensing</title>

    <para>The primary copyright holders on the MySQL++ library and
    its documentation are Kevin Atkinson (1998), MySQL AB (1999
    through 2001) and Educational Technology Resources, Inc. (2004
    through the date of this writing). There are other contributors,
    who also retain copyrights on their additions; see the ChangeLog
    file in the MySQL++ distribution tarball for details.</para>

    <para>The MySQL++ library and its Reference Manual are released
    under the GNU Lesser General Public License (LGPL), reproduced
    below.</para>
    
    <para>The MySQL++ User Manual &mdash; excepting some example
    code from the library reproduced within it &mdash; is offered
    under a license closely based on the Linux Documentation Project
    License (LDPL) v2.0, included below. (The MySQL++ documentation
    isn't actually part of the Linux Documentation Project, so
    the main changes are to LDP-related language. Also, generic
    language such as "author's (or authors')" has been replaced
    with specific language, because the license applies to only
    this one document.)</para>

    <para>These licenses basically state that you are free to use,
    distribute and modify these works, whether for personal or
    commercial purposes, as long as you grant the same rights to
    those you distribute the works to, whether you changed them or
    not. See the licenses below for full details.</para>


<?hard-pagebreak?>
<sect2>
    <title>GNU Lesser General Public License</title>
    <subtitle>Version 2.1, February 1999</subtitle>

    <para>Copyright (C) 1991, 1999 Free Software Foundation, Inc.
    59 Temple Place, Suite 330, Boston, MA  02111-1307  USA Everyone is
    permitted to copy and distribute verbatim copies of this license
    document, but changing it is not allowed.</para>

    <para>[This is the first released version of the Lesser GPL.
    It also counts as the successor of the GNU Library Public License,
    version 2, hence the version number 2.1.]</para>

    <sect3>
        <title>Preamble</title>

        <para>The licenses for most software are designed to take
        away your freedom to share and change it.  By contrast, the
        GNU General Public Licenses are intended to guarantee your
        freedom to share and change free software--to make sure the
        software is free for all its users.</para>

        <para>This license, the Lesser General Public License, applies
        to some specially designated software packages--typically
        libraries--of the Free Software Foundation and other authors
        who decide to use it.  You can use it too, but we suggest
        you first think carefully about whether this license or the
        ordinary General Public License is the better strategy to use
        in any particular case, based on the explanations below.</para>

        <para>When we speak of free software, we are referring to
        freedom of use, not price.  Our General Public Licenses are
        designed to make sure that you have the freedom to distribute
        copies of free software (and charge for this service if you
        wish); that you receive source code or can get it if you want
        it; that you can change the software and use pieces of it in
        new free programs; and that you are informed that you can do
        these things.</para>

        <para>To protect your rights, we need to make restrictions
        that forbid distributors to deny you these rights or to ask
        you to surrender these rights.  These restrictions translate
        to certain responsibilities for you if you distribute copies
        of the library or if you modify it.</para>

        <para>For example, if you distribute copies of the library,
        whether gratis or for a fee, you must give the recipients all
        the rights that we gave you.  You must make sure that they,
        too, receive or can get the source code.  If you link other
        code with the library, you must provide complete object
        files to the recipients, so that they can relink them
        with the library after making changes to the library and
        recompiling it.  And you must show them these terms so they
        know their rights.</para>

        <para>We protect your rights with a two-step method: (1)
        we copyright the library, and (2) we offer you this license,
        which gives you legal permission to copy, distribute and/or
        modify the library.</para>

        <para>To protect each distributor, we want to make it very
        clear that there is no warranty for the free library.  Also,
        if the library is modified by someone else and passed on, the
        recipients should know that what they have is not the original
        version, so that the original author's reputation will not be
        affected by problems that might be introduced by others.</para>

        <para>Finally, software patents pose a constant threat to the
        existence of any free program.  We wish to make sure that a
        company cannot effectively restrict the users of a free program
        by obtaining a restrictive license from a patent holder.
        Therefore, we insist that any patent license obtained for
        a version of the library must be consistent with the full
        freedom of use specified in this license.</para>

        <para>Most GNU software, including some libraries, is covered
        by the ordinary GNU General Public License.  This license,
        the GNU Lesser General Public License, applies to certain
        designated libraries, and is quite different from the ordinary
        General Public License.  We use this license for certain
        libraries in order to permit linking those libraries into
        non-free programs.</para>

        <para>When a program is linked with a library, whether
        statically or using a shared library, the combination of
        the two is legally speaking a combined work, a derivative of
        the original library.  The ordinary General Public License
        therefore permits such linking only if the entire combination
        fits its criteria of freedom.  The Lesser General Public
        License permits more lax criteria for linking other code with
        the library.</para>

        <para>We call this license the "Lesser" General Public License
        because it does Less to protect the user's freedom than the
        ordinary General Public License.  It also provides other
        free software developers Less of an advantage over competing
        non-free programs.  These disadvantages are the reason we
        use the ordinary General Public License for many libraries.
        However, the Lesser license provides advantages in certain
        special circumstances.</para>

        <para>For example, on rare occasions, there may be a special
        need to encourage the widest possible use of a certain
        library, so that it becomes a de-facto standard.  To achieve
        this, non-free programs must be allowed to use the library.
        A more frequent case is that a free library does the same job
        as widely used non-free libraries.  In this case, there is
        little to gain by limiting the free library to free software
        only, so we use the Lesser General Public License.</para>

        <para>In other cases, permission to use a particular library
        in non-free programs enables a greater number of people to
        use a large body of free software.  For example, permission
        to use the GNU C Library in non-free programs enables many
        more people to use the whole GNU operating system, as well
        as its variant, the GNU/Linux operating system.</para>

        <para>Although the Lesser General Public License is Less
        protective of the users' freedom, it does ensure that the
        user of a program that is linked with the Library has the
        freedom and the wherewithal to run that program using a
        modified version of the Library.</para>

        <para>The precise terms and conditions for copying,
        distribution and modification follow.  Pay close attention
        to the difference between a "work based on the library" and
        a "work that uses the library".  The former contains code
        derived from the library, whereas the latter must be combined
        with the library in order to run.</para>
    </sect3>


    <sect3>
        <title>GNU LESSER GENERAL PUBLIC LICENSE</title>
        <subtitle>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
            MODIFICATION</subtitle>

        <para>0. This License Agreement applies to any software
        library or other program which contains a notice placed by
        the copyright holder or other authorized party saying it
        may be distributed under the terms of this Lesser General
        Public License (also called "this License").  Each licensee
        is addressed as "you".</para>

        <para>A "library" means a collection of software functions
        and/or data prepared so as to be conveniently linked with
        application programs (which use some of those functions and
        data) to form executables.</para>

        <para>The "Library", below, refers to any such software
        library or work which has been distributed under these terms.
        A "work based on the Library" means either the Library or any
        derivative work under copyright law: that is to say, a work
        containing the Library or a portion of it, either verbatim
        or with modifications and/or translated straightforwardly
        into another language.  (Hereinafter, translation is included
        without limitation in the term "modification".)</para>

        <para>"Source code" for a work means the preferred form
        of the work for making modifications to it.  For a library,
        complete source code means all the source code for all modules
        it contains, plus any associated interface definition files,
        plus the scripts used to control compilation and installation
        of the library.</para>

        <para>Activities other than copying, distribution and
        modification are not covered by this License; they are outside
        its scope.  The act of running a program using the Library
        is not restricted, and output from such a program is covered
        only if its contents constitute a work based on the Library
        (independent of the use of the Library in a tool for writing
        it).  Whether that is true depends on what the Library does
        and what the program that uses the Library does.</para>

        <para>1. You may copy and distribute verbatim copies of the
        Library's complete source code as you receive it, in any
        medium, provided that you conspicuously and appropriately
        publish on each copy an appropriate copyright notice and
        disclaimer of warranty; keep intact all the notices that
        refer to this License and to the absence of any warranty;
        and distribute a copy of this License along with the
        Library.</para>

        <para>You may charge a fee for the physical act of transferring
        a copy, and you may at your option offer warranty protection
        in exchange for a fee.</para>

        <para>2. You may modify your copy or copies of the Library or
        any portion of it, thus forming a work based on the Library,
        and copy and distribute such modifications or work under the
        terms of Section 1 above, provided that you also meet all of
        these conditions:</para>

        <blockquote>
            <para>a) The modified work must itself be a software
            library.</para>

            <para>b) You must cause the files modified to carry
            prominent notices stating that you changed the files and
            the date of any change.</para>

            <para>c) You must cause the whole of the work to be
            licensed at no charge to all third parties under the
            terms of this License.</para>

            <para>d) If a facility in the modified Library refers
            to a function or a table of data to be supplied by an
            application program that uses the facility, other than as
            an argument passed when the facility is invoked, then you
            must make a good faith effort to ensure that, in the event
            an application does not supply such function or table,
            the facility still operates, and performs whatever part
            of its purpose remains meaningful.</para>

            <para>(For example, a function in a library to compute
            square roots has a purpose that is entirely well-defined
            independent of the application.  Therefore, Subsection 2d
            requires that any application-supplied function or table
            used by this function must be optional: if the application
            does not supply it, the square root function must still
            compute square roots.)</para>
        </blockquote>

        <para>These requirements apply to the modified work as a whole.
        If identifiable sections of that work are not derived from
        the Library, and can be reasonably considered independent and
        separate works in themselves, then this License, and its terms,
        do not apply to those sections when you distribute them as
        separate works.  But when you distribute the same sections
        as part of a whole which is a work based on the Library,
        the distribution of the whole must be on the terms of this
        License, whose permissions for other licensees extend to the
        entire whole, and thus to each and every part regardless of
        who wrote it.</para>

        <para>Thus, it is not the intent of this section to claim
        rights or contest your rights to work written entirely by
        you; rather, the intent is to exercise the right to control
        the distribution of derivative or collective works based on
        the Library.</para>

        <para>In addition, mere aggregation of another work not
        based on the Library with the Library (or with a work based
        on the Library) on a volume of a storage or distribution
        medium does not bring the other work under the scope of this
        License.</para>

        <para>3. You may opt to apply the terms of the ordinary GNU
        General Public License instead of this License to a given
        copy of the Library.  To do this, you must alter all the
        notices that refer to this License, so that they refer to the
        ordinary GNU General Public License, version 2, instead of
        to this License.  (If a newer version than version 2 of the
        ordinary GNU General Public License has appeared, then you
        can specify that version instead if you wish.)  Do not make
        any other change in these notices.</para>

        <para>Once this change is made in a given copy, it is
        irreversible for that copy, so the ordinary GNU General Public
        License applies to all subsequent copies and derivative works
        made from that copy.</para>

        <para>This option is useful when you wish to copy part
        of the code of the Library into a program that is not a
        library.</para>

        <para>4. You may copy and distribute the Library (or a
        portion or derivative of it, under Section 2) in object code
        or executable form under the terms of Sections 1 and 2 above
        provided that you accompany it with the complete corresponding
        machine-readable source code, which must be distributed under
        the terms of Sections 1 and 2 above on a medium customarily
        used for software interchange.</para>

        <para>If distribution of object code is made by offering access
        to copy from a designated place, then offering equivalent
        access to copy the source code from the same place satisfies
        the requirement to distribute the source code, even though
        third parties are not compelled to copy the source along with
        the object code.</para>

        <para>5. A program that contains no derivative of any portion
        of the Library, but is designed to work with the Library by
        being compiled or linked with it, is called a "work that uses
        the Library".  Such a work, in isolation, is not a derivative
        work of the Library, and therefore falls outside the scope
        of this License.</para>

        <para>However, linking a "work that uses the Library" with
        the Library creates an executable that is a derivative of
        the Library (because it contains portions of the Library),
        rather than a "work that uses the library".  The executable
        is therefore covered by this License.  Section 6 states terms
        for distribution of such executables.</para>

        <para>When a "work that uses the Library" uses material from a
        header file that is part of the Library, the object code for
        the work may be a derivative work of the Library even though
        the source code is not.  Whether this is true is especially
        significant if the work can be linked without the Library,
        or if the work is itself a library.  The threshold for this
        to be true is not precisely defined by law.</para>

        <para>If such an object file uses only numerical parameters,
        data structure layouts and accessors, and small macros and
        small inline functions (ten lines or less in length), then the
        use of the object file is unrestricted, regardless of whether
        it is legally a derivative work.  (Executables containing
        this object code plus portions of the Library will still fall
        under Section 6.)</para>

        <para>Otherwise, if the work is a derivative of the Library,
        you may distribute the object code for the work under the
        terms of Section 6.  Any executables containing that work
        also fall under Section 6, whether or not they are linked
        directly with the Library itself.</para>

        <para>6. As an exception to the Sections above, you may
        also combine or link a "work that uses the Library" with
        the Library to produce a work containing portions of the
        Library, and distribute that work under terms of your choice,
        provided that the terms permit modification of the work for
        the customer's own use and reverse engineering for debugging
        such modifications.</para>

        <para>You must give prominent notice with each copy of the
        work that the Library is used in it and that the Library
        and its use are covered by this License.  You must supply a
        copy of this License.  If the work during execution displays
        copyright notices, you must include the copyright notice for
        the Library among them, as well as a reference directing the
        user to the copy of this License.  Also, you must do one of
        these things:</para>

        <blockquote>
            <para>a) Accompany the work with the complete corresponding
            machine-readable source code for the Library including
            whatever changes were used in the work (which must
            be distributed under Sections 1 and 2 above); and,
            if the work is an executable linked with the Library,
            with the complete machine-readable "work that uses the
            Library", as object code and/or source code, so that the
            user can modify the Library and then relink to produce
            a modified executable containing the modified Library.
            (It is understood that the user who changes the contents
            of definitions files in the Library will not necessarily
            be able to recompile the application to use the modified
            definitions.)</para>

            <para>b) Use a suitable shared library mechanism for
            linking with the Library.  A suitable mechanism is one
            that (1) uses at run time a copy of the library already
            present on the user's computer system, rather than copying
            library functions into the executable, and (2) will
            operate properly with a modified version of the library,
            if the user installs one, as long as the modified version
            is interface-compatible with the version that the work
            was made with.</para>

            <para>c) Accompany the work with a written offer, valid for
            at least three years, to give the same user the materials
            specified in Subsection 6a, above, for a charge no more
            than the cost of performing this distribution.</para>

            <para>d) If distribution of the work is made by offering
            access to copy from a designated place, offer equivalent
            access to copy the above specified materials from the
            same place.</para>

            <para>e) Verify that the user has already received a
            copy of these materials or that you have already sent
            this user a copy.</para>
        </blockquote>

        <para>For an executable, the required form of the "work that
        uses the Library" must include any data and utility programs
        needed for reproducing the executable from it.  However,
        as a special exception, the materials to be distributed need
        not include anything that is normally distributed (in either
        source or binary form) with the major components (compiler,
        kernel, and so on) of the operating system on which the
        executable runs, unless that component itself accompanies
        the executable.</para>

        <para>It may happen that this requirement contradicts the
        license restrictions of other proprietary libraries that do not
        normally accompany the operating system.  Such a contradiction
        means you cannot use both them and the Library together in
        an executable that you distribute.</para>

        <para>7. You may place library facilities that are a work
        based on the Library side-by-side in a single library together
        with other library facilities not covered by this License,
        and distribute such a combined library, provided that the
        separate distribution of the work based on the Library and
        of the other library facilities is otherwise permitted,
        and provided that you do these two things:</para>

        <blockquote>
            <para>a) Accompany the combined library with a copy of
            the same work based on the Library, uncombined with any
            other library facilities.  This must be distributed under
            the terms of the Sections above.</para>

            <para>b) Give prominent notice with the combined library of
            the fact that part of it is a work based on the Library,
            and explaining where to find the accompanying uncombined
            form of the same work.</para>
        </blockquote>

        <para>8. You may not copy, modify, sublicense, link with,
        or distribute the Library except as expressly provided
        under this License.  Any attempt otherwise to copy, modify,
        sublicense, link with, or distribute the Library is void, and
        will automatically terminate your rights under this License.
        However, parties who have received copies, or rights, from
        you under this License will not have their licenses terminated
        so long as such parties remain in full compliance.</para>

        <para>9. You are not required to accept this License,
        since you have not signed it.  However, nothing else grants
        you permission to modify or distribute the Library or its
        derivative works.  These actions are prohibited by law if
        you do not accept this License.  Therefore, by modifying or
        distributing the Library (or any work based on the Library),
        you indicate your acceptance of this License to do so, and
        all its terms and conditions for copying, distributing or
        modifying the Library or works based on it.</para>

        <para>10. Each time you redistribute the Library (or any work
        based on the Library), the recipient automatically receives
        a license from the original licensor to copy, distribute,
        link with or modify the Library subject to these terms and
        conditions.  You may not impose any further restrictions
        on the recipients' exercise of the rights granted herein.
        You are not responsible for enforcing compliance by third
        parties with this License.</para>

        <para>11. If, as a consequence of a court judgment or
        allegation of patent infringement or for any other reason
        (not limited to patent issues), conditions are imposed
        on you (whether by court order, agreement or otherwise)
        that contradict the conditions of this License, they do not
        excuse you from the conditions of this License.  If you cannot
        distribute so as to satisfy simultaneously your obligations
        under this License and any other pertinent obligations, then
        as a consequence you may not distribute the Library at all.
        For example, if a patent license would not permit royalty-free
        redistribution of the Library by all those who receive copies
        directly or indirectly through you, then the only way you
        could satisfy both it and this License would be to refrain
        entirely from distribution of the Library.</para>

        <para>If any portion of this section is held invalid or
        unenforceable under any particular circumstance, the balance
        of the section is intended to apply, and the section as a
        whole is intended to apply in other circumstances.</para>

        <para>It is not the purpose of this section to induce you
        to infringe any patents or other property right claims or
        to contest validity of any such claims; this section has the
        sole purpose of protecting the integrity of the free software
        distribution system which is implemented by public license
        practices.  Many people have made generous contributions to
        the wide range of software distributed through that system
        in reliance on consistent application of that system; it is
        up to the author/donor to decide if he or she is willing to
        distribute software through any other system and a licensee
        cannot impose that choice.</para>

        <para>This section is intended to make thoroughly clear
        what is believed to be a consequence of the rest of this
        License.</para>

        <para>12. If the distribution and/or use of the Library
        is restricted in certain countries either by patents or by
        copyrighted interfaces, the original copyright holder who
        places the Library under this License may add an explicit
        geographical distribution limitation excluding those countries,
        so that distribution is permitted only in or among countries
        not thus excluded.  In such case, this License incorporates the
        limitation as if written in the body of this License.</para>

        <para>13. The Free Software Foundation may publish revised
        and/or new versions of the Lesser General Public License from
        time to time.  Such new versions will be similar in spirit
        to the present version, but may differ in detail to address
        new problems or concerns.</para>

        <para>Each version is given a distinguishing version number.
        If the Library specifies a version number of this License which
        applies to it and "any later version", you have the option of
        following the terms and conditions either of that version or of
        any later version published by the Free Software Foundation.
        If the Library does not specify a license version number,
        you may choose any version ever published by the Free Software
        Foundation.</para>

        <para>14. If you wish to incorporate parts of the Library
        into other free programs whose distribution conditions are
        incompatible with these, write to the author to ask for
        permission.  For software which is copyrighted by the Free
        Software Foundation, write to the Free Software Foundation;
        we sometimes make exceptions for this.  Our decision will be
        guided by the two goals of preserving the free status of all
        derivatives of our free software and of promoting the sharing
        and reuse of software generally.</para>

        <para>NO WARRANTY</para>

        <para>15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE,
        THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED
        BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING
        THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY
        "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
        IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
        OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
        LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE,
        YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
        CORRECTION.</para>

        <para>16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW
        OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY
        OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS
        PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
        GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
        OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT
        NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
        OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF
        THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH
        HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
        SUCH DAMAGES.</para>

        <para>END OF TERMS AND CONDITIONS</para>
    </sect3>


    <sect3>
        <title>How to Apply These Terms to Your New
        Libraries</title>

        <para>If you develop a new library, and you want it to be of
        the greatest possible use to the public, we recommend making
        it free software that everyone can redistribute and change.
        You can do so by permitting redistribution under these terms
        (or, alternatively, under the terms of the ordinary General
        Public License).</para>

        <para>To apply these terms, attach the following notices to
        the library.  It is safest to attach them to the start of
        each source file to most effectively convey the exclusion of
        warranty; and each file should have at least the "copyright"
        line and a pointer to where the full notice is found.</para>

        <blockquote>
            <para>&lt;one line to give the library's name and a brief
            idea of what it does.&gt;</para>

            <para>Copyright &copy; &lt;year&gt; &lt;name of
            author&gt;</para>

            <para>This library is free software; you can redistribute
            it and/or modify it under the terms of the GNU Lesser
            General Public License as published by the Free Software
            Foundation; either version 2.1 of the License, or (at
            your option) any later version.</para>

            <para>This library is distributed in the hope that it
            will be useful, but WITHOUT ANY WARRANTY; without even
            the implied warranty of MERCHANTABILITY or FITNESS FOR
            A PARTICULAR PURPOSE.  See the GNU Lesser General Public
            License for more details.</para>

            <para>You should have received a copy of the GNU Lesser
            General Public License along with this library; if not,
            write to the Free Software Foundation, Inc., 59 Temple
            Place, Suite 330, Boston, MA 02111-1307 USA</para>
        </blockquote>

        <para>Also add information on how to contact you by electronic
        and paper mail.</para>

        <para>You should also get your employer (if you work as
        a programmer) or your school, if any, to sign a "copyright
        disclaimer" for the library, if necessary.  Here is a sample;
        alter the names:</para>

        <blockquote>
            <para>Yoyodyne, Inc., hereby disclaims all copyright
            interest in the library `Frob' (a library for tweaking
            knobs) written by James Random Hacker.</para>

            <para>&lt;signature of Ty Coon&gt;, 1 April 1990</para>

            <para>Ty Coon, President of Vice</para>
        </blockquote>

        <para>That's all there is to it!</para>
    </sect3>
</sect2>


<?hard-pagebreak?>
<sect2>
    <title>MySQL++ User Manual License</title>

    <sect3>
        <title>I. COPYRIGHT</title>

        <para>The copyright to the MySQL++ User Manual is owned by
        its authors.</para>
    </sect3>

    <sect3>
        <title>II. LICENSE</title>

        <para>The MySQL++ User Manual may be reproduced and
        distributed in whole or in part, in any medium physical or
        electronic, provided that this license notice is displayed
        in the reproduction. Commercial redistribution is permitted
        and encouraged. Thirty days advance notice via email to the
        authors of redistribution is appreciated, to give the authors
        time to provide updated documents.</para>

        <sect4>
            <title>A. REQUIREMENTS OF MODIFIED WORKS</title>

            <para>All modified documents, including translations,
            anthologies, and partial documents, must meet the following
            requirements:</para>

            <orderedlist numeration="arabic">
                <listitem><para>The modified version must be labeled
                as such.</para></listitem>

                <listitem><para>The person making the modifications
                must be identified.</para></listitem>

                <listitem><para>Acknowledgement of the original author
                must be retained.</para></listitem>

                <listitem><para>The location of the original unmodified
                document be identified.</para></listitem>

                <listitem><para>The original authors' names may
                not be used to assert or imply endorsement of the
                resulting document without the original authors'
                permission.</para></listitem>
            </orderedlist>

            <para>In addition it is requested that:</para>

            <orderedlist numeration="arabic">
                <listitem><para>The modifications (including deletions)
                be noted.</para></listitem>

                <listitem><para>The authors be notified by email of the
                modification in advance of redistribution, if an email
                address is provided in the document.</para></listitem>
            </orderedlist>

            <para>Mere aggregation of the MySQL++ User Manual with
            other documents or programs on the same media shall not
            cause this license to apply to those other works.</para>

            <para>All translations, derivative documents, or modified
            documents that incorporate the MySQL++ User Manual may
            not have more restrictive license terms than these,
            except that you may require distributors to make the
            resulting document available in source format.</para>
        </sect4>
    </sect3>
</sect2>
</sect1>
</article>

