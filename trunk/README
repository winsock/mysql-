This is the C++ API for MySQL.

Starting with 1.7.10, this is maintained by Warren Young
<mysqlpp@etr-usa.com>. It was maintained by Sinisa Milivojevic
<sinisa@mysql.com> from version 1.2 to 1.7.9, and by Kevin Atkinson
<kevinatk@home.com> prior to that.

Send feedback to the MySQL++ mailing list.  Its web page is:
http://lists.mysql.com/plusplus/

To build and install the library on Unixy systems, the minimum build
commands are:
	
	$ ./configure
	$ make
	$ su
	# make install

(If you're not on a Unixy system, see the other README files in this
directory.)

The configure script takes several interesting options.  Say,

	$ ./configure --help

to get a list.

Because MySQL++ comes with a great many header files -- some of which
have some fairly generic names -- I highly recommend you add something
like '--includedir=/usr/local/include/mysql++' to the configure command.
This puts the MySQL++ header files in their own directory.

If you wish to install mysql++ in a root directory other than /usr/local,
run configure with --prefix=.....

If you need thread support on your system, give the --enable-thread-check
option to the configure script.  It will then try to determine whether
your system has a threads implementation it can understand, and whether it
can use the thread-safe MySQL C library.  If both of these aren't true,
you won't get a thread-safe MySQL++ library.  Beware that a thread-aware
MySQL++ library requires that you link your program differently, so if
you depend on ABI stability and have been using MySQL++ for some time,
you will almost certainly want to leave this option out.

You may want to try out the programs in the examples subdirectory to
ensure that the MySQL++ API and your MySQL database are both working
properly.  See examples/README for further details.

If you've got a fresh CVS checkout, you will need to say:

	$ ./bootstrap [options]

before running configure for the first time.  Any options given to the
bootstrap script are passed to the configure script, which is run with
the "maintainer mode" option.  Because we set the maintainer mode, the
bootstrap script should only need to be run once in normal circumstances.
Occasionally automake/autoconf gets confused and you have to run it again,
but this only affects people tweaking these configuration files. (*.am,
*.in, and everything in the config subdir, mostly.)

At the moment, this project only builds under GCC 3.0 and higher. It's
probably possible to make it work on 2.95.x versions without breaking
forward compatibility, but I'll only go to that effort if demand is there.
So far, it seems that most people are just upgrading to GCC 3.x where
necessary.

I only have access to GCC-based Linux systems, and Visual C++ on
Windows. All other ports will live or die solely as a function of
contributed patches. If you want support for a currently-unsupported
system, you'll have to help out.
