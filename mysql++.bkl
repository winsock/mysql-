<?xml version="1.0"?>
<makefile>
	<requires version="0.1.9"/>
	<using module="datafiles"/>
	<include file="presets/simple.bkl"/>

	<set var="DBLDOLLAR">$(DOLLAR)$(DOLLAR)</set>
	<set var="AND">&amp;&amp;</set>
	<set var="ZLIB">yes</set>

	<set var="THREAD_TYPE">single</set>
	<if cond="FORMAT in ['msvc6prj', 'mingw']">
		<set var="THREAD_TYPE">multi</set>
	</if>
		
    <option name="BUILD">
        <values>debug,release</values>
        <values-description>Debug,Release</values-description>
        <default-value>debug</default-value>
        <description>
            Type of compiled binaries
        </description>
    </option>

    <set var="DEBUGINFO">
        <if cond="BUILD=='debug'">on</if>
        <if cond="BUILD=='release'">off</if>
    </set>

	<set var="BUILDLIBRARY">yes</set>
	<set var="BUILDEXAMPLES">yes</set>
	<set var="HEADER_DIR">$(PREFIX)/include/mysql++</set>

	<if cond="BUILDLIBRARY=='yes'">
		<dll id="mysqlpp">
			<libname>mysqlpp</libname>
			<so_version>2.2.2</so_version>

			<sources>
				lib/coldata.cpp
				lib/connection.cpp
				lib/datetime.cpp
				lib/field_names.cpp
				lib/fields.cpp
				lib/field_types.cpp
				lib/manip.cpp
				lib/myset.cpp
				lib/mysql++.cpp
				lib/qparms.cpp
				lib/query.cpp
				lib/result.cpp
				lib/row.cpp
				lib/sql_string.cpp
				lib/string_util.cpp 
				lib/transaction.cpp
				lib/type_info.cpp
				lib/vallist.cpp
			</sources>

			<debug-info>$(DEBUGINFO)</debug-info>

			<threading>$(THREAD_TYPE)</threading>
			<cxx-rtti>on</cxx-rtti>
			<cxx-exceptions>on</cxx-exceptions>
			
			<install-to>$(LIBDIR)</install-to>
			
			<if cond="FORMAT=='msvc6prj'">
				<define>_UNICODE</define>
				<define>MYSQLPP_MAKING_DLL</define>
				<include>"C:\Program Files\MySQL\MySQL Server 5.0\include"</include>
				<lib-path>C:\Program Files\MySQL\MySQL Server 5.0\lib\opt</lib-path>
				<sys-lib>libmysql</sys-lib>
			</if>

			<if cond="FORMAT=='mingw'">
				<define>_UNICODE</define>
				<define>MYSQLPP_NO_DLL</define>
				<include>"C:\Program Files\MySQL\MySQL Server 5.0\include"</include>
				<lib-path>"C:\Program Files\MySQL\MySQL Server 5.0\lib\opt"</lib-path>
				<sys-lib>mysqlclient</sys-lib>
			</if>

			<if cond="FORMAT=='autoconf'">
				<depends>lib/custom.h</depends>
				<depends>lib/querydef.h</depends>

				<cxxflags>@PTHREAD_CFLAGS@</cxxflags>
				<include>.</include>
				<ldflags>@PTHREAD_LIBS@ @MYSQLPP_EXTRA_LIBS@</ldflags>
				<sys-lib>@MYSQL_C_LIB@</sys-lib>

				<if cond="ZLIB=='yes'">
					<sys-lib>z</sys-lib>
				</if>

				<modify-target target="uninstall">
					<command>
						rm -f $(DESTDIR)$(libdir)/$(DLLPREFIX)mysqlpp.$(SO_SUFFIX)
					</command>
					<command>
						for f in *.h ; do rm -f $(HEADER_DIR)/$(DBLDOLLAR)f ; done
					</command>
					<command>rmdir $(HEADER_DIR)</command>
				</modify-target>
			</if>
		</dll>

		<data-files>
			<files>lib/*.h</files>
			<install-to>$(HEADER_DIR)</install-to>
		</data-files>
	</if>	<!-- build library -->

	<!-- Set up build options common to all examples -->
	<template id="common-example">
		<if cond="BUILDLIBRARY=='yes'">
			<depends>mysqlpp</depends>
		</if>
	
		<threading>$(THREAD_TYPE)</threading>
		<cxx-rtti>on</cxx-rtti>
		<cxx-exceptions>on</cxx-exceptions>
		<debug-info>$(DEBUGINFO)</debug-info>

		<include>lib</include>

		<if cond="FORMAT in ['autoconf', 'mingw', 'gnu']">
			<lib-path>.</lib-path>
		</if>

		<if cond="FORMAT=='msvc6prj'">
			<define>_UNICODE</define>
			<lib-path>$(BUILD)</lib-path>
			<lib-path>C:\Program Files\MySQL\MySQL Server 5.0\lib\opt</lib-path>
			<include>"C:\Program Files\MySQL\MySQL Server 5.0\include"</include>
			<sys-lib>libmysql</sys-lib>
			<sys-lib>mysqlpp</sys-lib>
		</if>

		<if cond="FORMAT=='mingw'">
			<define>_UNICODE</define>
			<define>MYSQLPP_NO_DLL</define>
			<ldflags>
				-Wl,--enable-auto-import -Wl,--enable-runtime-pseudo-reloc
			</ldflags>
			<lib-path>..\lib</lib-path>
			<lib-path>"C:\Program Files\MySQL\MySQL Server 5.0\lib\opt"</lib-path>
			<include>"C:\Program Files\MySQL\MySQL Server 5.0\include"</include>
			<sys-lib>mysqlclient</sys-lib>
			<sys-lib>mysqlpp</sys-lib>
		</if>

		<if cond="FORMAT=='autoconf'">
			<cxxflags>@PTHREAD_CFLAGS@</cxxflags>
			<ldflags>@PTHREAD_LIBS@ @MYSQLPP_EXTRA_LIBS@</ldflags>
			<sys-lib>@MYSQL_C_LIB@</sys-lib>

			<warnings>max</warnings>
			<sys-lib>mysqlpp</sys-lib>
			<if cond="ZLIB=='yes'">
				<sys-lib>z</sys-lib>
			</if>
		</if>

		<if cond="FORMAT=='gnu'">
			<include>/usr/include/mysql</include>
			<include>/usr/include/mysql++</include>
			<sys-lib>mysqlpp</sys-lib>
			<sys-lib>mysqlclient</sys-lib>
		</if>
	</template>

	<!-- Additional options specific to examples that depend on
	     the util module. -->
	<template id="util-example">
		<depends>util</depends>
		<sys-lib>mysqlpp_util</sys-lib>
	</template>

	<!-- Define output targets, if common-examples are enabled -->
	<if cond="BUILDEXAMPLES=='yes'">
		<!-- The "util" convenience library -->
		<lib id="util" template="common-example">
			<libname>mysqlpp_util</libname>
			<sources>examples/util.cpp</sources>
		</lib>
		
		<!-- The "standard" examples, being the ones that depend on
			the util library. -->
		<exe id="resetdb" template="util-example,common-example">
			<sources>examples/resetdb.cpp</sources>
		</exe>
		<exe id="simple1" template="util-example,common-example">
			<sources>examples/simple1.cpp</sources>
		</exe>
		<exe id="simple2" template="util-example,common-example">
			<sources>examples/simple2.cpp</sources>
		</exe>
		<exe id="simple3" template="util-example,common-example">
			<sources>examples/simple3.cpp</sources>
		</exe>
		<exe id="multiquery" template="util-example,common-example">
			<sources>examples/multiquery.cpp</sources>
		</exe>
		<exe id="tquery" template="util-example,common-example">
			<sources>examples/tquery.cpp</sources>
		</exe>
		<exe id="usequery" template="util-example,common-example">
			<sources>examples/usequery.cpp</sources>
		</exe>
		<exe id="custom1" template="util-example,common-example">
			<sources>examples/custom1.cpp</sources>
		</exe>
		<exe id="custom2" template="util-example,common-example">
			<sources>examples/custom2.cpp</sources>
		</exe>
		<exe id="custom3" template="util-example,common-example">
			<sources>examples/custom3.cpp</sources>
		</exe>
		<exe id="custom4" template="util-example,common-example">
			<sources>examples/custom4.cpp</sources>
		</exe>
		<exe id="custom5" template="util-example,common-example">
			<sources>examples/custom5.cpp</sources>
		</exe>
		<exe id="custom6" template="util-example,common-example">
			<sources>examples/custom6.cpp</sources>
		</exe>
		<exe id="dbinfo" template="util-example,common-example">
			<sources>examples/dbinfo.cpp</sources>
		</exe>
		<exe id="fieldinf1" template="util-example,common-example">
			<sources>examples/fieldinf1.cpp</sources>
		</exe>
		<exe id="load_jpeg" template="util-example,common-example">
			<sources>examples/load_jpeg.cpp</sources>
		</exe>
		<exe id="xaction" template="util-example,common-example">
			<sources>examples/xaction.cpp</sources>
		</exe>

		<!-- The few examples that don't use the util module -->
		<exe id="cgi_jpeg" template="common-example">
			<sources>examples/cgi_jpeg.cpp</sources>
		</exe>
		<exe id="updel" template="common-example">
			<sources>examples/updel.cpp</sources>
		</exe>
	</if>	<!-- build examples -->

	<if cond="FORMAT=='autoconf'">
		<set var="PKGNAME">@PACKAGE_NAME@-@PACKAGE_VERSION@</set>

		<modify-target target="clean">
			<command>
				cd doc/html/refman $(AND) \
					rm -f doxygen.css [a-z]*.{dot,html,map,md5,png}
			</command>
		</modify-target>
			
		<action id="lib/custom.h">
			<command>cd lib ; ./custom.pl</command>
			<depends-on-file>lib/custom.pl</depends-on-file>
		</action>

		<action id="lib/querydef.h">
			<command>cd lib ; ./querydef.pl</command>
			<depends-on-file>lib/querydef.pl</depends-on-file>
		</action>

		<action id="tags">
			<is-phony/>
			<command>ctags `pwd`/{examples,lib}/*.{cpp,h}</command>
			<command>for d in examples lib ; do cd $(DBLDOLLAR)d ; ln -sf ../tags . ; cd .. ; done</command>
		</action>
		<action id="ctags"><depends>tags</depends></action>

		<action id="doc/html/refman/index.html">
			<depends-on-file>lib/Doxyfile</depends-on-file>
			<depends-on-file>lib/*.cpp</depends-on-file>
			<depends-on-file>lib/*.h</depends-on-file>
			<command>
				mkdir -p doc/latex ; cd lib ; doxygen > /dev/null $(AND) \
					cd ../doc/latex $(AND) make pdf > /dev/null $(AND) \
					cp refman.pdf ..
			</command>
		</action>

		<action id="doc/html/userman/index.html">
			<depends-on-file>doc/userman/userman.dbx</depends-on-file>
			<command>cd doc/userman ; make html pdf</command>
		</action>

		<action id="doc">
			<depends>doc/html/userman/index.html</depends>
			<depends>doc/html/refman/index.html</depends>
		</action>

		<action id="dist">
			<depends>doc</depends>

			<!-- Set up package directory -->
			<command>
				for d in config doc/{.,html}/{refman,userman} examples lib ; \
				do \
					mkdir -p $(PKGNAME)/$(DBLDOLLAR)d ; \
				done
			</command>

			<!-- Copy files into package directory -->
			<!-- top directory -->
			<command>
				cp Bakefiles.bkgen bootstrap ChangeLog cleanmf \
					config.guess config.h.in config.sub configure* \
					COPYING CREDITS exrun* HACKERS INSTALL install.bat \
					install-sh libmysqlclient.def LICENSE Makefile.* \
					mysql++.* mysql++_*.ds? osver README* rebake \
					reconf Wishlist $(PKGNAME)
			</command>

			<!-- config subdir -->
			<command>cp config/*.m4 $(PKGNAME)/config</command>

			<!-- doc subdir -->
			<command>
				cp doc/README* doc/*.pdf doc/ssqls-pretty $(PKGNAME)/doc
			</command>
			<command>
				for f in LICENSE Makefile mktxt README *.{dbx,xsl} ; \
				do \
					cp doc/userman/$(DBLDOLLAR)f $(PKGNAME)/doc/userman ; \
				done
			</command>
			<command>
				for d in refman userman ; do \
					for f in *.{css,html} ; do \
						cp doc/html/$(DBLDOLLAR)d/$(DBLDOLLAR)f \
								$(PKGNAME)/doc/html/$(DBLDOLLAR)d ; \
					done ; \
				done ; \
				cp doc/html/refman/*.png $(PKGNAME)/doc/html/refman
			</command>

			<!-- examples subdir -->
			<command>
				cp examples/*.{cpp,h,jpg} $(PKGNAME)/examples
			</command>

			<!-- lib subdir -->
			<command>
				cp lib/*.{cpp,h,in,pl} $(PKGNAME)/lib
			</command>

			<!-- distribution dir created, so pack up a copy and 
			     nuke the temporary -->
			<command>tar czf $(PKGNAME).tar.gz $(PKGNAME)</command>
			<command>rm -rf $(PKGNAME)</command>
		</action>

		<action id="rpm-setup">
			<command>cp $(PKGNAME).tar.gz /usr/src/redhat/SOURCES</command>
			<depends>dist</depends>
		</action>

		<action id="rpm">
			<command>cd /usr/src/redhat/SPECS</command>
			<command>rpmbuild -bb mysql++.spec</command>
			<depends>rpm-setup</depends>
		</action>

		<action id="srpm">
			<command>cd /usr/src/redhat/SPECS</command>
			<command>rpmbuild -bs mysql++.spec</command>
			<depends>rpm-setup</depends>
		</action>

		<action id="ebuild">
			<depends>dist</depends>
			<command>cp $(PKGNAME).tar.gz /usr/portage/distfiles</command>
			<command>
				cp mysql++.ebuild /usr/portage/dev-db/mysql++/$(PKGNAME).ebuild
			</command>
			<command>
				ebuild /usr/portage/dev-db/mysql++/$(PKGNAME).ebuild digest
			</command>
		</action>
	</if>
</makefile>
